#ifndef TESTBENCH_INTEGRATION_TYPES_CONVERSION
#define TESTBENCH_INTEGRATION_TYPES_CONVERSION

#include "NewSmuTypes.h"

/****************************************************************
 ** _41_SSM_ST_SM1 
 ****************************************************************/
extern int _41_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__41_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__41_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__41_SSM_ST_SM1_allow_double_conversion();
extern int _41_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__41_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__41_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__41_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__41_SSM_ST_SM1_Utils;

/****************************************************************
 ** _43_SSM_TR_SM1 
 ****************************************************************/
extern int _43_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__43_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__43_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__43_SSM_TR_SM1_allow_double_conversion();
extern int _43_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__43_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__43_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__43_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__43_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_SM3_SM1_Awakness_of_Train 
 ****************************************************************/
extern int SSM_ST_SM3_SM1_Awakness_of_Train_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM3_SM1_Awakness_of_Train_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM3_SM1_Awakness_of_Train(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM3_SM1_Awakness_of_Train_allow_double_conversion();
extern int SSM_ST_SM3_SM1_Awakness_of_Train_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM3_SM1_Awakness_of_Train_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM3_SM1_Awakness_of_Train(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM3_SM1_Awakness_of_Train_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM3_SM1_Awakness_of_Train_Utils;

/****************************************************************
 ** SSM_TR_SM3_SM1_Awakness_of_Train 
 ****************************************************************/
extern int SSM_TR_SM3_SM1_Awakness_of_Train_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM3_SM1_Awakness_of_Train_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM3_SM1_Awakness_of_Train(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM3_SM1_Awakness_of_Train_allow_double_conversion();
extern int SSM_TR_SM3_SM1_Awakness_of_Train_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM3_SM1_Awakness_of_Train_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM3_SM1_Awakness_of_Train(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM3_SM1_Awakness_of_Train_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM3_SM1_Awakness_of_Train_Utils;

/****************************************************************
 ** SSM_ST_SM1 
 ****************************************************************/
extern int SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM1_allow_double_conversion();
extern int SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM1_Utils;

/****************************************************************
 ** SSM_TR_SM1 
 ****************************************************************/
extern int SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM1_allow_double_conversion();
extern int SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_GSM_R_MobileManagement 
 ****************************************************************/
extern int SSM_ST_GSM_R_MobileManagement_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_GSM_R_MobileManagement_string(const char *str, char **endptr);
extern int string_to_SSM_ST_GSM_R_MobileManagement(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_GSM_R_MobileManagement_allow_double_conversion();
extern int SSM_ST_GSM_R_MobileManagement_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_GSM_R_MobileManagement_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_GSM_R_MobileManagement(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_GSM_R_MobileManagement_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_GSM_R_MobileManagement_Utils;

/****************************************************************
 ** SSM_TR_GSM_R_MobileManagement 
 ****************************************************************/
extern int SSM_TR_GSM_R_MobileManagement_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_GSM_R_MobileManagement_string(const char *str, char **endptr);
extern int string_to_SSM_TR_GSM_R_MobileManagement(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_GSM_R_MobileManagement_allow_double_conversion();
extern int SSM_TR_GSM_R_MobileManagement_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_GSM_R_MobileManagement_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_GSM_R_MobileManagement(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_GSM_R_MobileManagement_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_GSM_R_MobileManagement_Utils;

/****************************************************************
 ** _45_SSM_ST_SM1 
 ****************************************************************/
extern int _45_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__45_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__45_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__45_SSM_ST_SM1_allow_double_conversion();
extern int _45_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__45_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__45_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__45_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__45_SSM_ST_SM1_Utils;

/****************************************************************
 ** _48_SSM_TR_SM1 
 ****************************************************************/
extern int _48_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__48_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__48_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__48_SSM_TR_SM1_allow_double_conversion();
extern int _48_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__48_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__48_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__48_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__48_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_Level_NTC_and_Mode_SN 
 ****************************************************************/
extern int SSM_ST_Level_NTC_and_Mode_SN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_Level_NTC_and_Mode_SN_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Level_NTC_and_Mode_SN(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Level_NTC_and_Mode_SN_allow_double_conversion();
extern int SSM_ST_Level_NTC_and_Mode_SN_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_Level_NTC_and_Mode_SN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_Level_NTC_and_Mode_SN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_Level_NTC_and_Mode_SN_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_Level_NTC_and_Mode_SN_Utils;

/****************************************************************
 ** SSM_TR_Level_NTC_and_Mode_SN 
 ****************************************************************/
extern int SSM_TR_Level_NTC_and_Mode_SN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_Level_NTC_and_Mode_SN_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Level_NTC_and_Mode_SN(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Level_NTC_and_Mode_SN_allow_double_conversion();
extern int SSM_TR_Level_NTC_and_Mode_SN_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_Level_NTC_and_Mode_SN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_Level_NTC_and_Mode_SN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_Level_NTC_and_Mode_SN_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_Level_NTC_and_Mode_SN_Utils;

/****************************************************************
 ** _37_SSM_ST_SM1 
 ****************************************************************/
extern int _37_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__37_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__37_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__37_SSM_ST_SM1_allow_double_conversion();
extern int _37_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__37_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__37_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__37_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__37_SSM_ST_SM1_Utils;

/****************************************************************
 ** _40_SSM_TR_SM1 
 ****************************************************************/
extern int _40_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__40_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__40_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__40_SSM_TR_SM1_allow_double_conversion();
extern int _40_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__40_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__40_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__40_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__40_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_ST_CONTROLLER_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CONTROLLER_SM_allow_double_conversion();
extern int SSM_ST_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_CONTROLLER_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_CONTROLLER_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_TR_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_TR_CONTROLLER_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CONTROLLER_SM_allow_double_conversion();
extern int SSM_TR_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_CONTROLLER_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_CONTROLLER_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED 
 ****************************************************************/
extern int SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_allow_double_conversion();
extern int SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_Utils;

/****************************************************************
 ** SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED 
 ****************************************************************/
extern int SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_allow_double_conversion();
extern int SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SESSION_ESTABLISHED_SM_CONTROLLER_SM_SESSION_ESTABLISHED_Utils;

/****************************************************************
 ** SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC 
 ****************************************************************/
extern int SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_string(const char *str, char **endptr);
extern int string_to_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_allow_double_conversion();
extern int SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_Utils;

/****************************************************************
 ** SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC 
 ****************************************************************/
extern int SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_string(const char *str, char **endptr);
extern int string_to_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_allow_double_conversion();
extern int SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_PROC_Utils;

/****************************************************************
 ** SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M 
 ****************************************************************/
extern int SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_allow_double_conversion();
extern int SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_Utils;

/****************************************************************
 ** SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M 
 ****************************************************************/
extern int SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_allow_double_conversion();
extern int SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_CONTROLLER_SM_SESSION_ESTABLISHED_SESSION_ESTABLISHED_SM_SEND_M_Utils;

/****************************************************************
 ** SSM_ST_modeInterplay 
 ****************************************************************/
extern int SSM_ST_modeInterplay_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_modeInterplay_allow_double_conversion();
extern int SSM_ST_modeInterplay_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_modeInterplay_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_modeInterplay_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_modeInterplay 
 ****************************************************************/
extern int SSM_TR_modeInterplay_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_modeInterplay_allow_double_conversion();
extern int SSM_TR_modeInterplay_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_modeInterplay_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_modeInterplay_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_CSM_modeInterplay_CSM 
 ****************************************************************/
extern int SSM_ST_CSM_modeInterplay_CSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_CSM_modeInterplay_CSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CSM_modeInterplay_CSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CSM_modeInterplay_CSM_allow_double_conversion();
extern int SSM_ST_CSM_modeInterplay_CSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_CSM_modeInterplay_CSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_CSM_modeInterplay_CSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_CSM_modeInterplay_CSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_CSM_modeInterplay_CSM_Utils;

/****************************************************************
 ** SSM_TR_CSM_modeInterplay_CSM 
 ****************************************************************/
extern int SSM_TR_CSM_modeInterplay_CSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_CSM_modeInterplay_CSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CSM_modeInterplay_CSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CSM_modeInterplay_CSM_allow_double_conversion();
extern int SSM_TR_CSM_modeInterplay_CSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_CSM_modeInterplay_CSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_CSM_modeInterplay_CSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_CSM_modeInterplay_CSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_CSM_modeInterplay_CSM_Utils;

/****************************************************************
 ** SSM_ST_SM4_modeInterplay_TSM 
 ****************************************************************/
extern int SSM_ST_SM4_modeInterplay_TSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM4_modeInterplay_TSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM4_modeInterplay_TSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM4_modeInterplay_TSM_allow_double_conversion();
extern int SSM_ST_SM4_modeInterplay_TSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM4_modeInterplay_TSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM4_modeInterplay_TSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM4_modeInterplay_TSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM4_modeInterplay_TSM_Utils;

/****************************************************************
 ** SSM_TR_SM4_modeInterplay_TSM 
 ****************************************************************/
extern int SSM_TR_SM4_modeInterplay_TSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM4_modeInterplay_TSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM4_modeInterplay_TSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM4_modeInterplay_TSM_allow_double_conversion();
extern int SSM_TR_SM4_modeInterplay_TSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM4_modeInterplay_TSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM4_modeInterplay_TSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM4_modeInterplay_TSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM4_modeInterplay_TSM_Utils;

/****************************************************************
 ** SSM_ST_RSM_modeInterplay_RSM 
 ****************************************************************/
extern int SSM_ST_RSM_modeInterplay_RSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_RSM_modeInterplay_RSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_RSM_modeInterplay_RSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_RSM_modeInterplay_RSM_allow_double_conversion();
extern int SSM_ST_RSM_modeInterplay_RSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_RSM_modeInterplay_RSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_RSM_modeInterplay_RSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_RSM_modeInterplay_RSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_RSM_modeInterplay_RSM_Utils;

/****************************************************************
 ** SSM_TR_RSM_modeInterplay_RSM 
 ****************************************************************/
extern int SSM_TR_RSM_modeInterplay_RSM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_RSM_modeInterplay_RSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_RSM_modeInterplay_RSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_RSM_modeInterplay_RSM_allow_double_conversion();
extern int SSM_TR_RSM_modeInterplay_RSM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_RSM_modeInterplay_RSM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_RSM_modeInterplay_RSM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_RSM_modeInterplay_RSM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_RSM_modeInterplay_RSM_Utils;

/****************************************************************
 ** SSM_ST_repeat_SM 
 ****************************************************************/
extern int SSM_ST_repeat_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_repeat_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_repeat_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_repeat_SM_allow_double_conversion();
extern int SSM_ST_repeat_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_repeat_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_repeat_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_repeat_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_repeat_SM_Utils;

/****************************************************************
 ** SSM_TR_repeat_SM 
 ****************************************************************/
extern int SSM_TR_repeat_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_repeat_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_repeat_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_repeat_SM_allow_double_conversion();
extern int SSM_TR_repeat_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_repeat_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_repeat_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_repeat_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_repeat_SM_Utils;

/****************************************************************
 ** SSM_ST_Register_SM 
 ****************************************************************/
extern int SSM_ST_Register_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_Register_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Register_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Register_SM_allow_double_conversion();
extern int SSM_ST_Register_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_Register_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_Register_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_Register_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_Register_SM_Utils;

/****************************************************************
 ** SSM_TR_Register_SM 
 ****************************************************************/
extern int SSM_TR_Register_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_Register_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Register_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Register_SM_allow_double_conversion();
extern int SSM_TR_Register_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_Register_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_Register_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_Register_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_Register_SM_Utils;

/****************************************************************
 ** SSM_ST_Session_SM 
 ****************************************************************/
extern int SSM_ST_Session_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_Session_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Session_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Session_SM_allow_double_conversion();
extern int SSM_ST_Session_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_Session_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_Session_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_Session_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_Session_SM_Utils;

/****************************************************************
 ** SSM_TR_Session_SM 
 ****************************************************************/
extern int SSM_TR_Session_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_Session_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Session_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Session_SM_allow_double_conversion();
extern int SSM_TR_Session_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_Session_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_Session_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_Session_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_Session_SM_Utils;

/****************************************************************
 ** SSM_ST_TrainExitedFromRBCArea_SM 
 ****************************************************************/
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_TrainExitedFromRBCArea_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TrainExitedFromRBCArea_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TrainExitedFromRBCArea_SM_allow_double_conversion();
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_TrainExitedFromRBCArea_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_TrainExitedFromRBCArea_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_TrainExitedFromRBCArea_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_TrainExitedFromRBCArea_SM_Utils;

/****************************************************************
 ** SSM_TR_TrainExitedFromRBCArea_SM 
 ****************************************************************/
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_TrainExitedFromRBCArea_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TrainExitedFromRBCArea_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TrainExitedFromRBCArea_SM_allow_double_conversion();
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_TrainExitedFromRBCArea_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_TrainExitedFromRBCArea_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_TrainExitedFromRBCArea_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_TrainExitedFromRBCArea_SM_Utils;

/****************************************************************
 ** SSM_ST_connectionStatus_SM 
 ****************************************************************/
extern int SSM_ST_connectionStatus_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_connectionStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_connectionStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_connectionStatus_SM_allow_double_conversion();
extern int SSM_ST_connectionStatus_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_connectionStatus_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_connectionStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_connectionStatus_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_connectionStatus_SM_Utils;

/****************************************************************
 ** SSM_TR_connectionStatus_SM 
 ****************************************************************/
extern int SSM_TR_connectionStatus_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_connectionStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_connectionStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_connectionStatus_SM_allow_double_conversion();
extern int SSM_TR_connectionStatus_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_connectionStatus_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_connectionStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_connectionStatus_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_connectionStatus_SM_Utils;

/****************************************************************
 ** SSM_ST_handOver_with_1_Session_SM_IfBlock1 
 ****************************************************************/
extern int SSM_ST_handOver_with_1_Session_SM_IfBlock1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_handOver_with_1_Session_SM_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_handOver_with_1_Session_SM_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_handOver_with_1_Session_SM_IfBlock1_allow_double_conversion();
extern int SSM_ST_handOver_with_1_Session_SM_IfBlock1_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_handOver_with_1_Session_SM_IfBlock1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_handOver_with_1_Session_SM_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_handOver_with_1_Session_SM_IfBlock1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_handOver_with_1_Session_SM_IfBlock1_Utils;

/****************************************************************
 ** SSM_TR_handOver_with_1_Session_SM_IfBlock1 
 ****************************************************************/
extern int SSM_TR_handOver_with_1_Session_SM_IfBlock1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_handOver_with_1_Session_SM_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_handOver_with_1_Session_SM_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_handOver_with_1_Session_SM_IfBlock1_allow_double_conversion();
extern int SSM_TR_handOver_with_1_Session_SM_IfBlock1_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_handOver_with_1_Session_SM_IfBlock1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_handOver_with_1_Session_SM_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_handOver_with_1_Session_SM_IfBlock1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_handOver_with_1_Session_SM_IfBlock1_Utils;

/****************************************************************
 ** SSM_ST_handOver_with_2_Sessions_SM_IfBlock1 
 ****************************************************************/
extern int SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_allow_double_conversion();
extern int SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_handOver_with_2_Sessions_SM_IfBlock1_Utils;

/****************************************************************
 ** SSM_TR_handOver_with_2_Sessions_SM_IfBlock1 
 ****************************************************************/
extern int SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_allow_double_conversion();
extern int SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_handOver_with_2_Sessions_SM_IfBlock1_Utils;

/****************************************************************
 ** _4_SSM_ST_SM1 
 ****************************************************************/
extern int _4_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__4_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__4_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__4_SSM_ST_SM1_allow_double_conversion();
extern int _4_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__4_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__4_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__4_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__4_SSM_ST_SM1_Utils;

/****************************************************************
 ** _6_SSM_TR_SM1 
 ****************************************************************/
extern int _6_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__6_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__6_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__6_SSM_TR_SM1_allow_double_conversion();
extern int _6_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__6_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__6_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__6_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__6_SSM_TR_SM1_Utils;

/****************************************************************
 ** _1_SSM_ST_SM1 
 ****************************************************************/
extern int _1_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__1_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__1_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__1_SSM_ST_SM1_allow_double_conversion();
extern int _1_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__1_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__1_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__1_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__1_SSM_ST_SM1_Utils;

/****************************************************************
 ** _3_SSM_TR_SM1 
 ****************************************************************/
extern int _3_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__3_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__3_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__3_SSM_TR_SM1_allow_double_conversion();
extern int _3_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__3_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__3_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__3_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__3_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_POSITION_REPORT_SM 
 ****************************************************************/
extern int SSM_ST_POSITION_REPORT_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_POSITION_REPORT_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_POSITION_REPORT_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_POSITION_REPORT_SM_allow_double_conversion();
extern int SSM_ST_POSITION_REPORT_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_POSITION_REPORT_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_POSITION_REPORT_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_POSITION_REPORT_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_POSITION_REPORT_SM_Utils;

/****************************************************************
 ** SSM_TR_POSITION_REPORT_SM 
 ****************************************************************/
extern int SSM_TR_POSITION_REPORT_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_POSITION_REPORT_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_POSITION_REPORT_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_POSITION_REPORT_SM_allow_double_conversion();
extern int SSM_TR_POSITION_REPORT_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_POSITION_REPORT_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_POSITION_REPORT_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_POSITION_REPORT_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_POSITION_REPORT_SM_Utils;

/****************************************************************
 ** SSM_ST_MOVEMENT_AUTHORITY_SM 
 ****************************************************************/
extern int SSM_ST_MOVEMENT_AUTHORITY_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_MOVEMENT_AUTHORITY_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_MOVEMENT_AUTHORITY_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_MOVEMENT_AUTHORITY_SM_allow_double_conversion();
extern int SSM_ST_MOVEMENT_AUTHORITY_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_MOVEMENT_AUTHORITY_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_MOVEMENT_AUTHORITY_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_MOVEMENT_AUTHORITY_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_MOVEMENT_AUTHORITY_SM_Utils;

/****************************************************************
 ** SSM_TR_MOVEMENT_AUTHORITY_SM 
 ****************************************************************/
extern int SSM_TR_MOVEMENT_AUTHORITY_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_MOVEMENT_AUTHORITY_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_MOVEMENT_AUTHORITY_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_MOVEMENT_AUTHORITY_SM_allow_double_conversion();
extern int SSM_TR_MOVEMENT_AUTHORITY_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_MOVEMENT_AUTHORITY_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_MOVEMENT_AUTHORITY_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_MOVEMENT_AUTHORITY_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_MOVEMENT_AUTHORITY_SM_Utils;

/****************************************************************
 ** SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_allow_double_conversion();
extern int SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_allow_double_conversion();
extern int SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_allow_double_conversion();
extern int SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_allow_double_conversion();
extern int SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM 
 ****************************************************************/
extern int SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_allow_double_conversion();
extern int SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM 
 ****************************************************************/
extern int SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_allow_double_conversion();
extern int SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_ST_GENERAL_MESSAGE_SM 
 ****************************************************************/
extern int SSM_ST_GENERAL_MESSAGE_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_GENERAL_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_GENERAL_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_GENERAL_MESSAGE_SM_allow_double_conversion();
extern int SSM_ST_GENERAL_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_GENERAL_MESSAGE_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_GENERAL_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_GENERAL_MESSAGE_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_GENERAL_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_TR_GENERAL_MESSAGE_SM 
 ****************************************************************/
extern int SSM_TR_GENERAL_MESSAGE_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_GENERAL_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_GENERAL_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_GENERAL_MESSAGE_SM_allow_double_conversion();
extern int SSM_TR_GENERAL_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_GENERAL_MESSAGE_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_GENERAL_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_GENERAL_MESSAGE_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_GENERAL_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_ST_TRIP_AND_POST_TRIP_SM 
 ****************************************************************/
extern int SSM_ST_TRIP_AND_POST_TRIP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_TRIP_AND_POST_TRIP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TRIP_AND_POST_TRIP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TRIP_AND_POST_TRIP_SM_allow_double_conversion();
extern int SSM_ST_TRIP_AND_POST_TRIP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_TRIP_AND_POST_TRIP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_TRIP_AND_POST_TRIP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_TRIP_AND_POST_TRIP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_TRIP_AND_POST_TRIP_SM_Utils;

/****************************************************************
 ** SSM_TR_TRIP_AND_POST_TRIP_SM 
 ****************************************************************/
extern int SSM_TR_TRIP_AND_POST_TRIP_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_TRIP_AND_POST_TRIP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TRIP_AND_POST_TRIP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TRIP_AND_POST_TRIP_SM_allow_double_conversion();
extern int SSM_TR_TRIP_AND_POST_TRIP_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_TRIP_AND_POST_TRIP_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_TRIP_AND_POST_TRIP_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_TRIP_AND_POST_TRIP_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_TRIP_AND_POST_TRIP_SM_Utils;

/****************************************************************
 ** SSM_ST_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_ST_SM_StartOfMissionProcedure_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_StartOfMissionProcedure_allow_double_conversion();
extern int SSM_ST_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_StartOfMissionProcedure_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_StartOfMissionProcedure_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_TR_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_TR_SM_StartOfMissionProcedure_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_StartOfMissionProcedure_allow_double_conversion();
extern int SSM_TR_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_StartOfMissionProcedure_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_StartOfMissionProcedure_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On 
 ****************************************************************/
extern int SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_allow_double_conversion();
extern int SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_Utils;

/****************************************************************
 ** SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On 
 ****************************************************************/
extern int SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_allow_double_conversion();
extern int SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_SoM_On_SM_StartOfMissionProcedure_Procedure_On_Utils;

/****************************************************************
 ** SSM_ST_SM_Train_Trip 
 ****************************************************************/
extern int SSM_ST_SM_Train_Trip_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Train_Trip_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Train_Trip(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Train_Trip_allow_double_conversion();
extern int SSM_ST_SM_Train_Trip_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Train_Trip_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Train_Trip(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Train_Trip_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Train_Trip_Utils;

/****************************************************************
 ** SSM_TR_SM_Train_Trip 
 ****************************************************************/
extern int SSM_TR_SM_Train_Trip_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Train_Trip_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Train_Trip(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Train_Trip_allow_double_conversion();
extern int SSM_TR_SM_Train_Trip_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Train_Trip_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Train_Trip(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Train_Trip_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Train_Trip_Utils;

/****************************************************************
 ** SSM_ST_SM_Train_Reversing 
 ****************************************************************/
extern int SSM_ST_SM_Train_Reversing_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Train_Reversing_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Train_Reversing(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Train_Reversing_allow_double_conversion();
extern int SSM_ST_SM_Train_Reversing_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Train_Reversing_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Train_Reversing(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Train_Reversing_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Train_Reversing_Utils;

/****************************************************************
 ** SSM_TR_SM_Train_Reversing 
 ****************************************************************/
extern int SSM_TR_SM_Train_Reversing_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Train_Reversing_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Train_Reversing(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Train_Reversing_allow_double_conversion();
extern int SSM_TR_SM_Train_Reversing_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Train_Reversing_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Train_Reversing(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Train_Reversing_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Train_Reversing_Utils;

/****************************************************************
 ** _33_SSM_ST_SM1 
 ****************************************************************/
extern int _33_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__33_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__33_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__33_SSM_ST_SM1_allow_double_conversion();
extern int _33_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__33_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__33_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__33_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__33_SSM_ST_SM1_Utils;

/****************************************************************
 ** _35_SSM_TR_SM1 
 ****************************************************************/
extern int _35_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__35_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__35_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__35_SSM_TR_SM1_allow_double_conversion();
extern int _35_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__35_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__35_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__35_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__35_SSM_TR_SM1_Utils;

/****************************************************************
 ** _30_SSM_ST_SM1 
 ****************************************************************/
extern int _30_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__30_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__30_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__30_SSM_ST_SM1_allow_double_conversion();
extern int _30_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__30_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__30_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__30_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__30_SSM_ST_SM1_Utils;

/****************************************************************
 ** _32_SSM_TR_SM1 
 ****************************************************************/
extern int _32_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__32_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__32_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__32_SSM_TR_SM1_allow_double_conversion();
extern int _32_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__32_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__32_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__32_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__32_SSM_TR_SM1_Utils;

/****************************************************************
 ** _27_SSM_ST_SM1 
 ****************************************************************/
extern int _27_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__27_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__27_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__27_SSM_ST_SM1_allow_double_conversion();
extern int _27_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__27_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__27_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__27_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__27_SSM_ST_SM1_Utils;

/****************************************************************
 ** _29_SSM_TR_SM1 
 ****************************************************************/
extern int _29_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__29_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__29_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__29_SSM_TR_SM1_allow_double_conversion();
extern int _29_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__29_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__29_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__29_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__29_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_TimerStatus_SM 
 ****************************************************************/
extern int SSM_ST_TimerStatus_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_TimerStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TimerStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TimerStatus_SM_allow_double_conversion();
extern int SSM_ST_TimerStatus_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_TimerStatus_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_TimerStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_TimerStatus_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_TimerStatus_SM_Utils;

/****************************************************************
 ** SSM_TR_TimerStatus_SM 
 ****************************************************************/
extern int SSM_TR_TimerStatus_SM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_TimerStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TimerStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TimerStatus_SM_allow_double_conversion();
extern int SSM_TR_TimerStatus_SM_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_TimerStatus_SM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_TimerStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_TimerStatus_SM_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_TimerStatus_SM_Utils;

/****************************************************************
 ** _11_SSM_ST_SM1 
 ****************************************************************/
extern int _11_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__11_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__11_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__11_SSM_ST_SM1_allow_double_conversion();
extern int _11_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__11_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__11_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__11_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__11_SSM_ST_SM1_Utils;

/****************************************************************
 ** _14_SSM_TR_SM1 
 ****************************************************************/
extern int _14_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__14_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__14_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__14_SSM_TR_SM1_allow_double_conversion();
extern int _14_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__14_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__14_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__14_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__14_SSM_TR_SM1_Utils;

/****************************************************************
 ** _7_SSM_ST_SM1 
 ****************************************************************/
extern int _7_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__7_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__7_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__7_SSM_ST_SM1_allow_double_conversion();
extern int _7_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__7_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__7_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__7_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__7_SSM_ST_SM1_Utils;

/****************************************************************
 ** _9_SSM_TR_SM1 
 ****************************************************************/
extern int _9_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__9_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__9_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__9_SSM_TR_SM1_allow_double_conversion();
extern int _9_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__9_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__9_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__9_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__9_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_ST_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_ST_SH_Initiated_By_Driver_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SH_Initiated_By_Driver_allow_double_conversion();
extern int SSM_ST_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SH_Initiated_By_Driver_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SH_Initiated_By_Driver_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_TR_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_TR_SH_Initiated_By_Driver_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SH_Initiated_By_Driver_allow_double_conversion();
extern int SSM_TR_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SH_Initiated_By_Driver_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SH_Initiated_By_Driver_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_ST_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Mode_Profile_By_Trackside_allow_double_conversion();
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Mode_Profile_By_Trackside_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Mode_Profile_By_Trackside_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_TR_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Mode_Profile_By_Trackside_allow_double_conversion();
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Mode_Profile_By_Trackside_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Mode_Profile_By_Trackside_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location 
 ****************************************************************/
extern int SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_allow_double_conversion();
extern int SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_Utils;

/****************************************************************
 ** SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location 
 ****************************************************************/
extern int SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_allow_double_conversion();
extern int SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Futher_Location_SM_Mode_Profile_By_Trackside_Futher_location_Utils;

/****************************************************************
 ** SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location 
 ****************************************************************/
extern int SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_allow_double_conversion();
extern int SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_Utils;

/****************************************************************
 ** SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location 
 ****************************************************************/
extern int SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_allow_double_conversion();
extern int SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Current_Location_SM_Mode_Profile_By_Trackside_Current_Location_Utils;

/****************************************************************
 ** SSM_ST_SM_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_SH_Initiated_By_Driver_allow_double_conversion();
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_SH_Initiated_By_Driver_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_SH_Initiated_By_Driver_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_TR_SM_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_SH_Initiated_By_Driver_allow_double_conversion();
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_SH_Initiated_By_Driver_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_SH_Initiated_By_Driver_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_ST_SM_Start_L1_L2_L3 
 ****************************************************************/
extern int SSM_ST_SM_Start_L1_L2_L3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_ST_SM_Start_L1_L2_L3_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Start_L1_L2_L3(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Start_L1_L2_L3_allow_double_conversion();
extern int SSM_ST_SM_Start_L1_L2_L3_to_double(const void *pValue, double *nValue);
extern int get_SSM_ST_SM_Start_L1_L2_L3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_ST_SM_Start_L1_L2_L3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_ST_SM_Start_L1_L2_L3_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_ST_SM_Start_L1_L2_L3_Utils;

/****************************************************************
 ** SSM_TR_SM_Start_L1_L2_L3 
 ****************************************************************/
extern int SSM_TR_SM_Start_L1_L2_L3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSM_TR_SM_Start_L1_L2_L3_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Start_L1_L2_L3(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Start_L1_L2_L3_allow_double_conversion();
extern int SSM_TR_SM_Start_L1_L2_L3_to_double(const void *pValue, double *nValue);
extern int get_SSM_TR_SM_Start_L1_L2_L3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSM_TR_SM_Start_L1_L2_L3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSM_TR_SM_Start_L1_L2_L3_default_value(void *pValue);
extern SimTypeUtils _Type_SSM_TR_SM_Start_L1_L2_L3_Utils;

/****************************************************************
 ** _22_SSM_ST_SM1 
 ****************************************************************/
extern int _22_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__22_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__22_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__22_SSM_ST_SM1_allow_double_conversion();
extern int _22_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__22_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__22_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__22_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__22_SSM_ST_SM1_Utils;

/****************************************************************
 ** _26_SSM_TR_SM1 
 ****************************************************************/
extern int _26_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__26_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__26_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__26_SSM_TR_SM1_allow_double_conversion();
extern int _26_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__26_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__26_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__26_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__26_SSM_TR_SM1_Utils;

/****************************************************************
 ** _16_SSM_ST_SM1 
 ****************************************************************/
extern int _16_SSM_ST_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__16_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__16_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__16_SSM_ST_SM1_allow_double_conversion();
extern int _16_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int get__16_SSM_ST_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__16_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__16_SSM_ST_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__16_SSM_ST_SM1_Utils;

/****************************************************************
 ** _19_SSM_TR_SM1 
 ****************************************************************/
extern int _19_SSM_TR_SM1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check__19_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__19_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__19_SSM_TR_SM1_allow_double_conversion();
extern int _19_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int get__19_SSM_TR_SM1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare__19_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set__19_SSM_TR_SM1_default_value(void *pValue);
extern SimTypeUtils _Type__19_SSM_TR_SM1_Utils;

/****************************************************************
 ** kcg_real 
 ****************************************************************/
extern int kcg_real_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_kcg_real_string(const char *str, char **endptr);
extern int string_to_kcg_real(const char *str, void *pValue, char **endptr);
extern int is_kcg_real_allow_double_conversion();
extern int kcg_real_to_double(const void *pValue, double *nValue);
extern int get_kcg_real_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_kcg_real(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_kcg_real_default_value(void *pValue);
extern SimTypeUtils _Type_kcg_real_Utils;

/****************************************************************
 ** kcg_bool 
 ****************************************************************/
extern int kcg_bool_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_kcg_bool_string(const char *str, char **endptr);
extern int string_to_kcg_bool(const char *str, void *pValue, char **endptr);
extern int is_kcg_bool_allow_double_conversion();
extern int kcg_bool_to_double(const void *pValue, double *nValue);
extern int get_kcg_bool_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_kcg_bool(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_kcg_bool_default_value(void *pValue);
extern SimTypeUtils _Type_kcg_bool_Utils;

/****************************************************************
 ** kcg_char 
 ****************************************************************/
extern int kcg_char_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_kcg_char_string(const char *str, char **endptr);
extern int string_to_kcg_char(const char *str, void *pValue, char **endptr);
extern int is_kcg_char_allow_double_conversion();
extern int kcg_char_to_double(const void *pValue, double *nValue);
extern int get_kcg_char_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_kcg_char(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_kcg_char_default_value(void *pValue);
extern SimTypeUtils _Type_kcg_char_Utils;

/****************************************************************
 ** kcg_int 
 ****************************************************************/
extern int kcg_int_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_kcg_int_string(const char *str, char **endptr);
extern int string_to_kcg_int(const char *str, void *pValue, char **endptr);
extern int is_kcg_int_allow_double_conversion();
extern int kcg_int_to_double(const void *pValue, double *nValue);
extern int get_kcg_int_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_kcg_int(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_kcg_int_default_value(void *pValue);
extern SimTypeUtils _Type_kcg_int_Utils;

/****************************************************************
 ** struct__127875 
 ****************************************************************/
extern int struct__127875_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127875_string(const char *str, char **endptr);
extern int string_to_struct__127875(const char *str, void *pValue, char **endptr);
extern int is_struct__127875_allow_double_conversion();
extern int struct__127875_to_double(const void *pValue, double *nValue);
extern int get_struct__127875_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127875(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127875_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127875_Utils;

/****************************************************************
 ** struct__127882 
 ****************************************************************/
extern int struct__127882_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127882_string(const char *str, char **endptr);
extern int string_to_struct__127882(const char *str, void *pValue, char **endptr);
extern int is_struct__127882_allow_double_conversion();
extern int struct__127882_to_double(const void *pValue, double *nValue);
extern int get_struct__127882_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127882(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127882_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127882_Utils;

/****************************************************************
 ** array__127887 
 ****************************************************************/
extern int array__127887_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__127887_string(const char *str, char **endptr);
extern int string_to_array__127887(const char *str, void *pValue, char **endptr);
extern int is_array__127887_allow_double_conversion();
extern int array__127887_to_double(const void *pValue, double *nValue);
extern int get_array__127887_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__127887(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__127887_default_value(void *pValue);
extern SimTypeUtils _Type_array__127887_Utils;

/****************************************************************
 ** struct__127890 
 ****************************************************************/
extern int struct__127890_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127890_string(const char *str, char **endptr);
extern int string_to_struct__127890(const char *str, void *pValue, char **endptr);
extern int is_struct__127890_allow_double_conversion();
extern int struct__127890_to_double(const void *pValue, double *nValue);
extern int get_struct__127890_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127890(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127890_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127890_Utils;

/****************************************************************
 ** struct__127895 
 ****************************************************************/
extern int struct__127895_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127895_string(const char *str, char **endptr);
extern int string_to_struct__127895(const char *str, void *pValue, char **endptr);
extern int is_struct__127895_allow_double_conversion();
extern int struct__127895_to_double(const void *pValue, double *nValue);
extern int get_struct__127895_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127895(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127895_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127895_Utils;

/****************************************************************
 ** struct__127902 
 ****************************************************************/
extern int struct__127902_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127902_string(const char *str, char **endptr);
extern int string_to_struct__127902(const char *str, void *pValue, char **endptr);
extern int is_struct__127902_allow_double_conversion();
extern int struct__127902_to_double(const void *pValue, double *nValue);
extern int get_struct__127902_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127902(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127902_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127902_Utils;

/****************************************************************
 ** struct__127920 
 ****************************************************************/
extern int struct__127920_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127920_string(const char *str, char **endptr);
extern int string_to_struct__127920(const char *str, void *pValue, char **endptr);
extern int is_struct__127920_allow_double_conversion();
extern int struct__127920_to_double(const void *pValue, double *nValue);
extern int get_struct__127920_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127920(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127920_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127920_Utils;

/****************************************************************
 ** struct__127932 
 ****************************************************************/
extern int struct__127932_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127932_string(const char *str, char **endptr);
extern int string_to_struct__127932(const char *str, void *pValue, char **endptr);
extern int is_struct__127932_allow_double_conversion();
extern int struct__127932_to_double(const void *pValue, double *nValue);
extern int get_struct__127932_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127932(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127932_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127932_Utils;

/****************************************************************
 ** struct__127939 
 ****************************************************************/
extern int struct__127939_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127939_string(const char *str, char **endptr);
extern int string_to_struct__127939(const char *str, void *pValue, char **endptr);
extern int is_struct__127939_allow_double_conversion();
extern int struct__127939_to_double(const void *pValue, double *nValue);
extern int get_struct__127939_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127939(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127939_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127939_Utils;

/****************************************************************
 ** struct__127947 
 ****************************************************************/
extern int struct__127947_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127947_string(const char *str, char **endptr);
extern int string_to_struct__127947(const char *str, void *pValue, char **endptr);
extern int is_struct__127947_allow_double_conversion();
extern int struct__127947_to_double(const void *pValue, double *nValue);
extern int get_struct__127947_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127947(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127947_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127947_Utils;

/****************************************************************
 ** struct__127960 
 ****************************************************************/
extern int struct__127960_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127960_string(const char *str, char **endptr);
extern int string_to_struct__127960(const char *str, void *pValue, char **endptr);
extern int is_struct__127960_allow_double_conversion();
extern int struct__127960_to_double(const void *pValue, double *nValue);
extern int get_struct__127960_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127960(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127960_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127960_Utils;

/****************************************************************
 ** struct__127967 
 ****************************************************************/
extern int struct__127967_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127967_string(const char *str, char **endptr);
extern int string_to_struct__127967(const char *str, void *pValue, char **endptr);
extern int is_struct__127967_allow_double_conversion();
extern int struct__127967_to_double(const void *pValue, double *nValue);
extern int get_struct__127967_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127967(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127967_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127967_Utils;

/****************************************************************
 ** struct__127973 
 ****************************************************************/
extern int struct__127973_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127973_string(const char *str, char **endptr);
extern int string_to_struct__127973(const char *str, void *pValue, char **endptr);
extern int is_struct__127973_allow_double_conversion();
extern int struct__127973_to_double(const void *pValue, double *nValue);
extern int get_struct__127973_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127973(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127973_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127973_Utils;

/****************************************************************
 ** struct__127983 
 ****************************************************************/
extern int struct__127983_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127983_string(const char *str, char **endptr);
extern int string_to_struct__127983(const char *str, void *pValue, char **endptr);
extern int is_struct__127983_allow_double_conversion();
extern int struct__127983_to_double(const void *pValue, double *nValue);
extern int get_struct__127983_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127983(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127983_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127983_Utils;

/****************************************************************
 ** struct__127989 
 ****************************************************************/
extern int struct__127989_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127989_string(const char *str, char **endptr);
extern int string_to_struct__127989(const char *str, void *pValue, char **endptr);
extern int is_struct__127989_allow_double_conversion();
extern int struct__127989_to_double(const void *pValue, double *nValue);
extern int get_struct__127989_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127989(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127989_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127989_Utils;

/****************************************************************
 ** struct__127994 
 ****************************************************************/
extern int struct__127994_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__127994_string(const char *str, char **endptr);
extern int string_to_struct__127994(const char *str, void *pValue, char **endptr);
extern int is_struct__127994_allow_double_conversion();
extern int struct__127994_to_double(const void *pValue, double *nValue);
extern int get_struct__127994_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__127994(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__127994_default_value(void *pValue);
extern SimTypeUtils _Type_struct__127994_Utils;

/****************************************************************
 ** array_int_500 
 ****************************************************************/
extern int array_int_500_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_500_string(const char *str, char **endptr);
extern int string_to_array_int_500(const char *str, void *pValue, char **endptr);
extern int is_array_int_500_allow_double_conversion();
extern int array_int_500_to_double(const void *pValue, double *nValue);
extern int get_array_int_500_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_500(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_500_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_500_Utils;

/****************************************************************
 ** struct__128005 
 ****************************************************************/
extern int struct__128005_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128005_string(const char *str, char **endptr);
extern int string_to_struct__128005(const char *str, void *pValue, char **endptr);
extern int is_struct__128005_allow_double_conversion();
extern int struct__128005_to_double(const void *pValue, double *nValue);
extern int get_struct__128005_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128005(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128005_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128005_Utils;

/****************************************************************
 ** array__128013 
 ****************************************************************/
extern int array__128013_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128013_string(const char *str, char **endptr);
extern int string_to_array__128013(const char *str, void *pValue, char **endptr);
extern int is_array__128013_allow_double_conversion();
extern int array__128013_to_double(const void *pValue, double *nValue);
extern int get_array__128013_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128013(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128013_default_value(void *pValue);
extern SimTypeUtils _Type_array__128013_Utils;

/****************************************************************
 ** struct__128016 
 ****************************************************************/
extern int struct__128016_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128016_string(const char *str, char **endptr);
extern int string_to_struct__128016(const char *str, void *pValue, char **endptr);
extern int is_struct__128016_allow_double_conversion();
extern int struct__128016_to_double(const void *pValue, double *nValue);
extern int get_struct__128016_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128016(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128016_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128016_Utils;

/****************************************************************
 ** struct__128021 
 ****************************************************************/
extern int struct__128021_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128021_string(const char *str, char **endptr);
extern int string_to_struct__128021(const char *str, void *pValue, char **endptr);
extern int is_struct__128021_allow_double_conversion();
extern int struct__128021_to_double(const void *pValue, double *nValue);
extern int get_struct__128021_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128021(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128021_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128021_Utils;

/****************************************************************
 ** struct__128030 
 ****************************************************************/
extern int struct__128030_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128030_string(const char *str, char **endptr);
extern int string_to_struct__128030(const char *str, void *pValue, char **endptr);
extern int is_struct__128030_allow_double_conversion();
extern int struct__128030_to_double(const void *pValue, double *nValue);
extern int get_struct__128030_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128030(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128030_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128030_Utils;

/****************************************************************
 ** struct__128043 
 ****************************************************************/
extern int struct__128043_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128043_string(const char *str, char **endptr);
extern int string_to_struct__128043(const char *str, void *pValue, char **endptr);
extern int is_struct__128043_allow_double_conversion();
extern int struct__128043_to_double(const void *pValue, double *nValue);
extern int get_struct__128043_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128043(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128043_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128043_Utils;

/****************************************************************
 ** struct__128057 
 ****************************************************************/
extern int struct__128057_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128057_string(const char *str, char **endptr);
extern int string_to_struct__128057(const char *str, void *pValue, char **endptr);
extern int is_struct__128057_allow_double_conversion();
extern int struct__128057_to_double(const void *pValue, double *nValue);
extern int get_struct__128057_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128057(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128057_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128057_Utils;

/****************************************************************
 ** struct__128062 
 ****************************************************************/
extern int struct__128062_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128062_string(const char *str, char **endptr);
extern int string_to_struct__128062(const char *str, void *pValue, char **endptr);
extern int is_struct__128062_allow_double_conversion();
extern int struct__128062_to_double(const void *pValue, double *nValue);
extern int get_struct__128062_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128062(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128062_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128062_Utils;

/****************************************************************
 ** struct__128068 
 ****************************************************************/
extern int struct__128068_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128068_string(const char *str, char **endptr);
extern int string_to_struct__128068(const char *str, void *pValue, char **endptr);
extern int is_struct__128068_allow_double_conversion();
extern int struct__128068_to_double(const void *pValue, double *nValue);
extern int get_struct__128068_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128068(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128068_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128068_Utils;

/****************************************************************
 ** struct__128074 
 ****************************************************************/
extern int struct__128074_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128074_string(const char *str, char **endptr);
extern int string_to_struct__128074(const char *str, void *pValue, char **endptr);
extern int is_struct__128074_allow_double_conversion();
extern int struct__128074_to_double(const void *pValue, double *nValue);
extern int get_struct__128074_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128074(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128074_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128074_Utils;

/****************************************************************
 ** struct__128079 
 ****************************************************************/
extern int struct__128079_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128079_string(const char *str, char **endptr);
extern int string_to_struct__128079(const char *str, void *pValue, char **endptr);
extern int is_struct__128079_allow_double_conversion();
extern int struct__128079_to_double(const void *pValue, double *nValue);
extern int get_struct__128079_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128079(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128079_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128079_Utils;

/****************************************************************
 ** struct__128088 
 ****************************************************************/
extern int struct__128088_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128088_string(const char *str, char **endptr);
extern int string_to_struct__128088(const char *str, void *pValue, char **endptr);
extern int is_struct__128088_allow_double_conversion();
extern int struct__128088_to_double(const void *pValue, double *nValue);
extern int get_struct__128088_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128088(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128088_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128088_Utils;

/****************************************************************
 ** struct__128099 
 ****************************************************************/
extern int struct__128099_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128099_string(const char *str, char **endptr);
extern int string_to_struct__128099(const char *str, void *pValue, char **endptr);
extern int is_struct__128099_allow_double_conversion();
extern int struct__128099_to_double(const void *pValue, double *nValue);
extern int get_struct__128099_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128099(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128099_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128099_Utils;

/****************************************************************
 ** array__128104 
 ****************************************************************/
extern int array__128104_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128104_string(const char *str, char **endptr);
extern int string_to_array__128104(const char *str, void *pValue, char **endptr);
extern int is_array__128104_allow_double_conversion();
extern int array__128104_to_double(const void *pValue, double *nValue);
extern int get_array__128104_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128104(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128104_default_value(void *pValue);
extern SimTypeUtils _Type_array__128104_Utils;

/****************************************************************
 ** array_int_5 
 ****************************************************************/
extern int array_int_5_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_5_string(const char *str, char **endptr);
extern int string_to_array_int_5(const char *str, void *pValue, char **endptr);
extern int is_array_int_5_allow_double_conversion();
extern int array_int_5_to_double(const void *pValue, double *nValue);
extern int get_array_int_5_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_5(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_5_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_5_Utils;

/****************************************************************
 ** struct__128110 
 ****************************************************************/
extern int struct__128110_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128110_string(const char *str, char **endptr);
extern int string_to_struct__128110(const char *str, void *pValue, char **endptr);
extern int is_struct__128110_allow_double_conversion();
extern int struct__128110_to_double(const void *pValue, double *nValue);
extern int get_struct__128110_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128110(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128110_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128110_Utils;

/****************************************************************
 ** struct__128128 
 ****************************************************************/
extern int struct__128128_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128128_string(const char *str, char **endptr);
extern int string_to_struct__128128(const char *str, void *pValue, char **endptr);
extern int is_struct__128128_allow_double_conversion();
extern int struct__128128_to_double(const void *pValue, double *nValue);
extern int get_struct__128128_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128128(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128128_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128128_Utils;

/****************************************************************
 ** struct__128137 
 ****************************************************************/
extern int struct__128137_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128137_string(const char *str, char **endptr);
extern int string_to_struct__128137(const char *str, void *pValue, char **endptr);
extern int is_struct__128137_allow_double_conversion();
extern int struct__128137_to_double(const void *pValue, double *nValue);
extern int get_struct__128137_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128137(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128137_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128137_Utils;

/****************************************************************
 ** array_int_311 
 ****************************************************************/
extern int array_int_311_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_311_string(const char *str, char **endptr);
extern int string_to_array_int_311(const char *str, void *pValue, char **endptr);
extern int is_array_int_311_allow_double_conversion();
extern int array_int_311_to_double(const void *pValue, double *nValue);
extern int get_array_int_311_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_311(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_311_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_311_Utils;

/****************************************************************
 ** array_int_999 
 ****************************************************************/
extern int array_int_999_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_999_string(const char *str, char **endptr);
extern int string_to_array_int_999(const char *str, void *pValue, char **endptr);
extern int is_array_int_999_allow_double_conversion();
extern int array_int_999_to_double(const void *pValue, double *nValue);
extern int get_array_int_999_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_999(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_999_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_999_Utils;

/****************************************************************
 ** struct__128148 
 ****************************************************************/
extern int struct__128148_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128148_string(const char *str, char **endptr);
extern int string_to_struct__128148(const char *str, void *pValue, char **endptr);
extern int is_struct__128148_allow_double_conversion();
extern int struct__128148_to_double(const void *pValue, double *nValue);
extern int get_struct__128148_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128148(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128148_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128148_Utils;

/****************************************************************
 ** struct__128153 
 ****************************************************************/
extern int struct__128153_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128153_string(const char *str, char **endptr);
extern int string_to_struct__128153(const char *str, void *pValue, char **endptr);
extern int is_struct__128153_allow_double_conversion();
extern int struct__128153_to_double(const void *pValue, double *nValue);
extern int get_struct__128153_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128153(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128153_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128153_Utils;

/****************************************************************
 ** struct__128159 
 ****************************************************************/
extern int struct__128159_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128159_string(const char *str, char **endptr);
extern int string_to_struct__128159(const char *str, void *pValue, char **endptr);
extern int is_struct__128159_allow_double_conversion();
extern int struct__128159_to_double(const void *pValue, double *nValue);
extern int get_struct__128159_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128159(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128159_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128159_Utils;

/****************************************************************
 ** struct__128164 
 ****************************************************************/
extern int struct__128164_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128164_string(const char *str, char **endptr);
extern int string_to_struct__128164(const char *str, void *pValue, char **endptr);
extern int is_struct__128164_allow_double_conversion();
extern int struct__128164_to_double(const void *pValue, double *nValue);
extern int get_struct__128164_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128164(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128164_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128164_Utils;

/****************************************************************
 ** struct__128169 
 ****************************************************************/
extern int struct__128169_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128169_string(const char *str, char **endptr);
extern int string_to_struct__128169(const char *str, void *pValue, char **endptr);
extern int is_struct__128169_allow_double_conversion();
extern int struct__128169_to_double(const void *pValue, double *nValue);
extern int get_struct__128169_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128169(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128169_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128169_Utils;

/****************************************************************
 ** struct__128175 
 ****************************************************************/
extern int struct__128175_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128175_string(const char *str, char **endptr);
extern int string_to_struct__128175(const char *str, void *pValue, char **endptr);
extern int is_struct__128175_allow_double_conversion();
extern int struct__128175_to_double(const void *pValue, double *nValue);
extern int get_struct__128175_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128175(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128175_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128175_Utils;

/****************************************************************
 ** struct__128183 
 ****************************************************************/
extern int struct__128183_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128183_string(const char *str, char **endptr);
extern int string_to_struct__128183(const char *str, void *pValue, char **endptr);
extern int is_struct__128183_allow_double_conversion();
extern int struct__128183_to_double(const void *pValue, double *nValue);
extern int get_struct__128183_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128183(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128183_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128183_Utils;

/****************************************************************
 ** struct__128190 
 ****************************************************************/
extern int struct__128190_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128190_string(const char *str, char **endptr);
extern int string_to_struct__128190(const char *str, void *pValue, char **endptr);
extern int is_struct__128190_allow_double_conversion();
extern int struct__128190_to_double(const void *pValue, double *nValue);
extern int get_struct__128190_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128190(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128190_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128190_Utils;

/****************************************************************
 ** struct__128196 
 ****************************************************************/
extern int struct__128196_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128196_string(const char *str, char **endptr);
extern int string_to_struct__128196(const char *str, void *pValue, char **endptr);
extern int is_struct__128196_allow_double_conversion();
extern int struct__128196_to_double(const void *pValue, double *nValue);
extern int get_struct__128196_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128196(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128196_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128196_Utils;

/****************************************************************
 ** struct__128201 
 ****************************************************************/
extern int struct__128201_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128201_string(const char *str, char **endptr);
extern int string_to_struct__128201(const char *str, void *pValue, char **endptr);
extern int is_struct__128201_allow_double_conversion();
extern int struct__128201_to_double(const void *pValue, double *nValue);
extern int get_struct__128201_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128201(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128201_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128201_Utils;

/****************************************************************
 ** struct__128211 
 ****************************************************************/
extern int struct__128211_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128211_string(const char *str, char **endptr);
extern int string_to_struct__128211(const char *str, void *pValue, char **endptr);
extern int is_struct__128211_allow_double_conversion();
extern int struct__128211_to_double(const void *pValue, double *nValue);
extern int get_struct__128211_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128211(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128211_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128211_Utils;

/****************************************************************
 ** struct__128216 
 ****************************************************************/
extern int struct__128216_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128216_string(const char *str, char **endptr);
extern int string_to_struct__128216(const char *str, void *pValue, char **endptr);
extern int is_struct__128216_allow_double_conversion();
extern int struct__128216_to_double(const void *pValue, double *nValue);
extern int get_struct__128216_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128216(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128216_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128216_Utils;

/****************************************************************
 ** array_int_50 
 ****************************************************************/
extern int array_int_50_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_50_string(const char *str, char **endptr);
extern int string_to_array_int_50(const char *str, void *pValue, char **endptr);
extern int is_array_int_50_allow_double_conversion();
extern int array_int_50_to_double(const void *pValue, double *nValue);
extern int get_array_int_50_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_50(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_50_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_50_Utils;

/****************************************************************
 ** struct__128225 
 ****************************************************************/
extern int struct__128225_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128225_string(const char *str, char **endptr);
extern int string_to_struct__128225(const char *str, void *pValue, char **endptr);
extern int is_struct__128225_allow_double_conversion();
extern int struct__128225_to_double(const void *pValue, double *nValue);
extern int get_struct__128225_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128225(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128225_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128225_Utils;

/****************************************************************
 ** struct__128236 
 ****************************************************************/
extern int struct__128236_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128236_string(const char *str, char **endptr);
extern int string_to_struct__128236(const char *str, void *pValue, char **endptr);
extern int is_struct__128236_allow_double_conversion();
extern int struct__128236_to_double(const void *pValue, double *nValue);
extern int get_struct__128236_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128236(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128236_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128236_Utils;

/****************************************************************
 ** struct__128241 
 ****************************************************************/
extern int struct__128241_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128241_string(const char *str, char **endptr);
extern int string_to_struct__128241(const char *str, void *pValue, char **endptr);
extern int is_struct__128241_allow_double_conversion();
extern int struct__128241_to_double(const void *pValue, double *nValue);
extern int get_struct__128241_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128241(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128241_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128241_Utils;

/****************************************************************
 ** struct__128259 
 ****************************************************************/
extern int struct__128259_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128259_string(const char *str, char **endptr);
extern int string_to_struct__128259(const char *str, void *pValue, char **endptr);
extern int is_struct__128259_allow_double_conversion();
extern int struct__128259_to_double(const void *pValue, double *nValue);
extern int get_struct__128259_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128259(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128259_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128259_Utils;

/****************************************************************
 ** struct__128264 
 ****************************************************************/
extern int struct__128264_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128264_string(const char *str, char **endptr);
extern int string_to_struct__128264(const char *str, void *pValue, char **endptr);
extern int is_struct__128264_allow_double_conversion();
extern int struct__128264_to_double(const void *pValue, double *nValue);
extern int get_struct__128264_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128264(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128264_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128264_Utils;

/****************************************************************
 ** array__128269 
 ****************************************************************/
extern int array__128269_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128269_string(const char *str, char **endptr);
extern int string_to_array__128269(const char *str, void *pValue, char **endptr);
extern int is_array__128269_allow_double_conversion();
extern int array__128269_to_double(const void *pValue, double *nValue);
extern int get_array__128269_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128269(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128269_default_value(void *pValue);
extern SimTypeUtils _Type_array__128269_Utils;

/****************************************************************
 ** struct__128272 
 ****************************************************************/
extern int struct__128272_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128272_string(const char *str, char **endptr);
extern int string_to_struct__128272(const char *str, void *pValue, char **endptr);
extern int is_struct__128272_allow_double_conversion();
extern int struct__128272_to_double(const void *pValue, double *nValue);
extern int get_struct__128272_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128272(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128272_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128272_Utils;

/****************************************************************
 ** struct__128276 
 ****************************************************************/
extern int struct__128276_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128276_string(const char *str, char **endptr);
extern int string_to_struct__128276(const char *str, void *pValue, char **endptr);
extern int is_struct__128276_allow_double_conversion();
extern int struct__128276_to_double(const void *pValue, double *nValue);
extern int get_struct__128276_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128276(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128276_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128276_Utils;

/****************************************************************
 ** struct__128285 
 ****************************************************************/
extern int struct__128285_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128285_string(const char *str, char **endptr);
extern int string_to_struct__128285(const char *str, void *pValue, char **endptr);
extern int is_struct__128285_allow_double_conversion();
extern int struct__128285_to_double(const void *pValue, double *nValue);
extern int get_struct__128285_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128285(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128285_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128285_Utils;

/****************************************************************
 ** array__128290 
 ****************************************************************/
extern int array__128290_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128290_string(const char *str, char **endptr);
extern int string_to_array__128290(const char *str, void *pValue, char **endptr);
extern int is_array__128290_allow_double_conversion();
extern int array__128290_to_double(const void *pValue, double *nValue);
extern int get_array__128290_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128290(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128290_default_value(void *pValue);
extern SimTypeUtils _Type_array__128290_Utils;

/****************************************************************
 ** struct__128293 
 ****************************************************************/
extern int struct__128293_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128293_string(const char *str, char **endptr);
extern int string_to_struct__128293(const char *str, void *pValue, char **endptr);
extern int is_struct__128293_allow_double_conversion();
extern int struct__128293_to_double(const void *pValue, double *nValue);
extern int get_struct__128293_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128293(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128293_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128293_Utils;

/****************************************************************
 ** struct__128303 
 ****************************************************************/
extern int struct__128303_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128303_string(const char *str, char **endptr);
extern int string_to_struct__128303(const char *str, void *pValue, char **endptr);
extern int is_struct__128303_allow_double_conversion();
extern int struct__128303_to_double(const void *pValue, double *nValue);
extern int get_struct__128303_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128303(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128303_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128303_Utils;

/****************************************************************
 ** struct__128310 
 ****************************************************************/
extern int struct__128310_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128310_string(const char *str, char **endptr);
extern int string_to_struct__128310(const char *str, void *pValue, char **endptr);
extern int is_struct__128310_allow_double_conversion();
extern int struct__128310_to_double(const void *pValue, double *nValue);
extern int get_struct__128310_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128310(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128310_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128310_Utils;

/****************************************************************
 ** struct__128320 
 ****************************************************************/
extern int struct__128320_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128320_string(const char *str, char **endptr);
extern int string_to_struct__128320(const char *str, void *pValue, char **endptr);
extern int is_struct__128320_allow_double_conversion();
extern int struct__128320_to_double(const void *pValue, double *nValue);
extern int get_struct__128320_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128320(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128320_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128320_Utils;

/****************************************************************
 ** struct__128327 
 ****************************************************************/
extern int struct__128327_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128327_string(const char *str, char **endptr);
extern int string_to_struct__128327(const char *str, void *pValue, char **endptr);
extern int is_struct__128327_allow_double_conversion();
extern int struct__128327_to_double(const void *pValue, double *nValue);
extern int get_struct__128327_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128327(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128327_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128327_Utils;

/****************************************************************
 ** array_int_15 
 ****************************************************************/
extern int array_int_15_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_15_string(const char *str, char **endptr);
extern int string_to_array_int_15(const char *str, void *pValue, char **endptr);
extern int is_array_int_15_allow_double_conversion();
extern int array_int_15_to_double(const void *pValue, double *nValue);
extern int get_array_int_15_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_15(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_15_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_15_Utils;

/****************************************************************
 ** struct__128348 
 ****************************************************************/
extern int struct__128348_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128348_string(const char *str, char **endptr);
extern int string_to_struct__128348(const char *str, void *pValue, char **endptr);
extern int is_struct__128348_allow_double_conversion();
extern int struct__128348_to_double(const void *pValue, double *nValue);
extern int get_struct__128348_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128348(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128348_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128348_Utils;

/****************************************************************
 ** array__128353 
 ****************************************************************/
extern int array__128353_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128353_string(const char *str, char **endptr);
extern int string_to_array__128353(const char *str, void *pValue, char **endptr);
extern int is_array__128353_allow_double_conversion();
extern int array__128353_to_double(const void *pValue, double *nValue);
extern int get_array__128353_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128353(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128353_default_value(void *pValue);
extern SimTypeUtils _Type_array__128353_Utils;

/****************************************************************
 ** struct__128356 
 ****************************************************************/
extern int struct__128356_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128356_string(const char *str, char **endptr);
extern int string_to_struct__128356(const char *str, void *pValue, char **endptr);
extern int is_struct__128356_allow_double_conversion();
extern int struct__128356_to_double(const void *pValue, double *nValue);
extern int get_struct__128356_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128356(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128356_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128356_Utils;

/****************************************************************
 ** struct__128374 
 ****************************************************************/
extern int struct__128374_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128374_string(const char *str, char **endptr);
extern int string_to_struct__128374(const char *str, void *pValue, char **endptr);
extern int is_struct__128374_allow_double_conversion();
extern int struct__128374_to_double(const void *pValue, double *nValue);
extern int get_struct__128374_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128374(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128374_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128374_Utils;

/****************************************************************
 ** struct__128379 
 ****************************************************************/
extern int struct__128379_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128379_string(const char *str, char **endptr);
extern int string_to_struct__128379(const char *str, void *pValue, char **endptr);
extern int is_struct__128379_allow_double_conversion();
extern int struct__128379_to_double(const void *pValue, double *nValue);
extern int get_struct__128379_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128379(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128379_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128379_Utils;

/****************************************************************
 ** array__128383 
 ****************************************************************/
extern int array__128383_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128383_string(const char *str, char **endptr);
extern int string_to_array__128383(const char *str, void *pValue, char **endptr);
extern int is_array__128383_allow_double_conversion();
extern int array__128383_to_double(const void *pValue, double *nValue);
extern int get_array__128383_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128383(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128383_default_value(void *pValue);
extern SimTypeUtils _Type_array__128383_Utils;

/****************************************************************
 ** struct__128386 
 ****************************************************************/
extern int struct__128386_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128386_string(const char *str, char **endptr);
extern int string_to_struct__128386(const char *str, void *pValue, char **endptr);
extern int is_struct__128386_allow_double_conversion();
extern int struct__128386_to_double(const void *pValue, double *nValue);
extern int get_struct__128386_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128386(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128386_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128386_Utils;

/****************************************************************
 ** struct__128395 
 ****************************************************************/
extern int struct__128395_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128395_string(const char *str, char **endptr);
extern int string_to_struct__128395(const char *str, void *pValue, char **endptr);
extern int is_struct__128395_allow_double_conversion();
extern int struct__128395_to_double(const void *pValue, double *nValue);
extern int get_struct__128395_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128395(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128395_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128395_Utils;

/****************************************************************
 ** struct__128407 
 ****************************************************************/
extern int struct__128407_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128407_string(const char *str, char **endptr);
extern int string_to_struct__128407(const char *str, void *pValue, char **endptr);
extern int is_struct__128407_allow_double_conversion();
extern int struct__128407_to_double(const void *pValue, double *nValue);
extern int get_struct__128407_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128407(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128407_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128407_Utils;

/****************************************************************
 ** struct__128423 
 ****************************************************************/
extern int struct__128423_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128423_string(const char *str, char **endptr);
extern int string_to_struct__128423(const char *str, void *pValue, char **endptr);
extern int is_struct__128423_allow_double_conversion();
extern int struct__128423_to_double(const void *pValue, double *nValue);
extern int get_struct__128423_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128423(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128423_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128423_Utils;

/****************************************************************
 ** struct__128428 
 ****************************************************************/
extern int struct__128428_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128428_string(const char *str, char **endptr);
extern int string_to_struct__128428(const char *str, void *pValue, char **endptr);
extern int is_struct__128428_allow_double_conversion();
extern int struct__128428_to_double(const void *pValue, double *nValue);
extern int get_struct__128428_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128428(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128428_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128428_Utils;

/****************************************************************
 ** struct__128434 
 ****************************************************************/
extern int struct__128434_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128434_string(const char *str, char **endptr);
extern int string_to_struct__128434(const char *str, void *pValue, char **endptr);
extern int is_struct__128434_allow_double_conversion();
extern int struct__128434_to_double(const void *pValue, double *nValue);
extern int get_struct__128434_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128434(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128434_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128434_Utils;

/****************************************************************
 ** struct__128454 
 ****************************************************************/
extern int struct__128454_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128454_string(const char *str, char **endptr);
extern int string_to_struct__128454(const char *str, void *pValue, char **endptr);
extern int is_struct__128454_allow_double_conversion();
extern int struct__128454_to_double(const void *pValue, double *nValue);
extern int get_struct__128454_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128454(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128454_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128454_Utils;

/****************************************************************
 ** struct__128459 
 ****************************************************************/
extern int struct__128459_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128459_string(const char *str, char **endptr);
extern int string_to_struct__128459(const char *str, void *pValue, char **endptr);
extern int is_struct__128459_allow_double_conversion();
extern int struct__128459_to_double(const void *pValue, double *nValue);
extern int get_struct__128459_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128459(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128459_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128459_Utils;

/****************************************************************
 ** struct__128478 
 ****************************************************************/
extern int struct__128478_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128478_string(const char *str, char **endptr);
extern int string_to_struct__128478(const char *str, void *pValue, char **endptr);
extern int is_struct__128478_allow_double_conversion();
extern int struct__128478_to_double(const void *pValue, double *nValue);
extern int get_struct__128478_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128478(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128478_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128478_Utils;

/****************************************************************
 ** struct__128483 
 ****************************************************************/
extern int struct__128483_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128483_string(const char *str, char **endptr);
extern int string_to_struct__128483(const char *str, void *pValue, char **endptr);
extern int is_struct__128483_allow_double_conversion();
extern int struct__128483_to_double(const void *pValue, double *nValue);
extern int get_struct__128483_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128483(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128483_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128483_Utils;

/****************************************************************
 ** struct__128488 
 ****************************************************************/
extern int struct__128488_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128488_string(const char *str, char **endptr);
extern int string_to_struct__128488(const char *str, void *pValue, char **endptr);
extern int is_struct__128488_allow_double_conversion();
extern int struct__128488_to_double(const void *pValue, double *nValue);
extern int get_struct__128488_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128488(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128488_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128488_Utils;

/****************************************************************
 ** struct__128493 
 ****************************************************************/
extern int struct__128493_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128493_string(const char *str, char **endptr);
extern int string_to_struct__128493(const char *str, void *pValue, char **endptr);
extern int is_struct__128493_allow_double_conversion();
extern int struct__128493_to_double(const void *pValue, double *nValue);
extern int get_struct__128493_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128493(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128493_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128493_Utils;

/****************************************************************
 ** struct__128503 
 ****************************************************************/
extern int struct__128503_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128503_string(const char *str, char **endptr);
extern int string_to_struct__128503(const char *str, void *pValue, char **endptr);
extern int is_struct__128503_allow_double_conversion();
extern int struct__128503_to_double(const void *pValue, double *nValue);
extern int get_struct__128503_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128503(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128503_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128503_Utils;

/****************************************************************
 ** struct__128509 
 ****************************************************************/
extern int struct__128509_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128509_string(const char *str, char **endptr);
extern int string_to_struct__128509(const char *str, void *pValue, char **endptr);
extern int is_struct__128509_allow_double_conversion();
extern int struct__128509_to_double(const void *pValue, double *nValue);
extern int get_struct__128509_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128509(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128509_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128509_Utils;

/****************************************************************
 ** struct__128527 
 ****************************************************************/
extern int struct__128527_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128527_string(const char *str, char **endptr);
extern int string_to_struct__128527(const char *str, void *pValue, char **endptr);
extern int is_struct__128527_allow_double_conversion();
extern int struct__128527_to_double(const void *pValue, double *nValue);
extern int get_struct__128527_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128527(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128527_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128527_Utils;

/****************************************************************
 ** struct__128534 
 ****************************************************************/
extern int struct__128534_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128534_string(const char *str, char **endptr);
extern int string_to_struct__128534(const char *str, void *pValue, char **endptr);
extern int is_struct__128534_allow_double_conversion();
extern int struct__128534_to_double(const void *pValue, double *nValue);
extern int get_struct__128534_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128534(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128534_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128534_Utils;

/****************************************************************
 ** struct__128541 
 ****************************************************************/
extern int struct__128541_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128541_string(const char *str, char **endptr);
extern int string_to_struct__128541(const char *str, void *pValue, char **endptr);
extern int is_struct__128541_allow_double_conversion();
extern int struct__128541_to_double(const void *pValue, double *nValue);
extern int get_struct__128541_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128541(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128541_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128541_Utils;

/****************************************************************
 ** struct__128548 
 ****************************************************************/
extern int struct__128548_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128548_string(const char *str, char **endptr);
extern int string_to_struct__128548(const char *str, void *pValue, char **endptr);
extern int is_struct__128548_allow_double_conversion();
extern int struct__128548_to_double(const void *pValue, double *nValue);
extern int get_struct__128548_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128548(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128548_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128548_Utils;

/****************************************************************
 ** struct__128556 
 ****************************************************************/
extern int struct__128556_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128556_string(const char *str, char **endptr);
extern int string_to_struct__128556(const char *str, void *pValue, char **endptr);
extern int is_struct__128556_allow_double_conversion();
extern int struct__128556_to_double(const void *pValue, double *nValue);
extern int get_struct__128556_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128556(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128556_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128556_Utils;

/****************************************************************
 ** struct__128577 
 ****************************************************************/
extern int struct__128577_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128577_string(const char *str, char **endptr);
extern int string_to_struct__128577(const char *str, void *pValue, char **endptr);
extern int is_struct__128577_allow_double_conversion();
extern int struct__128577_to_double(const void *pValue, double *nValue);
extern int get_struct__128577_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128577(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128577_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128577_Utils;

/****************************************************************
 ** array_int_3 
 ****************************************************************/
extern int array_int_3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_3_string(const char *str, char **endptr);
extern int string_to_array_int_3(const char *str, void *pValue, char **endptr);
extern int is_array_int_3_allow_double_conversion();
extern int array_int_3_to_double(const void *pValue, double *nValue);
extern int get_array_int_3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_3_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_3_Utils;

/****************************************************************
 ** array_int_8 
 ****************************************************************/
extern int array_int_8_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_8_string(const char *str, char **endptr);
extern int string_to_array_int_8(const char *str, void *pValue, char **endptr);
extern int is_array_int_8_allow_double_conversion();
extern int array_int_8_to_double(const void *pValue, double *nValue);
extern int get_array_int_8_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_8(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_8_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_8_Utils;

/****************************************************************
 ** array_int_11 
 ****************************************************************/
extern int array_int_11_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_11_string(const char *str, char **endptr);
extern int string_to_array_int_11(const char *str, void *pValue, char **endptr);
extern int is_array_int_11_allow_double_conversion();
extern int array_int_11_to_double(const void *pValue, double *nValue);
extern int get_array_int_11_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_11(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_11_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_11_Utils;

/****************************************************************
 ** array_int_25 
 ****************************************************************/
extern int array_int_25_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_25_string(const char *str, char **endptr);
extern int string_to_array_int_25(const char *str, void *pValue, char **endptr);
extern int is_array_int_25_allow_double_conversion();
extern int array_int_25_to_double(const void *pValue, double *nValue);
extern int get_array_int_25_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_25(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_25_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_25_Utils;

/****************************************************************
 ** array_int_17 
 ****************************************************************/
extern int array_int_17_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_17_string(const char *str, char **endptr);
extern int string_to_array_int_17(const char *str, void *pValue, char **endptr);
extern int is_array_int_17_allow_double_conversion();
extern int array_int_17_to_double(const void *pValue, double *nValue);
extern int get_array_int_17_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_17(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_17_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_17_Utils;

/****************************************************************
 ** struct__128612 
 ****************************************************************/
extern int struct__128612_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128612_string(const char *str, char **endptr);
extern int string_to_struct__128612(const char *str, void *pValue, char **endptr);
extern int is_struct__128612_allow_double_conversion();
extern int struct__128612_to_double(const void *pValue, double *nValue);
extern int get_struct__128612_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128612(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128612_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128612_Utils;

/****************************************************************
 ** array__128617 
 ****************************************************************/
extern int array__128617_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128617_string(const char *str, char **endptr);
extern int string_to_array__128617(const char *str, void *pValue, char **endptr);
extern int is_array__128617_allow_double_conversion();
extern int array__128617_to_double(const void *pValue, double *nValue);
extern int get_array__128617_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128617(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128617_default_value(void *pValue);
extern SimTypeUtils _Type_array__128617_Utils;

/****************************************************************
 ** struct__128620 
 ****************************************************************/
extern int struct__128620_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128620_string(const char *str, char **endptr);
extern int string_to_struct__128620(const char *str, void *pValue, char **endptr);
extern int is_struct__128620_allow_double_conversion();
extern int struct__128620_to_double(const void *pValue, double *nValue);
extern int get_struct__128620_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128620(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128620_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128620_Utils;

/****************************************************************
 ** array_int_64 
 ****************************************************************/
extern int array_int_64_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_64_string(const char *str, char **endptr);
extern int string_to_array_int_64(const char *str, void *pValue, char **endptr);
extern int is_array_int_64_allow_double_conversion();
extern int array_int_64_to_double(const void *pValue, double *nValue);
extern int get_array_int_64_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_64(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_64_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_64_Utils;

/****************************************************************
 ** array_int_2 
 ****************************************************************/
extern int array_int_2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_2_string(const char *str, char **endptr);
extern int string_to_array_int_2(const char *str, void *pValue, char **endptr);
extern int is_array_int_2_allow_double_conversion();
extern int array_int_2_to_double(const void *pValue, double *nValue);
extern int get_array_int_2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_2_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_2_Utils;

/****************************************************************
 ** array_int_2_32 
 ****************************************************************/
extern int array_int_2_32_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_2_32_string(const char *str, char **endptr);
extern int string_to_array_int_2_32(const char *str, void *pValue, char **endptr);
extern int is_array_int_2_32_allow_double_conversion();
extern int array_int_2_32_to_double(const void *pValue, double *nValue);
extern int get_array_int_2_32_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_2_32(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_2_32_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_2_32_Utils;

/****************************************************************
 ** array__128637 
 ****************************************************************/
extern int array__128637_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128637_string(const char *str, char **endptr);
extern int string_to_array__128637(const char *str, void *pValue, char **endptr);
extern int is_array__128637_allow_double_conversion();
extern int array__128637_to_double(const void *pValue, double *nValue);
extern int get_array__128637_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128637(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128637_default_value(void *pValue);
extern SimTypeUtils _Type_array__128637_Utils;

/****************************************************************
 ** array__128640 
 ****************************************************************/
extern int array__128640_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128640_string(const char *str, char **endptr);
extern int string_to_array__128640(const char *str, void *pValue, char **endptr);
extern int is_array__128640_allow_double_conversion();
extern int array__128640_to_double(const void *pValue, double *nValue);
extern int get_array__128640_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128640(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128640_default_value(void *pValue);
extern SimTypeUtils _Type_array__128640_Utils;

/****************************************************************
 ** struct__128643 
 ****************************************************************/
extern int struct__128643_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128643_string(const char *str, char **endptr);
extern int string_to_struct__128643(const char *str, void *pValue, char **endptr);
extern int is_struct__128643_allow_double_conversion();
extern int struct__128643_to_double(const void *pValue, double *nValue);
extern int get_struct__128643_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128643(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128643_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128643_Utils;

/****************************************************************
 ** array_int_32 
 ****************************************************************/
extern int array_int_32_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_32_string(const char *str, char **endptr);
extern int string_to_array_int_32(const char *str, void *pValue, char **endptr);
extern int is_array_int_32_allow_double_conversion();
extern int array_int_32_to_double(const void *pValue, double *nValue);
extern int get_array_int_32_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_32(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_32_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_32_Utils;

/****************************************************************
 ** struct__128661 
 ****************************************************************/
extern int struct__128661_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128661_string(const char *str, char **endptr);
extern int string_to_struct__128661(const char *str, void *pValue, char **endptr);
extern int is_struct__128661_allow_double_conversion();
extern int struct__128661_to_double(const void *pValue, double *nValue);
extern int get_struct__128661_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128661(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128661_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128661_Utils;

/****************************************************************
 ** struct__128690 
 ****************************************************************/
extern int struct__128690_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128690_string(const char *str, char **endptr);
extern int string_to_struct__128690(const char *str, void *pValue, char **endptr);
extern int is_struct__128690_allow_double_conversion();
extern int struct__128690_to_double(const void *pValue, double *nValue);
extern int get_struct__128690_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128690(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128690_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128690_Utils;

/****************************************************************
 ** array__128695 
 ****************************************************************/
extern int array__128695_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128695_string(const char *str, char **endptr);
extern int string_to_array__128695(const char *str, void *pValue, char **endptr);
extern int is_array__128695_allow_double_conversion();
extern int array__128695_to_double(const void *pValue, double *nValue);
extern int get_array__128695_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128695(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128695_default_value(void *pValue);
extern SimTypeUtils _Type_array__128695_Utils;

/****************************************************************
 ** struct__128698 
 ****************************************************************/
extern int struct__128698_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128698_string(const char *str, char **endptr);
extern int string_to_struct__128698(const char *str, void *pValue, char **endptr);
extern int is_struct__128698_allow_double_conversion();
extern int struct__128698_to_double(const void *pValue, double *nValue);
extern int get_struct__128698_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128698(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128698_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128698_Utils;

/****************************************************************
 ** struct__128711 
 ****************************************************************/
extern int struct__128711_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128711_string(const char *str, char **endptr);
extern int string_to_struct__128711(const char *str, void *pValue, char **endptr);
extern int is_struct__128711_allow_double_conversion();
extern int struct__128711_to_double(const void *pValue, double *nValue);
extern int get_struct__128711_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128711(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128711_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128711_Utils;

/****************************************************************
 ** struct__128721 
 ****************************************************************/
extern int struct__128721_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128721_string(const char *str, char **endptr);
extern int string_to_struct__128721(const char *str, void *pValue, char **endptr);
extern int is_struct__128721_allow_double_conversion();
extern int struct__128721_to_double(const void *pValue, double *nValue);
extern int get_struct__128721_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128721(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128721_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128721_Utils;

/****************************************************************
 ** array__128727 
 ****************************************************************/
extern int array__128727_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128727_string(const char *str, char **endptr);
extern int string_to_array__128727(const char *str, void *pValue, char **endptr);
extern int is_array__128727_allow_double_conversion();
extern int array__128727_to_double(const void *pValue, double *nValue);
extern int get_array__128727_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128727(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128727_default_value(void *pValue);
extern SimTypeUtils _Type_array__128727_Utils;

/****************************************************************
 ** struct__128730 
 ****************************************************************/
extern int struct__128730_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128730_string(const char *str, char **endptr);
extern int string_to_struct__128730(const char *str, void *pValue, char **endptr);
extern int is_struct__128730_allow_double_conversion();
extern int struct__128730_to_double(const void *pValue, double *nValue);
extern int get_struct__128730_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128730(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128730_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128730_Utils;

/****************************************************************
 ** array_int_3_33 
 ****************************************************************/
extern int array_int_3_33_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_3_33_string(const char *str, char **endptr);
extern int string_to_array_int_3_33(const char *str, void *pValue, char **endptr);
extern int is_array_int_3_33_allow_double_conversion();
extern int array_int_3_33_to_double(const void *pValue, double *nValue);
extern int get_array_int_3_33_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_3_33(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_3_33_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_3_33_Utils;

/****************************************************************
 ** array_int_99 
 ****************************************************************/
extern int array_int_99_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_99_string(const char *str, char **endptr);
extern int string_to_array_int_99(const char *str, void *pValue, char **endptr);
extern int is_array_int_99_allow_double_conversion();
extern int array_int_99_to_double(const void *pValue, double *nValue);
extern int get_array_int_99_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_99(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_99_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_99_Utils;

/****************************************************************
 ** array__128749 
 ****************************************************************/
extern int array__128749_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128749_string(const char *str, char **endptr);
extern int string_to_array__128749(const char *str, void *pValue, char **endptr);
extern int is_array__128749_allow_double_conversion();
extern int array__128749_to_double(const void *pValue, double *nValue);
extern int get_array__128749_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128749(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128749_default_value(void *pValue);
extern SimTypeUtils _Type_array__128749_Utils;

/****************************************************************
 ** struct__128752 
 ****************************************************************/
extern int struct__128752_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128752_string(const char *str, char **endptr);
extern int string_to_struct__128752(const char *str, void *pValue, char **endptr);
extern int is_struct__128752_allow_double_conversion();
extern int struct__128752_to_double(const void *pValue, double *nValue);
extern int get_struct__128752_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128752(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128752_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128752_Utils;

/****************************************************************
 ** array__128759 
 ****************************************************************/
extern int array__128759_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128759_string(const char *str, char **endptr);
extern int string_to_array__128759(const char *str, void *pValue, char **endptr);
extern int is_array__128759_allow_double_conversion();
extern int array__128759_to_double(const void *pValue, double *nValue);
extern int get_array__128759_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128759(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128759_default_value(void *pValue);
extern SimTypeUtils _Type_array__128759_Utils;

/****************************************************************
 ** struct__128762 
 ****************************************************************/
extern int struct__128762_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128762_string(const char *str, char **endptr);
extern int string_to_struct__128762(const char *str, void *pValue, char **endptr);
extern int is_struct__128762_allow_double_conversion();
extern int struct__128762_to_double(const void *pValue, double *nValue);
extern int get_struct__128762_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128762(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128762_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128762_Utils;

/****************************************************************
 ** array_int_4 
 ****************************************************************/
extern int array_int_4_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_4_string(const char *str, char **endptr);
extern int string_to_array_int_4(const char *str, void *pValue, char **endptr);
extern int is_array_int_4_allow_double_conversion();
extern int array_int_4_to_double(const void *pValue, double *nValue);
extern int get_array_int_4_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_4(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_4_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_4_Utils;

/****************************************************************
 ** array_int_4_32 
 ****************************************************************/
extern int array_int_4_32_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_4_32_string(const char *str, char **endptr);
extern int string_to_array_int_4_32(const char *str, void *pValue, char **endptr);
extern int is_array_int_4_32_allow_double_conversion();
extern int array_int_4_32_to_double(const void *pValue, double *nValue);
extern int get_array_int_4_32_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_4_32(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_4_32_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_4_32_Utils;

/****************************************************************
 ** array_int_128 
 ****************************************************************/
extern int array_int_128_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_128_string(const char *str, char **endptr);
extern int string_to_array_int_128(const char *str, void *pValue, char **endptr);
extern int is_array_int_128_allow_double_conversion();
extern int array_int_128_to_double(const void *pValue, double *nValue);
extern int get_array_int_128_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_128(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_128_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_128_Utils;

/****************************************************************
 ** struct__128798 
 ****************************************************************/
extern int struct__128798_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128798_string(const char *str, char **endptr);
extern int string_to_struct__128798(const char *str, void *pValue, char **endptr);
extern int is_struct__128798_allow_double_conversion();
extern int struct__128798_to_double(const void *pValue, double *nValue);
extern int get_struct__128798_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128798(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128798_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128798_Utils;

/****************************************************************
 ** array__128808 
 ****************************************************************/
extern int array__128808_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128808_string(const char *str, char **endptr);
extern int string_to_array__128808(const char *str, void *pValue, char **endptr);
extern int is_array__128808_allow_double_conversion();
extern int array__128808_to_double(const void *pValue, double *nValue);
extern int get_array__128808_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128808(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128808_default_value(void *pValue);
extern SimTypeUtils _Type_array__128808_Utils;

/****************************************************************
 ** struct__128811 
 ****************************************************************/
extern int struct__128811_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128811_string(const char *str, char **endptr);
extern int string_to_struct__128811(const char *str, void *pValue, char **endptr);
extern int is_struct__128811_allow_double_conversion();
extern int struct__128811_to_double(const void *pValue, double *nValue);
extern int get_struct__128811_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128811(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128811_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128811_Utils;

/****************************************************************
 ** array_int_7 
 ****************************************************************/
extern int array_int_7_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_7_string(const char *str, char **endptr);
extern int string_to_array_int_7(const char *str, void *pValue, char **endptr);
extern int is_array_int_7_allow_double_conversion();
extern int array_int_7_to_double(const void *pValue, double *nValue);
extern int get_array_int_7_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_7(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_7_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_7_Utils;

/****************************************************************
 ** array_int_7_33 
 ****************************************************************/
extern int array_int_7_33_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_7_33_string(const char *str, char **endptr);
extern int string_to_array_int_7_33(const char *str, void *pValue, char **endptr);
extern int is_array_int_7_33_allow_double_conversion();
extern int array_int_7_33_to_double(const void *pValue, double *nValue);
extern int get_array_int_7_33_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_7_33(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_7_33_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_7_33_Utils;

/****************************************************************
 ** array_int_231 
 ****************************************************************/
extern int array_int_231_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_231_string(const char *str, char **endptr);
extern int string_to_array_int_231(const char *str, void *pValue, char **endptr);
extern int is_array_int_231_allow_double_conversion();
extern int array_int_231_to_double(const void *pValue, double *nValue);
extern int get_array_int_231_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_231(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_231_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_231_Utils;

/****************************************************************
 ** array__128837 
 ****************************************************************/
extern int array__128837_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__128837_string(const char *str, char **endptr);
extern int string_to_array__128837(const char *str, void *pValue, char **endptr);
extern int is_array__128837_allow_double_conversion();
extern int array__128837_to_double(const void *pValue, double *nValue);
extern int get_array__128837_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__128837(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__128837_default_value(void *pValue);
extern SimTypeUtils _Type_array__128837_Utils;

/****************************************************************
 ** struct__128840 
 ****************************************************************/
extern int struct__128840_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128840_string(const char *str, char **endptr);
extern int string_to_struct__128840(const char *str, void *pValue, char **endptr);
extern int is_struct__128840_allow_double_conversion();
extern int struct__128840_to_double(const void *pValue, double *nValue);
extern int get_struct__128840_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128840(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128840_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128840_Utils;

/****************************************************************
 ** struct__128852 
 ****************************************************************/
extern int struct__128852_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128852_string(const char *str, char **endptr);
extern int string_to_struct__128852(const char *str, void *pValue, char **endptr);
extern int is_struct__128852_allow_double_conversion();
extern int struct__128852_to_double(const void *pValue, double *nValue);
extern int get_struct__128852_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128852(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128852_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128852_Utils;

/****************************************************************
 ** struct__128858 
 ****************************************************************/
extern int struct__128858_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128858_string(const char *str, char **endptr);
extern int string_to_struct__128858(const char *str, void *pValue, char **endptr);
extern int is_struct__128858_allow_double_conversion();
extern int struct__128858_to_double(const void *pValue, double *nValue);
extern int get_struct__128858_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128858(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128858_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128858_Utils;

/****************************************************************
 ** struct__128871 
 ****************************************************************/
extern int struct__128871_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128871_string(const char *str, char **endptr);
extern int string_to_struct__128871(const char *str, void *pValue, char **endptr);
extern int is_struct__128871_allow_double_conversion();
extern int struct__128871_to_double(const void *pValue, double *nValue);
extern int get_struct__128871_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128871(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128871_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128871_Utils;

/****************************************************************
 ** struct__128876 
 ****************************************************************/
extern int struct__128876_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128876_string(const char *str, char **endptr);
extern int string_to_struct__128876(const char *str, void *pValue, char **endptr);
extern int is_struct__128876_allow_double_conversion();
extern int struct__128876_to_double(const void *pValue, double *nValue);
extern int get_struct__128876_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128876(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128876_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128876_Utils;

/****************************************************************
 ** struct__128884 
 ****************************************************************/
extern int struct__128884_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128884_string(const char *str, char **endptr);
extern int string_to_struct__128884(const char *str, void *pValue, char **endptr);
extern int is_struct__128884_allow_double_conversion();
extern int struct__128884_to_double(const void *pValue, double *nValue);
extern int get_struct__128884_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128884(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128884_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128884_Utils;

/****************************************************************
 ** struct__128902 
 ****************************************************************/
extern int struct__128902_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128902_string(const char *str, char **endptr);
extern int string_to_struct__128902(const char *str, void *pValue, char **endptr);
extern int is_struct__128902_allow_double_conversion();
extern int struct__128902_to_double(const void *pValue, double *nValue);
extern int get_struct__128902_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128902(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128902_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128902_Utils;

/****************************************************************
 ** struct__128912 
 ****************************************************************/
extern int struct__128912_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128912_string(const char *str, char **endptr);
extern int string_to_struct__128912(const char *str, void *pValue, char **endptr);
extern int is_struct__128912_allow_double_conversion();
extern int struct__128912_to_double(const void *pValue, double *nValue);
extern int get_struct__128912_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128912(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128912_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128912_Utils;

/****************************************************************
 ** struct__128918 
 ****************************************************************/
extern int struct__128918_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128918_string(const char *str, char **endptr);
extern int string_to_struct__128918(const char *str, void *pValue, char **endptr);
extern int is_struct__128918_allow_double_conversion();
extern int struct__128918_to_double(const void *pValue, double *nValue);
extern int get_struct__128918_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128918(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128918_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128918_Utils;

/****************************************************************
 ** struct__128930 
 ****************************************************************/
extern int struct__128930_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128930_string(const char *str, char **endptr);
extern int string_to_struct__128930(const char *str, void *pValue, char **endptr);
extern int is_struct__128930_allow_double_conversion();
extern int struct__128930_to_double(const void *pValue, double *nValue);
extern int get_struct__128930_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128930(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128930_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128930_Utils;

/****************************************************************
 ** struct__128940 
 ****************************************************************/
extern int struct__128940_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128940_string(const char *str, char **endptr);
extern int string_to_struct__128940(const char *str, void *pValue, char **endptr);
extern int is_struct__128940_allow_double_conversion();
extern int struct__128940_to_double(const void *pValue, double *nValue);
extern int get_struct__128940_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128940(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128940_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128940_Utils;

/****************************************************************
 ** struct__128947 
 ****************************************************************/
extern int struct__128947_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128947_string(const char *str, char **endptr);
extern int string_to_struct__128947(const char *str, void *pValue, char **endptr);
extern int is_struct__128947_allow_double_conversion();
extern int struct__128947_to_double(const void *pValue, double *nValue);
extern int get_struct__128947_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128947(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128947_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128947_Utils;

/****************************************************************
 ** struct__128953 
 ****************************************************************/
extern int struct__128953_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128953_string(const char *str, char **endptr);
extern int string_to_struct__128953(const char *str, void *pValue, char **endptr);
extern int is_struct__128953_allow_double_conversion();
extern int struct__128953_to_double(const void *pValue, double *nValue);
extern int get_struct__128953_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128953(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128953_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128953_Utils;

/****************************************************************
 ** struct__128961 
 ****************************************************************/
extern int struct__128961_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128961_string(const char *str, char **endptr);
extern int string_to_struct__128961(const char *str, void *pValue, char **endptr);
extern int is_struct__128961_allow_double_conversion();
extern int struct__128961_to_double(const void *pValue, double *nValue);
extern int get_struct__128961_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128961(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128961_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128961_Utils;

/****************************************************************
 ** struct__128968 
 ****************************************************************/
extern int struct__128968_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128968_string(const char *str, char **endptr);
extern int string_to_struct__128968(const char *str, void *pValue, char **endptr);
extern int is_struct__128968_allow_double_conversion();
extern int struct__128968_to_double(const void *pValue, double *nValue);
extern int get_struct__128968_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128968(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128968_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128968_Utils;

/****************************************************************
 ** struct__128973 
 ****************************************************************/
extern int struct__128973_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128973_string(const char *str, char **endptr);
extern int string_to_struct__128973(const char *str, void *pValue, char **endptr);
extern int is_struct__128973_allow_double_conversion();
extern int struct__128973_to_double(const void *pValue, double *nValue);
extern int get_struct__128973_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128973(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128973_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128973_Utils;

/****************************************************************
 ** struct__128997 
 ****************************************************************/
extern int struct__128997_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__128997_string(const char *str, char **endptr);
extern int string_to_struct__128997(const char *str, void *pValue, char **endptr);
extern int is_struct__128997_allow_double_conversion();
extern int struct__128997_to_double(const void *pValue, double *nValue);
extern int get_struct__128997_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__128997(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__128997_default_value(void *pValue);
extern SimTypeUtils _Type_struct__128997_Utils;

/****************************************************************
 ** struct__129004 
 ****************************************************************/
extern int struct__129004_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129004_string(const char *str, char **endptr);
extern int string_to_struct__129004(const char *str, void *pValue, char **endptr);
extern int is_struct__129004_allow_double_conversion();
extern int struct__129004_to_double(const void *pValue, double *nValue);
extern int get_struct__129004_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129004(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129004_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129004_Utils;

/****************************************************************
 ** struct__129014 
 ****************************************************************/
extern int struct__129014_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129014_string(const char *str, char **endptr);
extern int string_to_struct__129014(const char *str, void *pValue, char **endptr);
extern int is_struct__129014_allow_double_conversion();
extern int struct__129014_to_double(const void *pValue, double *nValue);
extern int get_struct__129014_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129014(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129014_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129014_Utils;

/****************************************************************
 ** struct__129022 
 ****************************************************************/
extern int struct__129022_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129022_string(const char *str, char **endptr);
extern int string_to_struct__129022(const char *str, void *pValue, char **endptr);
extern int is_struct__129022_allow_double_conversion();
extern int struct__129022_to_double(const void *pValue, double *nValue);
extern int get_struct__129022_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129022(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129022_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129022_Utils;

/****************************************************************
 ** struct__129035 
 ****************************************************************/
extern int struct__129035_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129035_string(const char *str, char **endptr);
extern int string_to_struct__129035(const char *str, void *pValue, char **endptr);
extern int is_struct__129035_allow_double_conversion();
extern int struct__129035_to_double(const void *pValue, double *nValue);
extern int get_struct__129035_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129035(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129035_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129035_Utils;

/****************************************************************
 ** struct__129042 
 ****************************************************************/
extern int struct__129042_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129042_string(const char *str, char **endptr);
extern int string_to_struct__129042(const char *str, void *pValue, char **endptr);
extern int is_struct__129042_allow_double_conversion();
extern int struct__129042_to_double(const void *pValue, double *nValue);
extern int get_struct__129042_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129042(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129042_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129042_Utils;

/****************************************************************
 ** struct__129050 
 ****************************************************************/
extern int struct__129050_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129050_string(const char *str, char **endptr);
extern int string_to_struct__129050(const char *str, void *pValue, char **endptr);
extern int is_struct__129050_allow_double_conversion();
extern int struct__129050_to_double(const void *pValue, double *nValue);
extern int get_struct__129050_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129050(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129050_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129050_Utils;

/****************************************************************
 ** struct__129064 
 ****************************************************************/
extern int struct__129064_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129064_string(const char *str, char **endptr);
extern int string_to_struct__129064(const char *str, void *pValue, char **endptr);
extern int is_struct__129064_allow_double_conversion();
extern int struct__129064_to_double(const void *pValue, double *nValue);
extern int get_struct__129064_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129064(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129064_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129064_Utils;

/****************************************************************
 ** array__129070 
 ****************************************************************/
extern int array__129070_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129070_string(const char *str, char **endptr);
extern int string_to_array__129070(const char *str, void *pValue, char **endptr);
extern int is_array__129070_allow_double_conversion();
extern int array__129070_to_double(const void *pValue, double *nValue);
extern int get_array__129070_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129070(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129070_default_value(void *pValue);
extern SimTypeUtils _Type_array__129070_Utils;

/****************************************************************
 ** struct__129073 
 ****************************************************************/
extern int struct__129073_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129073_string(const char *str, char **endptr);
extern int string_to_struct__129073(const char *str, void *pValue, char **endptr);
extern int is_struct__129073_allow_double_conversion();
extern int struct__129073_to_double(const void *pValue, double *nValue);
extern int get_struct__129073_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129073(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129073_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129073_Utils;

/****************************************************************
 ** struct__129081 
 ****************************************************************/
extern int struct__129081_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129081_string(const char *str, char **endptr);
extern int string_to_struct__129081(const char *str, void *pValue, char **endptr);
extern int is_struct__129081_allow_double_conversion();
extern int struct__129081_to_double(const void *pValue, double *nValue);
extern int get_struct__129081_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129081(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129081_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129081_Utils;

/****************************************************************
 ** array__129095 
 ****************************************************************/
extern int array__129095_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129095_string(const char *str, char **endptr);
extern int string_to_array__129095(const char *str, void *pValue, char **endptr);
extern int is_array__129095_allow_double_conversion();
extern int array__129095_to_double(const void *pValue, double *nValue);
extern int get_array__129095_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129095(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129095_default_value(void *pValue);
extern SimTypeUtils _Type_array__129095_Utils;

/****************************************************************
 ** struct__129098 
 ****************************************************************/
extern int struct__129098_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129098_string(const char *str, char **endptr);
extern int string_to_struct__129098(const char *str, void *pValue, char **endptr);
extern int is_struct__129098_allow_double_conversion();
extern int struct__129098_to_double(const void *pValue, double *nValue);
extern int get_struct__129098_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129098(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129098_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129098_Utils;

/****************************************************************
 ** struct__129104 
 ****************************************************************/
extern int struct__129104_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129104_string(const char *str, char **endptr);
extern int string_to_struct__129104(const char *str, void *pValue, char **endptr);
extern int is_struct__129104_allow_double_conversion();
extern int struct__129104_to_double(const void *pValue, double *nValue);
extern int get_struct__129104_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129104(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129104_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129104_Utils;

/****************************************************************
 ** struct__129113 
 ****************************************************************/
extern int struct__129113_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129113_string(const char *str, char **endptr);
extern int string_to_struct__129113(const char *str, void *pValue, char **endptr);
extern int is_struct__129113_allow_double_conversion();
extern int struct__129113_to_double(const void *pValue, double *nValue);
extern int get_struct__129113_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129113(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129113_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129113_Utils;

/****************************************************************
 ** array__129125 
 ****************************************************************/
extern int array__129125_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129125_string(const char *str, char **endptr);
extern int string_to_array__129125(const char *str, void *pValue, char **endptr);
extern int is_array__129125_allow_double_conversion();
extern int array__129125_to_double(const void *pValue, double *nValue);
extern int get_array__129125_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129125(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129125_default_value(void *pValue);
extern SimTypeUtils _Type_array__129125_Utils;

/****************************************************************
 ** struct__129128 
 ****************************************************************/
extern int struct__129128_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129128_string(const char *str, char **endptr);
extern int string_to_struct__129128(const char *str, void *pValue, char **endptr);
extern int is_struct__129128_allow_double_conversion();
extern int struct__129128_to_double(const void *pValue, double *nValue);
extern int get_struct__129128_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129128(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129128_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129128_Utils;

/****************************************************************
 ** struct__129137 
 ****************************************************************/
extern int struct__129137_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129137_string(const char *str, char **endptr);
extern int string_to_struct__129137(const char *str, void *pValue, char **endptr);
extern int is_struct__129137_allow_double_conversion();
extern int struct__129137_to_double(const void *pValue, double *nValue);
extern int get_struct__129137_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129137(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129137_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129137_Utils;

/****************************************************************
 ** struct__129148 
 ****************************************************************/
extern int struct__129148_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129148_string(const char *str, char **endptr);
extern int string_to_struct__129148(const char *str, void *pValue, char **endptr);
extern int is_struct__129148_allow_double_conversion();
extern int struct__129148_to_double(const void *pValue, double *nValue);
extern int get_struct__129148_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129148(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129148_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129148_Utils;

/****************************************************************
 ** array_int_9 
 ****************************************************************/
extern int array_int_9_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_9_string(const char *str, char **endptr);
extern int string_to_array_int_9(const char *str, void *pValue, char **endptr);
extern int is_array_int_9_allow_double_conversion();
extern int array_int_9_to_double(const void *pValue, double *nValue);
extern int get_array_int_9_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_9(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_9_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_9_Utils;

/****************************************************************
 ** struct__129161 
 ****************************************************************/
extern int struct__129161_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129161_string(const char *str, char **endptr);
extern int string_to_struct__129161(const char *str, void *pValue, char **endptr);
extern int is_struct__129161_allow_double_conversion();
extern int struct__129161_to_double(const void *pValue, double *nValue);
extern int get_struct__129161_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129161(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129161_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129161_Utils;

/****************************************************************
 ** struct__129171 
 ****************************************************************/
extern int struct__129171_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129171_string(const char *str, char **endptr);
extern int string_to_struct__129171(const char *str, void *pValue, char **endptr);
extern int is_struct__129171_allow_double_conversion();
extern int struct__129171_to_double(const void *pValue, double *nValue);
extern int get_struct__129171_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129171(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129171_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129171_Utils;

/****************************************************************
 ** struct__129191 
 ****************************************************************/
extern int struct__129191_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129191_string(const char *str, char **endptr);
extern int string_to_struct__129191(const char *str, void *pValue, char **endptr);
extern int is_struct__129191_allow_double_conversion();
extern int struct__129191_to_double(const void *pValue, double *nValue);
extern int get_struct__129191_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129191(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129191_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129191_Utils;

/****************************************************************
 ** struct__129197 
 ****************************************************************/
extern int struct__129197_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129197_string(const char *str, char **endptr);
extern int string_to_struct__129197(const char *str, void *pValue, char **endptr);
extern int is_struct__129197_allow_double_conversion();
extern int struct__129197_to_double(const void *pValue, double *nValue);
extern int get_struct__129197_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129197(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129197_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129197_Utils;

/****************************************************************
 ** array__129203 
 ****************************************************************/
extern int array__129203_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129203_string(const char *str, char **endptr);
extern int string_to_array__129203(const char *str, void *pValue, char **endptr);
extern int is_array__129203_allow_double_conversion();
extern int array__129203_to_double(const void *pValue, double *nValue);
extern int get_array__129203_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129203(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129203_default_value(void *pValue);
extern SimTypeUtils _Type_array__129203_Utils;

/****************************************************************
 ** struct__129206 
 ****************************************************************/
extern int struct__129206_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129206_string(const char *str, char **endptr);
extern int string_to_struct__129206(const char *str, void *pValue, char **endptr);
extern int is_struct__129206_allow_double_conversion();
extern int struct__129206_to_double(const void *pValue, double *nValue);
extern int get_struct__129206_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129206(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129206_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129206_Utils;

/****************************************************************
 ** array__129213 
 ****************************************************************/
extern int array__129213_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129213_string(const char *str, char **endptr);
extern int string_to_array__129213(const char *str, void *pValue, char **endptr);
extern int is_array__129213_allow_double_conversion();
extern int array__129213_to_double(const void *pValue, double *nValue);
extern int get_array__129213_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129213(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129213_default_value(void *pValue);
extern SimTypeUtils _Type_array__129213_Utils;

/****************************************************************
 ** struct__129216 
 ****************************************************************/
extern int struct__129216_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129216_string(const char *str, char **endptr);
extern int string_to_struct__129216(const char *str, void *pValue, char **endptr);
extern int is_struct__129216_allow_double_conversion();
extern int struct__129216_to_double(const void *pValue, double *nValue);
extern int get_struct__129216_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129216(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129216_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129216_Utils;

/****************************************************************
 ** array__129228 
 ****************************************************************/
extern int array__129228_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129228_string(const char *str, char **endptr);
extern int string_to_array__129228(const char *str, void *pValue, char **endptr);
extern int is_array__129228_allow_double_conversion();
extern int array__129228_to_double(const void *pValue, double *nValue);
extern int get_array__129228_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129228(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129228_default_value(void *pValue);
extern SimTypeUtils _Type_array__129228_Utils;

/****************************************************************
 ** struct__129231 
 ****************************************************************/
extern int struct__129231_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129231_string(const char *str, char **endptr);
extern int string_to_struct__129231(const char *str, void *pValue, char **endptr);
extern int is_struct__129231_allow_double_conversion();
extern int struct__129231_to_double(const void *pValue, double *nValue);
extern int get_struct__129231_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129231(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129231_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129231_Utils;

/****************************************************************
 ** array__129238 
 ****************************************************************/
extern int array__129238_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129238_string(const char *str, char **endptr);
extern int string_to_array__129238(const char *str, void *pValue, char **endptr);
extern int is_array__129238_allow_double_conversion();
extern int array__129238_to_double(const void *pValue, double *nValue);
extern int get_array__129238_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129238(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129238_default_value(void *pValue);
extern SimTypeUtils _Type_array__129238_Utils;

/****************************************************************
 ** struct__129241 
 ****************************************************************/
extern int struct__129241_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129241_string(const char *str, char **endptr);
extern int string_to_struct__129241(const char *str, void *pValue, char **endptr);
extern int is_struct__129241_allow_double_conversion();
extern int struct__129241_to_double(const void *pValue, double *nValue);
extern int get_struct__129241_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129241(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129241_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129241_Utils;

/****************************************************************
 ** struct__129272 
 ****************************************************************/
extern int struct__129272_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129272_string(const char *str, char **endptr);
extern int string_to_struct__129272(const char *str, void *pValue, char **endptr);
extern int is_struct__129272_allow_double_conversion();
extern int struct__129272_to_double(const void *pValue, double *nValue);
extern int get_struct__129272_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129272(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129272_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129272_Utils;

/****************************************************************
 ** struct__129277 
 ****************************************************************/
extern int struct__129277_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129277_string(const char *str, char **endptr);
extern int string_to_struct__129277(const char *str, void *pValue, char **endptr);
extern int is_struct__129277_allow_double_conversion();
extern int struct__129277_to_double(const void *pValue, double *nValue);
extern int get_struct__129277_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129277(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129277_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129277_Utils;

/****************************************************************
 ** array__129283 
 ****************************************************************/
extern int array__129283_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129283_string(const char *str, char **endptr);
extern int string_to_array__129283(const char *str, void *pValue, char **endptr);
extern int is_array__129283_allow_double_conversion();
extern int array__129283_to_double(const void *pValue, double *nValue);
extern int get_array__129283_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129283(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129283_default_value(void *pValue);
extern SimTypeUtils _Type_array__129283_Utils;

/****************************************************************
 ** struct__129286 
 ****************************************************************/
extern int struct__129286_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129286_string(const char *str, char **endptr);
extern int string_to_struct__129286(const char *str, void *pValue, char **endptr);
extern int is_struct__129286_allow_double_conversion();
extern int struct__129286_to_double(const void *pValue, double *nValue);
extern int get_struct__129286_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129286(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129286_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129286_Utils;

/****************************************************************
 ** array__129293 
 ****************************************************************/
extern int array__129293_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129293_string(const char *str, char **endptr);
extern int string_to_array__129293(const char *str, void *pValue, char **endptr);
extern int is_array__129293_allow_double_conversion();
extern int array__129293_to_double(const void *pValue, double *nValue);
extern int get_array__129293_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129293(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129293_default_value(void *pValue);
extern SimTypeUtils _Type_array__129293_Utils;

/****************************************************************
 ** struct__129296 
 ****************************************************************/
extern int struct__129296_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129296_string(const char *str, char **endptr);
extern int string_to_struct__129296(const char *str, void *pValue, char **endptr);
extern int is_struct__129296_allow_double_conversion();
extern int struct__129296_to_double(const void *pValue, double *nValue);
extern int get_struct__129296_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129296(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129296_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129296_Utils;

/****************************************************************
 ** array__129304 
 ****************************************************************/
extern int array__129304_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129304_string(const char *str, char **endptr);
extern int string_to_array__129304(const char *str, void *pValue, char **endptr);
extern int is_array__129304_allow_double_conversion();
extern int array__129304_to_double(const void *pValue, double *nValue);
extern int get_array__129304_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129304(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129304_default_value(void *pValue);
extern SimTypeUtils _Type_array__129304_Utils;

/****************************************************************
 ** struct__129307 
 ****************************************************************/
extern int struct__129307_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129307_string(const char *str, char **endptr);
extern int string_to_struct__129307(const char *str, void *pValue, char **endptr);
extern int is_struct__129307_allow_double_conversion();
extern int struct__129307_to_double(const void *pValue, double *nValue);
extern int get_struct__129307_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129307(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129307_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129307_Utils;

/****************************************************************
 ** array__129312 
 ****************************************************************/
extern int array__129312_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129312_string(const char *str, char **endptr);
extern int string_to_array__129312(const char *str, void *pValue, char **endptr);
extern int is_array__129312_allow_double_conversion();
extern int array__129312_to_double(const void *pValue, double *nValue);
extern int get_array__129312_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129312(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129312_default_value(void *pValue);
extern SimTypeUtils _Type_array__129312_Utils;

/****************************************************************
 ** struct__129315 
 ****************************************************************/
extern int struct__129315_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129315_string(const char *str, char **endptr);
extern int string_to_struct__129315(const char *str, void *pValue, char **endptr);
extern int is_struct__129315_allow_double_conversion();
extern int struct__129315_to_double(const void *pValue, double *nValue);
extern int get_struct__129315_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129315(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129315_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129315_Utils;

/****************************************************************
 ** struct__129354 
 ****************************************************************/
extern int struct__129354_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129354_string(const char *str, char **endptr);
extern int string_to_struct__129354(const char *str, void *pValue, char **endptr);
extern int is_struct__129354_allow_double_conversion();
extern int struct__129354_to_double(const void *pValue, double *nValue);
extern int get_struct__129354_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129354(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129354_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129354_Utils;

/****************************************************************
 ** array__129365 
 ****************************************************************/
extern int array__129365_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129365_string(const char *str, char **endptr);
extern int string_to_array__129365(const char *str, void *pValue, char **endptr);
extern int is_array__129365_allow_double_conversion();
extern int array__129365_to_double(const void *pValue, double *nValue);
extern int get_array__129365_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129365(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129365_default_value(void *pValue);
extern SimTypeUtils _Type_array__129365_Utils;

/****************************************************************
 ** struct__129368 
 ****************************************************************/
extern int struct__129368_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129368_string(const char *str, char **endptr);
extern int string_to_struct__129368(const char *str, void *pValue, char **endptr);
extern int is_struct__129368_allow_double_conversion();
extern int struct__129368_to_double(const void *pValue, double *nValue);
extern int get_struct__129368_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129368(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129368_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129368_Utils;

/****************************************************************
 ** struct__129377 
 ****************************************************************/
extern int struct__129377_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129377_string(const char *str, char **endptr);
extern int string_to_struct__129377(const char *str, void *pValue, char **endptr);
extern int is_struct__129377_allow_double_conversion();
extern int struct__129377_to_double(const void *pValue, double *nValue);
extern int get_struct__129377_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129377(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129377_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129377_Utils;

/****************************************************************
 ** struct__129383 
 ****************************************************************/
extern int struct__129383_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129383_string(const char *str, char **endptr);
extern int string_to_struct__129383(const char *str, void *pValue, char **endptr);
extern int is_struct__129383_allow_double_conversion();
extern int struct__129383_to_double(const void *pValue, double *nValue);
extern int get_struct__129383_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129383(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129383_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129383_Utils;

/****************************************************************
 ** struct__129392 
 ****************************************************************/
extern int struct__129392_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129392_string(const char *str, char **endptr);
extern int string_to_struct__129392(const char *str, void *pValue, char **endptr);
extern int is_struct__129392_allow_double_conversion();
extern int struct__129392_to_double(const void *pValue, double *nValue);
extern int get_struct__129392_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129392(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129392_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129392_Utils;

/****************************************************************
 ** array__129398 
 ****************************************************************/
extern int array__129398_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129398_string(const char *str, char **endptr);
extern int string_to_array__129398(const char *str, void *pValue, char **endptr);
extern int is_array__129398_allow_double_conversion();
extern int array__129398_to_double(const void *pValue, double *nValue);
extern int get_array__129398_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129398(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129398_default_value(void *pValue);
extern SimTypeUtils _Type_array__129398_Utils;

/****************************************************************
 ** struct__129401 
 ****************************************************************/
extern int struct__129401_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129401_string(const char *str, char **endptr);
extern int string_to_struct__129401(const char *str, void *pValue, char **endptr);
extern int is_struct__129401_allow_double_conversion();
extern int struct__129401_to_double(const void *pValue, double *nValue);
extern int get_struct__129401_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129401(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129401_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129401_Utils;

/****************************************************************
 ** struct__129409 
 ****************************************************************/
extern int struct__129409_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129409_string(const char *str, char **endptr);
extern int string_to_struct__129409(const char *str, void *pValue, char **endptr);
extern int is_struct__129409_allow_double_conversion();
extern int struct__129409_to_double(const void *pValue, double *nValue);
extern int get_struct__129409_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129409(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129409_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129409_Utils;

/****************************************************************
 ** array__129414 
 ****************************************************************/
extern int array__129414_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129414_string(const char *str, char **endptr);
extern int string_to_array__129414(const char *str, void *pValue, char **endptr);
extern int is_array__129414_allow_double_conversion();
extern int array__129414_to_double(const void *pValue, double *nValue);
extern int get_array__129414_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129414(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129414_default_value(void *pValue);
extern SimTypeUtils _Type_array__129414_Utils;

/****************************************************************
 ** struct__129417 
 ****************************************************************/
extern int struct__129417_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129417_string(const char *str, char **endptr);
extern int string_to_struct__129417(const char *str, void *pValue, char **endptr);
extern int is_struct__129417_allow_double_conversion();
extern int struct__129417_to_double(const void *pValue, double *nValue);
extern int get_struct__129417_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129417(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129417_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129417_Utils;

/****************************************************************
 ** struct__129429 
 ****************************************************************/
extern int struct__129429_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129429_string(const char *str, char **endptr);
extern int string_to_struct__129429(const char *str, void *pValue, char **endptr);
extern int is_struct__129429_allow_double_conversion();
extern int struct__129429_to_double(const void *pValue, double *nValue);
extern int get_struct__129429_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129429(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129429_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129429_Utils;

/****************************************************************
 ** struct__129442 
 ****************************************************************/
extern int struct__129442_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129442_string(const char *str, char **endptr);
extern int string_to_struct__129442(const char *str, void *pValue, char **endptr);
extern int is_struct__129442_allow_double_conversion();
extern int struct__129442_to_double(const void *pValue, double *nValue);
extern int get_struct__129442_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129442(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129442_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129442_Utils;

/****************************************************************
 ** array__129451 
 ****************************************************************/
extern int array__129451_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129451_string(const char *str, char **endptr);
extern int string_to_array__129451(const char *str, void *pValue, char **endptr);
extern int is_array__129451_allow_double_conversion();
extern int array__129451_to_double(const void *pValue, double *nValue);
extern int get_array__129451_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129451(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129451_default_value(void *pValue);
extern SimTypeUtils _Type_array__129451_Utils;

/****************************************************************
 ** struct__129454 
 ****************************************************************/
extern int struct__129454_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129454_string(const char *str, char **endptr);
extern int string_to_struct__129454(const char *str, void *pValue, char **endptr);
extern int is_struct__129454_allow_double_conversion();
extern int struct__129454_to_double(const void *pValue, double *nValue);
extern int get_struct__129454_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129454(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129454_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129454_Utils;

/****************************************************************
 ** struct__129459 
 ****************************************************************/
extern int struct__129459_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129459_string(const char *str, char **endptr);
extern int string_to_struct__129459(const char *str, void *pValue, char **endptr);
extern int is_struct__129459_allow_double_conversion();
extern int struct__129459_to_double(const void *pValue, double *nValue);
extern int get_struct__129459_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129459(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129459_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129459_Utils;

/****************************************************************
 ** struct__129465 
 ****************************************************************/
extern int struct__129465_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129465_string(const char *str, char **endptr);
extern int string_to_struct__129465(const char *str, void *pValue, char **endptr);
extern int is_struct__129465_allow_double_conversion();
extern int struct__129465_to_double(const void *pValue, double *nValue);
extern int get_struct__129465_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129465(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129465_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129465_Utils;

/****************************************************************
 ** struct__129483 
 ****************************************************************/
extern int struct__129483_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129483_string(const char *str, char **endptr);
extern int string_to_struct__129483(const char *str, void *pValue, char **endptr);
extern int is_struct__129483_allow_double_conversion();
extern int struct__129483_to_double(const void *pValue, double *nValue);
extern int get_struct__129483_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129483(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129483_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129483_Utils;

/****************************************************************
 ** struct__129488 
 ****************************************************************/
extern int struct__129488_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129488_string(const char *str, char **endptr);
extern int string_to_struct__129488(const char *str, void *pValue, char **endptr);
extern int is_struct__129488_allow_double_conversion();
extern int struct__129488_to_double(const void *pValue, double *nValue);
extern int get_struct__129488_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129488(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129488_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129488_Utils;

/****************************************************************
 ** struct__129496 
 ****************************************************************/
extern int struct__129496_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129496_string(const char *str, char **endptr);
extern int string_to_struct__129496(const char *str, void *pValue, char **endptr);
extern int is_struct__129496_allow_double_conversion();
extern int struct__129496_to_double(const void *pValue, double *nValue);
extern int get_struct__129496_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129496(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129496_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129496_Utils;

/****************************************************************
 ** struct__129504 
 ****************************************************************/
extern int struct__129504_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129504_string(const char *str, char **endptr);
extern int string_to_struct__129504(const char *str, void *pValue, char **endptr);
extern int is_struct__129504_allow_double_conversion();
extern int struct__129504_to_double(const void *pValue, double *nValue);
extern int get_struct__129504_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129504(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129504_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129504_Utils;

/****************************************************************
 ** array_int_6 
 ****************************************************************/
extern int array_int_6_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_6_string(const char *str, char **endptr);
extern int string_to_array_int_6(const char *str, void *pValue, char **endptr);
extern int is_array_int_6_allow_double_conversion();
extern int array_int_6_to_double(const void *pValue, double *nValue);
extern int get_array_int_6_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_6(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_6_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_6_Utils;

/****************************************************************
 ** struct__129516 
 ****************************************************************/
extern int struct__129516_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129516_string(const char *str, char **endptr);
extern int string_to_struct__129516(const char *str, void *pValue, char **endptr);
extern int is_struct__129516_allow_double_conversion();
extern int struct__129516_to_double(const void *pValue, double *nValue);
extern int get_struct__129516_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129516(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129516_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129516_Utils;

/****************************************************************
 ** array__129524 
 ****************************************************************/
extern int array__129524_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129524_string(const char *str, char **endptr);
extern int string_to_array__129524(const char *str, void *pValue, char **endptr);
extern int is_array__129524_allow_double_conversion();
extern int array__129524_to_double(const void *pValue, double *nValue);
extern int get_array__129524_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129524(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129524_default_value(void *pValue);
extern SimTypeUtils _Type_array__129524_Utils;

/****************************************************************
 ** struct__129527 
 ****************************************************************/
extern int struct__129527_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129527_string(const char *str, char **endptr);
extern int string_to_struct__129527(const char *str, void *pValue, char **endptr);
extern int is_struct__129527_allow_double_conversion();
extern int struct__129527_to_double(const void *pValue, double *nValue);
extern int get_struct__129527_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129527(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129527_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129527_Utils;

/****************************************************************
 ** struct__129552 
 ****************************************************************/
extern int struct__129552_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129552_string(const char *str, char **endptr);
extern int string_to_struct__129552(const char *str, void *pValue, char **endptr);
extern int is_struct__129552_allow_double_conversion();
extern int struct__129552_to_double(const void *pValue, double *nValue);
extern int get_struct__129552_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129552(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129552_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129552_Utils;

/****************************************************************
 ** array__129560 
 ****************************************************************/
extern int array__129560_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129560_string(const char *str, char **endptr);
extern int string_to_array__129560(const char *str, void *pValue, char **endptr);
extern int is_array__129560_allow_double_conversion();
extern int array__129560_to_double(const void *pValue, double *nValue);
extern int get_array__129560_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129560(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129560_default_value(void *pValue);
extern SimTypeUtils _Type_array__129560_Utils;

/****************************************************************
 ** struct__129563 
 ****************************************************************/
extern int struct__129563_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129563_string(const char *str, char **endptr);
extern int string_to_struct__129563(const char *str, void *pValue, char **endptr);
extern int is_struct__129563_allow_double_conversion();
extern int struct__129563_to_double(const void *pValue, double *nValue);
extern int get_struct__129563_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129563(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129563_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129563_Utils;

/****************************************************************
 ** array__129570 
 ****************************************************************/
extern int array__129570_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129570_string(const char *str, char **endptr);
extern int string_to_array__129570(const char *str, void *pValue, char **endptr);
extern int is_array__129570_allow_double_conversion();
extern int array__129570_to_double(const void *pValue, double *nValue);
extern int get_array__129570_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129570(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129570_default_value(void *pValue);
extern SimTypeUtils _Type_array__129570_Utils;

/****************************************************************
 ** struct__129573 
 ****************************************************************/
extern int struct__129573_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129573_string(const char *str, char **endptr);
extern int string_to_struct__129573(const char *str, void *pValue, char **endptr);
extern int is_struct__129573_allow_double_conversion();
extern int struct__129573_to_double(const void *pValue, double *nValue);
extern int get_struct__129573_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129573(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129573_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129573_Utils;

/****************************************************************
 ** struct__129581 
 ****************************************************************/
extern int struct__129581_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129581_string(const char *str, char **endptr);
extern int string_to_struct__129581(const char *str, void *pValue, char **endptr);
extern int is_struct__129581_allow_double_conversion();
extern int struct__129581_to_double(const void *pValue, double *nValue);
extern int get_struct__129581_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129581(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129581_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129581_Utils;

/****************************************************************
 ** struct__129591 
 ****************************************************************/
extern int struct__129591_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129591_string(const char *str, char **endptr);
extern int string_to_struct__129591(const char *str, void *pValue, char **endptr);
extern int is_struct__129591_allow_double_conversion();
extern int struct__129591_to_double(const void *pValue, double *nValue);
extern int get_struct__129591_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129591(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129591_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129591_Utils;

/****************************************************************
 ** struct__129597 
 ****************************************************************/
extern int struct__129597_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129597_string(const char *str, char **endptr);
extern int string_to_struct__129597(const char *str, void *pValue, char **endptr);
extern int is_struct__129597_allow_double_conversion();
extern int struct__129597_to_double(const void *pValue, double *nValue);
extern int get_struct__129597_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129597(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129597_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129597_Utils;

/****************************************************************
 ** array__129602 
 ****************************************************************/
extern int array__129602_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129602_string(const char *str, char **endptr);
extern int string_to_array__129602(const char *str, void *pValue, char **endptr);
extern int is_array__129602_allow_double_conversion();
extern int array__129602_to_double(const void *pValue, double *nValue);
extern int get_array__129602_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129602(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129602_default_value(void *pValue);
extern SimTypeUtils _Type_array__129602_Utils;

/****************************************************************
 ** struct__129605 
 ****************************************************************/
extern int struct__129605_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129605_string(const char *str, char **endptr);
extern int string_to_struct__129605(const char *str, void *pValue, char **endptr);
extern int is_struct__129605_allow_double_conversion();
extern int struct__129605_to_double(const void *pValue, double *nValue);
extern int get_struct__129605_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129605(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129605_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129605_Utils;

/****************************************************************
 ** struct__129610 
 ****************************************************************/
extern int struct__129610_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129610_string(const char *str, char **endptr);
extern int string_to_struct__129610(const char *str, void *pValue, char **endptr);
extern int is_struct__129610_allow_double_conversion();
extern int struct__129610_to_double(const void *pValue, double *nValue);
extern int get_struct__129610_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129610(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129610_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129610_Utils;

/****************************************************************
 ** array__129617 
 ****************************************************************/
extern int array__129617_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129617_string(const char *str, char **endptr);
extern int string_to_array__129617(const char *str, void *pValue, char **endptr);
extern int is_array__129617_allow_double_conversion();
extern int array__129617_to_double(const void *pValue, double *nValue);
extern int get_array__129617_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129617(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129617_default_value(void *pValue);
extern SimTypeUtils _Type_array__129617_Utils;

/****************************************************************
 ** struct__129620 
 ****************************************************************/
extern int struct__129620_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129620_string(const char *str, char **endptr);
extern int string_to_struct__129620(const char *str, void *pValue, char **endptr);
extern int is_struct__129620_allow_double_conversion();
extern int struct__129620_to_double(const void *pValue, double *nValue);
extern int get_struct__129620_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129620(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129620_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129620_Utils;

/****************************************************************
 ** struct__129625 
 ****************************************************************/
extern int struct__129625_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129625_string(const char *str, char **endptr);
extern int string_to_struct__129625(const char *str, void *pValue, char **endptr);
extern int is_struct__129625_allow_double_conversion();
extern int struct__129625_to_double(const void *pValue, double *nValue);
extern int get_struct__129625_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129625(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129625_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129625_Utils;

/****************************************************************
 ** array__129633 
 ****************************************************************/
extern int array__129633_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129633_string(const char *str, char **endptr);
extern int string_to_array__129633(const char *str, void *pValue, char **endptr);
extern int is_array__129633_allow_double_conversion();
extern int array__129633_to_double(const void *pValue, double *nValue);
extern int get_array__129633_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129633(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129633_default_value(void *pValue);
extern SimTypeUtils _Type_array__129633_Utils;

/****************************************************************
 ** struct__129636 
 ****************************************************************/
extern int struct__129636_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129636_string(const char *str, char **endptr);
extern int string_to_struct__129636(const char *str, void *pValue, char **endptr);
extern int is_struct__129636_allow_double_conversion();
extern int struct__129636_to_double(const void *pValue, double *nValue);
extern int get_struct__129636_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129636(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129636_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129636_Utils;

/****************************************************************
 ** struct__129641 
 ****************************************************************/
extern int struct__129641_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129641_string(const char *str, char **endptr);
extern int string_to_struct__129641(const char *str, void *pValue, char **endptr);
extern int is_struct__129641_allow_double_conversion();
extern int struct__129641_to_double(const void *pValue, double *nValue);
extern int get_struct__129641_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129641(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129641_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129641_Utils;

/****************************************************************
 ** array__129669 
 ****************************************************************/
extern int array__129669_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129669_string(const char *str, char **endptr);
extern int string_to_array__129669(const char *str, void *pValue, char **endptr);
extern int is_array__129669_allow_double_conversion();
extern int array__129669_to_double(const void *pValue, double *nValue);
extern int get_array__129669_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129669(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129669_default_value(void *pValue);
extern SimTypeUtils _Type_array__129669_Utils;

/****************************************************************
 ** struct__129672 
 ****************************************************************/
extern int struct__129672_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129672_string(const char *str, char **endptr);
extern int string_to_struct__129672(const char *str, void *pValue, char **endptr);
extern int is_struct__129672_allow_double_conversion();
extern int struct__129672_to_double(const void *pValue, double *nValue);
extern int get_struct__129672_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129672(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129672_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129672_Utils;

/****************************************************************
 ** array__129684 
 ****************************************************************/
extern int array__129684_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129684_string(const char *str, char **endptr);
extern int string_to_array__129684(const char *str, void *pValue, char **endptr);
extern int is_array__129684_allow_double_conversion();
extern int array__129684_to_double(const void *pValue, double *nValue);
extern int get_array__129684_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129684(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129684_default_value(void *pValue);
extern SimTypeUtils _Type_array__129684_Utils;

/****************************************************************
 ** struct__129687 
 ****************************************************************/
extern int struct__129687_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129687_string(const char *str, char **endptr);
extern int string_to_struct__129687(const char *str, void *pValue, char **endptr);
extern int is_struct__129687_allow_double_conversion();
extern int struct__129687_to_double(const void *pValue, double *nValue);
extern int get_struct__129687_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129687(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129687_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129687_Utils;

/****************************************************************
 ** array__129695 
 ****************************************************************/
extern int array__129695_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129695_string(const char *str, char **endptr);
extern int string_to_array__129695(const char *str, void *pValue, char **endptr);
extern int is_array__129695_allow_double_conversion();
extern int array__129695_to_double(const void *pValue, double *nValue);
extern int get_array__129695_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129695(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129695_default_value(void *pValue);
extern SimTypeUtils _Type_array__129695_Utils;

/****************************************************************
 ** struct__129698 
 ****************************************************************/
extern int struct__129698_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129698_string(const char *str, char **endptr);
extern int string_to_struct__129698(const char *str, void *pValue, char **endptr);
extern int is_struct__129698_allow_double_conversion();
extern int struct__129698_to_double(const void *pValue, double *nValue);
extern int get_struct__129698_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129698(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129698_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129698_Utils;

/****************************************************************
 ** array__129707 
 ****************************************************************/
extern int array__129707_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129707_string(const char *str, char **endptr);
extern int string_to_array__129707(const char *str, void *pValue, char **endptr);
extern int is_array__129707_allow_double_conversion();
extern int array__129707_to_double(const void *pValue, double *nValue);
extern int get_array__129707_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129707(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129707_default_value(void *pValue);
extern SimTypeUtils _Type_array__129707_Utils;

/****************************************************************
 ** struct__129710 
 ****************************************************************/
extern int struct__129710_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129710_string(const char *str, char **endptr);
extern int string_to_struct__129710(const char *str, void *pValue, char **endptr);
extern int is_struct__129710_allow_double_conversion();
extern int struct__129710_to_double(const void *pValue, double *nValue);
extern int get_struct__129710_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129710(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129710_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129710_Utils;

/****************************************************************
 ** struct__129718 
 ****************************************************************/
extern int struct__129718_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129718_string(const char *str, char **endptr);
extern int string_to_struct__129718(const char *str, void *pValue, char **endptr);
extern int is_struct__129718_allow_double_conversion();
extern int struct__129718_to_double(const void *pValue, double *nValue);
extern int get_struct__129718_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129718(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129718_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129718_Utils;

/****************************************************************
 ** array__129745 
 ****************************************************************/
extern int array__129745_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129745_string(const char *str, char **endptr);
extern int string_to_array__129745(const char *str, void *pValue, char **endptr);
extern int is_array__129745_allow_double_conversion();
extern int array__129745_to_double(const void *pValue, double *nValue);
extern int get_array__129745_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129745(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129745_default_value(void *pValue);
extern SimTypeUtils _Type_array__129745_Utils;

/****************************************************************
 ** struct__129748 
 ****************************************************************/
extern int struct__129748_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129748_string(const char *str, char **endptr);
extern int string_to_struct__129748(const char *str, void *pValue, char **endptr);
extern int is_struct__129748_allow_double_conversion();
extern int struct__129748_to_double(const void *pValue, double *nValue);
extern int get_struct__129748_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129748(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129748_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129748_Utils;

/****************************************************************
 ** struct__129756 
 ****************************************************************/
extern int struct__129756_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129756_string(const char *str, char **endptr);
extern int string_to_struct__129756(const char *str, void *pValue, char **endptr);
extern int is_struct__129756_allow_double_conversion();
extern int struct__129756_to_double(const void *pValue, double *nValue);
extern int get_struct__129756_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129756(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129756_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129756_Utils;

/****************************************************************
 ** struct__129762 
 ****************************************************************/
extern int struct__129762_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129762_string(const char *str, char **endptr);
extern int string_to_struct__129762(const char *str, void *pValue, char **endptr);
extern int is_struct__129762_allow_double_conversion();
extern int struct__129762_to_double(const void *pValue, double *nValue);
extern int get_struct__129762_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129762(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129762_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129762_Utils;

/****************************************************************
 ** array__129768 
 ****************************************************************/
extern int array__129768_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129768_string(const char *str, char **endptr);
extern int string_to_array__129768(const char *str, void *pValue, char **endptr);
extern int is_array__129768_allow_double_conversion();
extern int array__129768_to_double(const void *pValue, double *nValue);
extern int get_array__129768_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129768(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129768_default_value(void *pValue);
extern SimTypeUtils _Type_array__129768_Utils;

/****************************************************************
 ** struct__129771 
 ****************************************************************/
extern int struct__129771_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129771_string(const char *str, char **endptr);
extern int string_to_struct__129771(const char *str, void *pValue, char **endptr);
extern int is_struct__129771_allow_double_conversion();
extern int struct__129771_to_double(const void *pValue, double *nValue);
extern int get_struct__129771_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129771(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129771_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129771_Utils;

/****************************************************************
 ** array__129780 
 ****************************************************************/
extern int array__129780_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129780_string(const char *str, char **endptr);
extern int string_to_array__129780(const char *str, void *pValue, char **endptr);
extern int is_array__129780_allow_double_conversion();
extern int array__129780_to_double(const void *pValue, double *nValue);
extern int get_array__129780_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129780(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129780_default_value(void *pValue);
extern SimTypeUtils _Type_array__129780_Utils;

/****************************************************************
 ** struct__129783 
 ****************************************************************/
extern int struct__129783_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129783_string(const char *str, char **endptr);
extern int string_to_struct__129783(const char *str, void *pValue, char **endptr);
extern int is_struct__129783_allow_double_conversion();
extern int struct__129783_to_double(const void *pValue, double *nValue);
extern int get_struct__129783_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129783(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129783_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129783_Utils;

/****************************************************************
 ** struct__129790 
 ****************************************************************/
extern int struct__129790_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129790_string(const char *str, char **endptr);
extern int string_to_struct__129790(const char *str, void *pValue, char **endptr);
extern int is_struct__129790_allow_double_conversion();
extern int struct__129790_to_double(const void *pValue, double *nValue);
extern int get_struct__129790_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129790(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129790_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129790_Utils;

/****************************************************************
 ** array__129798 
 ****************************************************************/
extern int array__129798_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129798_string(const char *str, char **endptr);
extern int string_to_array__129798(const char *str, void *pValue, char **endptr);
extern int is_array__129798_allow_double_conversion();
extern int array__129798_to_double(const void *pValue, double *nValue);
extern int get_array__129798_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129798(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129798_default_value(void *pValue);
extern SimTypeUtils _Type_array__129798_Utils;

/****************************************************************
 ** struct__129801 
 ****************************************************************/
extern int struct__129801_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129801_string(const char *str, char **endptr);
extern int string_to_struct__129801(const char *str, void *pValue, char **endptr);
extern int is_struct__129801_allow_double_conversion();
extern int struct__129801_to_double(const void *pValue, double *nValue);
extern int get_struct__129801_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129801(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129801_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129801_Utils;

/****************************************************************
 ** array__129809 
 ****************************************************************/
extern int array__129809_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129809_string(const char *str, char **endptr);
extern int string_to_array__129809(const char *str, void *pValue, char **endptr);
extern int is_array__129809_allow_double_conversion();
extern int array__129809_to_double(const void *pValue, double *nValue);
extern int get_array__129809_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129809(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129809_default_value(void *pValue);
extern SimTypeUtils _Type_array__129809_Utils;

/****************************************************************
 ** struct__129812 
 ****************************************************************/
extern int struct__129812_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129812_string(const char *str, char **endptr);
extern int string_to_struct__129812(const char *str, void *pValue, char **endptr);
extern int is_struct__129812_allow_double_conversion();
extern int struct__129812_to_double(const void *pValue, double *nValue);
extern int get_struct__129812_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129812(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129812_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129812_Utils;

/****************************************************************
 ** struct__129823 
 ****************************************************************/
extern int struct__129823_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129823_string(const char *str, char **endptr);
extern int string_to_struct__129823(const char *str, void *pValue, char **endptr);
extern int is_struct__129823_allow_double_conversion();
extern int struct__129823_to_double(const void *pValue, double *nValue);
extern int get_struct__129823_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129823(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129823_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129823_Utils;

/****************************************************************
 ** struct__129829 
 ****************************************************************/
extern int struct__129829_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129829_string(const char *str, char **endptr);
extern int string_to_struct__129829(const char *str, void *pValue, char **endptr);
extern int is_struct__129829_allow_double_conversion();
extern int struct__129829_to_double(const void *pValue, double *nValue);
extern int get_struct__129829_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129829(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129829_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129829_Utils;

/****************************************************************
 ** array__129839 
 ****************************************************************/
extern int array__129839_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129839_string(const char *str, char **endptr);
extern int string_to_array__129839(const char *str, void *pValue, char **endptr);
extern int is_array__129839_allow_double_conversion();
extern int array__129839_to_double(const void *pValue, double *nValue);
extern int get_array__129839_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129839(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129839_default_value(void *pValue);
extern SimTypeUtils _Type_array__129839_Utils;

/****************************************************************
 ** struct__129842 
 ****************************************************************/
extern int struct__129842_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129842_string(const char *str, char **endptr);
extern int string_to_struct__129842(const char *str, void *pValue, char **endptr);
extern int is_struct__129842_allow_double_conversion();
extern int struct__129842_to_double(const void *pValue, double *nValue);
extern int get_struct__129842_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129842(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129842_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129842_Utils;

/****************************************************************
 ** array__129849 
 ****************************************************************/
extern int array__129849_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129849_string(const char *str, char **endptr);
extern int string_to_array__129849(const char *str, void *pValue, char **endptr);
extern int is_array__129849_allow_double_conversion();
extern int array__129849_to_double(const void *pValue, double *nValue);
extern int get_array__129849_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129849(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129849_default_value(void *pValue);
extern SimTypeUtils _Type_array__129849_Utils;

/****************************************************************
 ** struct__129852 
 ****************************************************************/
extern int struct__129852_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129852_string(const char *str, char **endptr);
extern int string_to_struct__129852(const char *str, void *pValue, char **endptr);
extern int is_struct__129852_allow_double_conversion();
extern int struct__129852_to_double(const void *pValue, double *nValue);
extern int get_struct__129852_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129852(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129852_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129852_Utils;

/****************************************************************
 ** struct__129861 
 ****************************************************************/
extern int struct__129861_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129861_string(const char *str, char **endptr);
extern int string_to_struct__129861(const char *str, void *pValue, char **endptr);
extern int is_struct__129861_allow_double_conversion();
extern int struct__129861_to_double(const void *pValue, double *nValue);
extern int get_struct__129861_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129861(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129861_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129861_Utils;

/****************************************************************
 ** array__129868 
 ****************************************************************/
extern int array__129868_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129868_string(const char *str, char **endptr);
extern int string_to_array__129868(const char *str, void *pValue, char **endptr);
extern int is_array__129868_allow_double_conversion();
extern int array__129868_to_double(const void *pValue, double *nValue);
extern int get_array__129868_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129868(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129868_default_value(void *pValue);
extern SimTypeUtils _Type_array__129868_Utils;

/****************************************************************
 ** struct__129871 
 ****************************************************************/
extern int struct__129871_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129871_string(const char *str, char **endptr);
extern int string_to_struct__129871(const char *str, void *pValue, char **endptr);
extern int is_struct__129871_allow_double_conversion();
extern int struct__129871_to_double(const void *pValue, double *nValue);
extern int get_struct__129871_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129871(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129871_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129871_Utils;

/****************************************************************
 ** array__129877 
 ****************************************************************/
extern int array__129877_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129877_string(const char *str, char **endptr);
extern int string_to_array__129877(const char *str, void *pValue, char **endptr);
extern int is_array__129877_allow_double_conversion();
extern int array__129877_to_double(const void *pValue, double *nValue);
extern int get_array__129877_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129877(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129877_default_value(void *pValue);
extern SimTypeUtils _Type_array__129877_Utils;

/****************************************************************
 ** struct__129880 
 ****************************************************************/
extern int struct__129880_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129880_string(const char *str, char **endptr);
extern int string_to_struct__129880(const char *str, void *pValue, char **endptr);
extern int is_struct__129880_allow_double_conversion();
extern int struct__129880_to_double(const void *pValue, double *nValue);
extern int get_struct__129880_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129880(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129880_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129880_Utils;

/****************************************************************
 ** array_int_66 
 ****************************************************************/
extern int array_int_66_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_66_string(const char *str, char **endptr);
extern int string_to_array_int_66(const char *str, void *pValue, char **endptr);
extern int is_array_int_66_allow_double_conversion();
extern int array_int_66_to_double(const void *pValue, double *nValue);
extern int get_array_int_66_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_66(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_66_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_66_Utils;

/****************************************************************
 ** struct__129890 
 ****************************************************************/
extern int struct__129890_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129890_string(const char *str, char **endptr);
extern int string_to_struct__129890(const char *str, void *pValue, char **endptr);
extern int is_struct__129890_allow_double_conversion();
extern int struct__129890_to_double(const void *pValue, double *nValue);
extern int get_struct__129890_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129890(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129890_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129890_Utils;

/****************************************************************
 ** struct__129916 
 ****************************************************************/
extern int struct__129916_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129916_string(const char *str, char **endptr);
extern int string_to_struct__129916(const char *str, void *pValue, char **endptr);
extern int is_struct__129916_allow_double_conversion();
extern int struct__129916_to_double(const void *pValue, double *nValue);
extern int get_struct__129916_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129916(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129916_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129916_Utils;

/****************************************************************
 ** struct__129925 
 ****************************************************************/
extern int struct__129925_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129925_string(const char *str, char **endptr);
extern int string_to_struct__129925(const char *str, void *pValue, char **endptr);
extern int is_struct__129925_allow_double_conversion();
extern int struct__129925_to_double(const void *pValue, double *nValue);
extern int get_struct__129925_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129925(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129925_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129925_Utils;

/****************************************************************
 ** struct__129942 
 ****************************************************************/
extern int struct__129942_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129942_string(const char *str, char **endptr);
extern int string_to_struct__129942(const char *str, void *pValue, char **endptr);
extern int is_struct__129942_allow_double_conversion();
extern int struct__129942_to_double(const void *pValue, double *nValue);
extern int get_struct__129942_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129942(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129942_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129942_Utils;

/****************************************************************
 ** array__129949 
 ****************************************************************/
extern int array__129949_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129949_string(const char *str, char **endptr);
extern int string_to_array__129949(const char *str, void *pValue, char **endptr);
extern int is_array__129949_allow_double_conversion();
extern int array__129949_to_double(const void *pValue, double *nValue);
extern int get_array__129949_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129949(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129949_default_value(void *pValue);
extern SimTypeUtils _Type_array__129949_Utils;

/****************************************************************
 ** array__129952 
 ****************************************************************/
extern int array__129952_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129952_string(const char *str, char **endptr);
extern int string_to_array__129952(const char *str, void *pValue, char **endptr);
extern int is_array__129952_allow_double_conversion();
extern int array__129952_to_double(const void *pValue, double *nValue);
extern int get_array__129952_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129952(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129952_default_value(void *pValue);
extern SimTypeUtils _Type_array__129952_Utils;

/****************************************************************
 ** struct__129955 
 ****************************************************************/
extern int struct__129955_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129955_string(const char *str, char **endptr);
extern int string_to_struct__129955(const char *str, void *pValue, char **endptr);
extern int is_struct__129955_allow_double_conversion();
extern int struct__129955_to_double(const void *pValue, double *nValue);
extern int get_struct__129955_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129955(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129955_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129955_Utils;

/****************************************************************
 ** array_int_24 
 ****************************************************************/
extern int array_int_24_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_24_string(const char *str, char **endptr);
extern int string_to_array_int_24(const char *str, void *pValue, char **endptr);
extern int is_array_int_24_allow_double_conversion();
extern int array_int_24_to_double(const void *pValue, double *nValue);
extern int get_array_int_24_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_24(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_24_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_24_Utils;

/****************************************************************
 ** struct__129985 
 ****************************************************************/
extern int struct__129985_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129985_string(const char *str, char **endptr);
extern int string_to_struct__129985(const char *str, void *pValue, char **endptr);
extern int is_struct__129985_allow_double_conversion();
extern int struct__129985_to_double(const void *pValue, double *nValue);
extern int get_struct__129985_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129985(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129985_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129985_Utils;

/****************************************************************
 ** array__129990 
 ****************************************************************/
extern int array__129990_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129990_string(const char *str, char **endptr);
extern int string_to_array__129990(const char *str, void *pValue, char **endptr);
extern int is_array__129990_allow_double_conversion();
extern int array__129990_to_double(const void *pValue, double *nValue);
extern int get_array__129990_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129990(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129990_default_value(void *pValue);
extern SimTypeUtils _Type_array__129990_Utils;

/****************************************************************
 ** array__129993 
 ****************************************************************/
extern int array__129993_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__129993_string(const char *str, char **endptr);
extern int string_to_array__129993(const char *str, void *pValue, char **endptr);
extern int is_array__129993_allow_double_conversion();
extern int array__129993_to_double(const void *pValue, double *nValue);
extern int get_array__129993_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__129993(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__129993_default_value(void *pValue);
extern SimTypeUtils _Type_array__129993_Utils;

/****************************************************************
 ** struct__129996 
 ****************************************************************/
extern int struct__129996_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__129996_string(const char *str, char **endptr);
extern int string_to_struct__129996(const char *str, void *pValue, char **endptr);
extern int is_struct__129996_allow_double_conversion();
extern int struct__129996_to_double(const void *pValue, double *nValue);
extern int get_struct__129996_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__129996(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__129996_default_value(void *pValue);
extern SimTypeUtils _Type_struct__129996_Utils;

/****************************************************************
 ** struct__130001 
 ****************************************************************/
extern int struct__130001_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130001_string(const char *str, char **endptr);
extern int string_to_struct__130001(const char *str, void *pValue, char **endptr);
extern int is_struct__130001_allow_double_conversion();
extern int struct__130001_to_double(const void *pValue, double *nValue);
extern int get_struct__130001_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130001(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130001_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130001_Utils;

/****************************************************************
 ** struct__130056 
 ****************************************************************/
extern int struct__130056_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130056_string(const char *str, char **endptr);
extern int string_to_struct__130056(const char *str, void *pValue, char **endptr);
extern int is_struct__130056_allow_double_conversion();
extern int struct__130056_to_double(const void *pValue, double *nValue);
extern int get_struct__130056_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130056(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130056_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130056_Utils;

/****************************************************************
 ** struct__130065 
 ****************************************************************/
extern int struct__130065_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130065_string(const char *str, char **endptr);
extern int string_to_struct__130065(const char *str, void *pValue, char **endptr);
extern int is_struct__130065_allow_double_conversion();
extern int struct__130065_to_double(const void *pValue, double *nValue);
extern int get_struct__130065_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130065(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130065_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130065_Utils;

/****************************************************************
 ** struct__130074 
 ****************************************************************/
extern int struct__130074_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130074_string(const char *str, char **endptr);
extern int string_to_struct__130074(const char *str, void *pValue, char **endptr);
extern int is_struct__130074_allow_double_conversion();
extern int struct__130074_to_double(const void *pValue, double *nValue);
extern int get_struct__130074_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130074(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130074_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130074_Utils;

/****************************************************************
 ** struct__130081 
 ****************************************************************/
extern int struct__130081_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130081_string(const char *str, char **endptr);
extern int string_to_struct__130081(const char *str, void *pValue, char **endptr);
extern int is_struct__130081_allow_double_conversion();
extern int struct__130081_to_double(const void *pValue, double *nValue);
extern int get_struct__130081_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130081(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130081_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130081_Utils;

/****************************************************************
 ** struct__130090 
 ****************************************************************/
extern int struct__130090_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130090_string(const char *str, char **endptr);
extern int string_to_struct__130090(const char *str, void *pValue, char **endptr);
extern int is_struct__130090_allow_double_conversion();
extern int struct__130090_to_double(const void *pValue, double *nValue);
extern int get_struct__130090_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130090(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130090_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130090_Utils;

/****************************************************************
 ** struct__130098 
 ****************************************************************/
extern int struct__130098_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130098_string(const char *str, char **endptr);
extern int string_to_struct__130098(const char *str, void *pValue, char **endptr);
extern int is_struct__130098_allow_double_conversion();
extern int struct__130098_to_double(const void *pValue, double *nValue);
extern int get_struct__130098_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130098(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130098_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130098_Utils;

/****************************************************************
 ** struct__130108 
 ****************************************************************/
extern int struct__130108_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130108_string(const char *str, char **endptr);
extern int string_to_struct__130108(const char *str, void *pValue, char **endptr);
extern int is_struct__130108_allow_double_conversion();
extern int struct__130108_to_double(const void *pValue, double *nValue);
extern int get_struct__130108_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130108(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130108_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130108_Utils;

/****************************************************************
 ** struct__130120 
 ****************************************************************/
extern int struct__130120_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130120_string(const char *str, char **endptr);
extern int string_to_struct__130120(const char *str, void *pValue, char **endptr);
extern int is_struct__130120_allow_double_conversion();
extern int struct__130120_to_double(const void *pValue, double *nValue);
extern int get_struct__130120_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130120(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130120_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130120_Utils;

/****************************************************************
 ** struct__130126 
 ****************************************************************/
extern int struct__130126_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130126_string(const char *str, char **endptr);
extern int string_to_struct__130126(const char *str, void *pValue, char **endptr);
extern int is_struct__130126_allow_double_conversion();
extern int struct__130126_to_double(const void *pValue, double *nValue);
extern int get_struct__130126_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130126(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130126_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130126_Utils;

/****************************************************************
 ** array_int_2_4 
 ****************************************************************/
extern int array_int_2_4_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_2_4_string(const char *str, char **endptr);
extern int string_to_array_int_2_4(const char *str, void *pValue, char **endptr);
extern int is_array_int_2_4_allow_double_conversion();
extern int array_int_2_4_to_double(const void *pValue, double *nValue);
extern int get_array_int_2_4_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_2_4(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_2_4_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_2_4_Utils;

/****************************************************************
 ** struct__130138 
 ****************************************************************/
extern int struct__130138_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130138_string(const char *str, char **endptr);
extern int string_to_struct__130138(const char *str, void *pValue, char **endptr);
extern int is_struct__130138_allow_double_conversion();
extern int struct__130138_to_double(const void *pValue, double *nValue);
extern int get_struct__130138_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130138(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130138_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130138_Utils;

/****************************************************************
 ** struct__130144 
 ****************************************************************/
extern int struct__130144_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130144_string(const char *str, char **endptr);
extern int string_to_struct__130144(const char *str, void *pValue, char **endptr);
extern int is_struct__130144_allow_double_conversion();
extern int struct__130144_to_double(const void *pValue, double *nValue);
extern int get_struct__130144_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130144(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130144_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130144_Utils;

/****************************************************************
 ** array__130151 
 ****************************************************************/
extern int array__130151_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130151_string(const char *str, char **endptr);
extern int string_to_array__130151(const char *str, void *pValue, char **endptr);
extern int is_array__130151_allow_double_conversion();
extern int array__130151_to_double(const void *pValue, double *nValue);
extern int get_array__130151_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130151(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130151_default_value(void *pValue);
extern SimTypeUtils _Type_array__130151_Utils;

/****************************************************************
 ** array_int_1 
 ****************************************************************/
extern int array_int_1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_1_string(const char *str, char **endptr);
extern int string_to_array_int_1(const char *str, void *pValue, char **endptr);
extern int is_array_int_1_allow_double_conversion();
extern int array_int_1_to_double(const void *pValue, double *nValue);
extern int get_array_int_1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_1_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_1_Utils;

/****************************************************************
 ** struct__130157 
 ****************************************************************/
extern int struct__130157_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130157_string(const char *str, char **endptr);
extern int string_to_struct__130157(const char *str, void *pValue, char **endptr);
extern int is_struct__130157_allow_double_conversion();
extern int struct__130157_to_double(const void *pValue, double *nValue);
extern int get_struct__130157_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130157(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130157_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130157_Utils;

/****************************************************************
 ** struct__130165 
 ****************************************************************/
extern int struct__130165_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130165_string(const char *str, char **endptr);
extern int string_to_struct__130165(const char *str, void *pValue, char **endptr);
extern int is_struct__130165_allow_double_conversion();
extern int struct__130165_to_double(const void *pValue, double *nValue);
extern int get_struct__130165_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130165(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130165_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130165_Utils;

/****************************************************************
 ** struct__130170 
 ****************************************************************/
extern int struct__130170_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130170_string(const char *str, char **endptr);
extern int string_to_struct__130170(const char *str, void *pValue, char **endptr);
extern int is_struct__130170_allow_double_conversion();
extern int struct__130170_to_double(const void *pValue, double *nValue);
extern int get_struct__130170_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130170(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130170_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130170_Utils;

/****************************************************************
 ** struct__130176 
 ****************************************************************/
extern int struct__130176_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130176_string(const char *str, char **endptr);
extern int string_to_struct__130176(const char *str, void *pValue, char **endptr);
extern int is_struct__130176_allow_double_conversion();
extern int struct__130176_to_double(const void *pValue, double *nValue);
extern int get_struct__130176_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130176(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130176_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130176_Utils;

/****************************************************************
 ** struct__130181 
 ****************************************************************/
extern int struct__130181_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130181_string(const char *str, char **endptr);
extern int string_to_struct__130181(const char *str, void *pValue, char **endptr);
extern int is_struct__130181_allow_double_conversion();
extern int struct__130181_to_double(const void *pValue, double *nValue);
extern int get_struct__130181_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130181(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130181_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130181_Utils;

/****************************************************************
 ** array__130187 
 ****************************************************************/
extern int array__130187_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130187_string(const char *str, char **endptr);
extern int string_to_array__130187(const char *str, void *pValue, char **endptr);
extern int is_array__130187_allow_double_conversion();
extern int array__130187_to_double(const void *pValue, double *nValue);
extern int get_array__130187_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130187(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130187_default_value(void *pValue);
extern SimTypeUtils _Type_array__130187_Utils;

/****************************************************************
 ** struct__130190 
 ****************************************************************/
extern int struct__130190_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130190_string(const char *str, char **endptr);
extern int string_to_struct__130190(const char *str, void *pValue, char **endptr);
extern int is_struct__130190_allow_double_conversion();
extern int struct__130190_to_double(const void *pValue, double *nValue);
extern int get_struct__130190_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130190(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130190_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130190_Utils;

/****************************************************************
 ** struct__130194 
 ****************************************************************/
extern int struct__130194_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130194_string(const char *str, char **endptr);
extern int string_to_struct__130194(const char *str, void *pValue, char **endptr);
extern int is_struct__130194_allow_double_conversion();
extern int struct__130194_to_double(const void *pValue, double *nValue);
extern int get_struct__130194_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130194(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130194_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130194_Utils;

/****************************************************************
 ** array__130199 
 ****************************************************************/
extern int array__130199_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130199_string(const char *str, char **endptr);
extern int string_to_array__130199(const char *str, void *pValue, char **endptr);
extern int is_array__130199_allow_double_conversion();
extern int array__130199_to_double(const void *pValue, double *nValue);
extern int get_array__130199_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130199(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130199_default_value(void *pValue);
extern SimTypeUtils _Type_array__130199_Utils;

/****************************************************************
 ** struct__130202 
 ****************************************************************/
extern int struct__130202_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130202_string(const char *str, char **endptr);
extern int string_to_struct__130202(const char *str, void *pValue, char **endptr);
extern int is_struct__130202_allow_double_conversion();
extern int struct__130202_to_double(const void *pValue, double *nValue);
extern int get_struct__130202_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130202(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130202_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130202_Utils;

/****************************************************************
 ** struct__130215 
 ****************************************************************/
extern int struct__130215_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130215_string(const char *str, char **endptr);
extern int string_to_struct__130215(const char *str, void *pValue, char **endptr);
extern int is_struct__130215_allow_double_conversion();
extern int struct__130215_to_double(const void *pValue, double *nValue);
extern int get_struct__130215_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130215(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130215_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130215_Utils;

/****************************************************************
 ** array__130221 
 ****************************************************************/
extern int array__130221_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130221_string(const char *str, char **endptr);
extern int string_to_array__130221(const char *str, void *pValue, char **endptr);
extern int is_array__130221_allow_double_conversion();
extern int array__130221_to_double(const void *pValue, double *nValue);
extern int get_array__130221_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130221(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130221_default_value(void *pValue);
extern SimTypeUtils _Type_array__130221_Utils;

/****************************************************************
 ** struct__130224 
 ****************************************************************/
extern int struct__130224_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130224_string(const char *str, char **endptr);
extern int string_to_struct__130224(const char *str, void *pValue, char **endptr);
extern int is_struct__130224_allow_double_conversion();
extern int struct__130224_to_double(const void *pValue, double *nValue);
extern int get_struct__130224_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130224(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130224_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130224_Utils;

/****************************************************************
 ** struct__130235 
 ****************************************************************/
extern int struct__130235_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130235_string(const char *str, char **endptr);
extern int string_to_struct__130235(const char *str, void *pValue, char **endptr);
extern int is_struct__130235_allow_double_conversion();
extern int struct__130235_to_double(const void *pValue, double *nValue);
extern int get_struct__130235_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130235(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130235_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130235_Utils;

/****************************************************************
 ** struct__130247 
 ****************************************************************/
extern int struct__130247_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130247_string(const char *str, char **endptr);
extern int string_to_struct__130247(const char *str, void *pValue, char **endptr);
extern int is_struct__130247_allow_double_conversion();
extern int struct__130247_to_double(const void *pValue, double *nValue);
extern int get_struct__130247_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130247(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130247_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130247_Utils;

/****************************************************************
 ** struct__130254 
 ****************************************************************/
extern int struct__130254_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130254_string(const char *str, char **endptr);
extern int string_to_struct__130254(const char *str, void *pValue, char **endptr);
extern int is_struct__130254_allow_double_conversion();
extern int struct__130254_to_double(const void *pValue, double *nValue);
extern int get_struct__130254_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130254(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130254_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130254_Utils;

/****************************************************************
 ** struct__130265 
 ****************************************************************/
extern int struct__130265_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130265_string(const char *str, char **endptr);
extern int string_to_struct__130265(const char *str, void *pValue, char **endptr);
extern int is_struct__130265_allow_double_conversion();
extern int struct__130265_to_double(const void *pValue, double *nValue);
extern int get_struct__130265_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130265(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130265_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130265_Utils;

/****************************************************************
 ** struct__130276 
 ****************************************************************/
extern int struct__130276_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130276_string(const char *str, char **endptr);
extern int string_to_struct__130276(const char *str, void *pValue, char **endptr);
extern int is_struct__130276_allow_double_conversion();
extern int struct__130276_to_double(const void *pValue, double *nValue);
extern int get_struct__130276_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130276(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130276_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130276_Utils;

/****************************************************************
 ** array__130283 
 ****************************************************************/
extern int array__130283_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130283_string(const char *str, char **endptr);
extern int string_to_array__130283(const char *str, void *pValue, char **endptr);
extern int is_array__130283_allow_double_conversion();
extern int array__130283_to_double(const void *pValue, double *nValue);
extern int get_array__130283_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130283(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130283_default_value(void *pValue);
extern SimTypeUtils _Type_array__130283_Utils;

/****************************************************************
 ** array__130286 
 ****************************************************************/
extern int array__130286_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130286_string(const char *str, char **endptr);
extern int string_to_array__130286(const char *str, void *pValue, char **endptr);
extern int is_array__130286_allow_double_conversion();
extern int array__130286_to_double(const void *pValue, double *nValue);
extern int get_array__130286_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130286(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130286_default_value(void *pValue);
extern SimTypeUtils _Type_array__130286_Utils;

/****************************************************************
 ** array__130289 
 ****************************************************************/
extern int array__130289_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130289_string(const char *str, char **endptr);
extern int string_to_array__130289(const char *str, void *pValue, char **endptr);
extern int is_array__130289_allow_double_conversion();
extern int array__130289_to_double(const void *pValue, double *nValue);
extern int get_array__130289_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130289(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130289_default_value(void *pValue);
extern SimTypeUtils _Type_array__130289_Utils;

/****************************************************************
 ** array__130292 
 ****************************************************************/
extern int array__130292_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130292_string(const char *str, char **endptr);
extern int string_to_array__130292(const char *str, void *pValue, char **endptr);
extern int is_array__130292_allow_double_conversion();
extern int array__130292_to_double(const void *pValue, double *nValue);
extern int get_array__130292_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130292(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130292_default_value(void *pValue);
extern SimTypeUtils _Type_array__130292_Utils;

/****************************************************************
 ** array__130295 
 ****************************************************************/
extern int array__130295_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130295_string(const char *str, char **endptr);
extern int string_to_array__130295(const char *str, void *pValue, char **endptr);
extern int is_array__130295_allow_double_conversion();
extern int array__130295_to_double(const void *pValue, double *nValue);
extern int get_array__130295_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130295(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130295_default_value(void *pValue);
extern SimTypeUtils _Type_array__130295_Utils;

/****************************************************************
 ** array_bool_256 
 ****************************************************************/
extern int array_bool_256_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_256_string(const char *str, char **endptr);
extern int string_to_array_bool_256(const char *str, void *pValue, char **endptr);
extern int is_array_bool_256_allow_double_conversion();
extern int array_bool_256_to_double(const void *pValue, double *nValue);
extern int get_array_bool_256_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_256(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_256_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_256_Utils;

/****************************************************************
 ** array_bool_256_46 
 ****************************************************************/
extern int array_bool_256_46_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_256_46_string(const char *str, char **endptr);
extern int string_to_array_bool_256_46(const char *str, void *pValue, char **endptr);
extern int is_array_bool_256_46_allow_double_conversion();
extern int array_bool_256_46_to_double(const void *pValue, double *nValue);
extern int get_array_bool_256_46_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_256_46(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_256_46_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_256_46_Utils;

/****************************************************************
 ** struct__130304 
 ****************************************************************/
extern int struct__130304_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130304_string(const char *str, char **endptr);
extern int string_to_struct__130304(const char *str, void *pValue, char **endptr);
extern int is_struct__130304_allow_double_conversion();
extern int struct__130304_to_double(const void *pValue, double *nValue);
extern int get_struct__130304_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130304(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130304_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130304_Utils;

/****************************************************************
 ** struct__130313 
 ****************************************************************/
extern int struct__130313_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130313_string(const char *str, char **endptr);
extern int string_to_struct__130313(const char *str, void *pValue, char **endptr);
extern int is_struct__130313_allow_double_conversion();
extern int struct__130313_to_double(const void *pValue, double *nValue);
extern int get_struct__130313_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130313(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130313_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130313_Utils;

/****************************************************************
 ** array__130320 
 ****************************************************************/
extern int array__130320_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130320_string(const char *str, char **endptr);
extern int string_to_array__130320(const char *str, void *pValue, char **endptr);
extern int is_array__130320_allow_double_conversion();
extern int array__130320_to_double(const void *pValue, double *nValue);
extern int get_array__130320_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130320(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130320_default_value(void *pValue);
extern SimTypeUtils _Type_array__130320_Utils;

/****************************************************************
 ** struct__130323 
 ****************************************************************/
extern int struct__130323_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130323_string(const char *str, char **endptr);
extern int string_to_struct__130323(const char *str, void *pValue, char **endptr);
extern int is_struct__130323_allow_double_conversion();
extern int struct__130323_to_double(const void *pValue, double *nValue);
extern int get_struct__130323_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130323(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130323_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130323_Utils;

/****************************************************************
 ** struct__130330 
 ****************************************************************/
extern int struct__130330_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130330_string(const char *str, char **endptr);
extern int string_to_struct__130330(const char *str, void *pValue, char **endptr);
extern int is_struct__130330_allow_double_conversion();
extern int struct__130330_to_double(const void *pValue, double *nValue);
extern int get_struct__130330_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130330(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130330_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130330_Utils;

/****************************************************************
 ** struct__130338 
 ****************************************************************/
extern int struct__130338_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130338_string(const char *str, char **endptr);
extern int string_to_struct__130338(const char *str, void *pValue, char **endptr);
extern int is_struct__130338_allow_double_conversion();
extern int struct__130338_to_double(const void *pValue, double *nValue);
extern int get_struct__130338_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130338(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130338_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130338_Utils;

/****************************************************************
 ** struct__130349 
 ****************************************************************/
extern int struct__130349_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130349_string(const char *str, char **endptr);
extern int string_to_struct__130349(const char *str, void *pValue, char **endptr);
extern int is_struct__130349_allow_double_conversion();
extern int struct__130349_to_double(const void *pValue, double *nValue);
extern int get_struct__130349_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130349(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130349_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130349_Utils;

/****************************************************************
 ** struct__130355 
 ****************************************************************/
extern int struct__130355_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130355_string(const char *str, char **endptr);
extern int string_to_struct__130355(const char *str, void *pValue, char **endptr);
extern int is_struct__130355_allow_double_conversion();
extern int struct__130355_to_double(const void *pValue, double *nValue);
extern int get_struct__130355_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130355(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130355_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130355_Utils;

/****************************************************************
 ** struct__130361 
 ****************************************************************/
extern int struct__130361_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130361_string(const char *str, char **endptr);
extern int string_to_struct__130361(const char *str, void *pValue, char **endptr);
extern int is_struct__130361_allow_double_conversion();
extern int struct__130361_to_double(const void *pValue, double *nValue);
extern int get_struct__130361_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130361(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130361_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130361_Utils;

/****************************************************************
 ** struct__130369 
 ****************************************************************/
extern int struct__130369_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130369_string(const char *str, char **endptr);
extern int string_to_struct__130369(const char *str, void *pValue, char **endptr);
extern int is_struct__130369_allow_double_conversion();
extern int struct__130369_to_double(const void *pValue, double *nValue);
extern int get_struct__130369_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130369(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130369_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130369_Utils;

/****************************************************************
 ** struct__130375 
 ****************************************************************/
extern int struct__130375_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130375_string(const char *str, char **endptr);
extern int string_to_struct__130375(const char *str, void *pValue, char **endptr);
extern int is_struct__130375_allow_double_conversion();
extern int struct__130375_to_double(const void *pValue, double *nValue);
extern int get_struct__130375_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130375(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130375_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130375_Utils;

/****************************************************************
 ** struct__130382 
 ****************************************************************/
extern int struct__130382_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130382_string(const char *str, char **endptr);
extern int string_to_struct__130382(const char *str, void *pValue, char **endptr);
extern int is_struct__130382_allow_double_conversion();
extern int struct__130382_to_double(const void *pValue, double *nValue);
extern int get_struct__130382_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130382(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130382_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130382_Utils;

/****************************************************************
 ** struct__130392 
 ****************************************************************/
extern int struct__130392_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130392_string(const char *str, char **endptr);
extern int string_to_struct__130392(const char *str, void *pValue, char **endptr);
extern int is_struct__130392_allow_double_conversion();
extern int struct__130392_to_double(const void *pValue, double *nValue);
extern int get_struct__130392_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130392(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130392_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130392_Utils;

/****************************************************************
 ** array__130403 
 ****************************************************************/
extern int array__130403_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130403_string(const char *str, char **endptr);
extern int string_to_array__130403(const char *str, void *pValue, char **endptr);
extern int is_array__130403_allow_double_conversion();
extern int array__130403_to_double(const void *pValue, double *nValue);
extern int get_array__130403_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130403(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130403_default_value(void *pValue);
extern SimTypeUtils _Type_array__130403_Utils;

/****************************************************************
 ** struct__130406 
 ****************************************************************/
extern int struct__130406_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130406_string(const char *str, char **endptr);
extern int string_to_struct__130406(const char *str, void *pValue, char **endptr);
extern int is_struct__130406_allow_double_conversion();
extern int struct__130406_to_double(const void *pValue, double *nValue);
extern int get_struct__130406_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130406(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130406_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130406_Utils;

/****************************************************************
 ** struct__130412 
 ****************************************************************/
extern int struct__130412_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130412_string(const char *str, char **endptr);
extern int string_to_struct__130412(const char *str, void *pValue, char **endptr);
extern int is_struct__130412_allow_double_conversion();
extern int struct__130412_to_double(const void *pValue, double *nValue);
extern int get_struct__130412_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130412(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130412_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130412_Utils;

/****************************************************************
 ** struct__130419 
 ****************************************************************/
extern int struct__130419_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130419_string(const char *str, char **endptr);
extern int string_to_struct__130419(const char *str, void *pValue, char **endptr);
extern int is_struct__130419_allow_double_conversion();
extern int struct__130419_to_double(const void *pValue, double *nValue);
extern int get_struct__130419_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130419(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130419_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130419_Utils;

/****************************************************************
 ** struct__130426 
 ****************************************************************/
extern int struct__130426_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130426_string(const char *str, char **endptr);
extern int string_to_struct__130426(const char *str, void *pValue, char **endptr);
extern int is_struct__130426_allow_double_conversion();
extern int struct__130426_to_double(const void *pValue, double *nValue);
extern int get_struct__130426_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130426(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130426_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130426_Utils;

/****************************************************************
 ** array_char_255 
 ****************************************************************/
extern int array_char_255_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_char_255_string(const char *str, char **endptr);
extern int string_to_array_char_255(const char *str, void *pValue, char **endptr);
extern int is_array_char_255_allow_double_conversion();
extern int array_char_255_to_double(const void *pValue, double *nValue);
extern int get_array_char_255_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_char_255(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_char_255_default_value(void *pValue);
extern SimTypeUtils _Type_array_char_255_Utils;

/****************************************************************
 ** struct__130435 
 ****************************************************************/
extern int struct__130435_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130435_string(const char *str, char **endptr);
extern int string_to_struct__130435(const char *str, void *pValue, char **endptr);
extern int is_struct__130435_allow_double_conversion();
extern int struct__130435_to_double(const void *pValue, double *nValue);
extern int get_struct__130435_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130435(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130435_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130435_Utils;

/****************************************************************
 ** struct__130445 
 ****************************************************************/
extern int struct__130445_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130445_string(const char *str, char **endptr);
extern int string_to_struct__130445(const char *str, void *pValue, char **endptr);
extern int is_struct__130445_allow_double_conversion();
extern int struct__130445_to_double(const void *pValue, double *nValue);
extern int get_struct__130445_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130445(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130445_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130445_Utils;

/****************************************************************
 ** struct__130457 
 ****************************************************************/
extern int struct__130457_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130457_string(const char *str, char **endptr);
extern int string_to_struct__130457(const char *str, void *pValue, char **endptr);
extern int is_struct__130457_allow_double_conversion();
extern int struct__130457_to_double(const void *pValue, double *nValue);
extern int get_struct__130457_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130457(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130457_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130457_Utils;

/****************************************************************
 ** array_char_9 
 ****************************************************************/
extern int array_char_9_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_char_9_string(const char *str, char **endptr);
extern int string_to_array_char_9(const char *str, void *pValue, char **endptr);
extern int is_array_char_9_allow_double_conversion();
extern int array_char_9_to_double(const void *pValue, double *nValue);
extern int get_array_char_9_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_char_9(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_char_9_default_value(void *pValue);
extern SimTypeUtils _Type_array_char_9_Utils;

/****************************************************************
 ** struct__130466 
 ****************************************************************/
extern int struct__130466_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130466_string(const char *str, char **endptr);
extern int string_to_struct__130466(const char *str, void *pValue, char **endptr);
extern int is_struct__130466_allow_double_conversion();
extern int struct__130466_to_double(const void *pValue, double *nValue);
extern int get_struct__130466_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130466(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130466_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130466_Utils;

/****************************************************************
 ** struct__130472 
 ****************************************************************/
extern int struct__130472_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130472_string(const char *str, char **endptr);
extern int string_to_struct__130472(const char *str, void *pValue, char **endptr);
extern int is_struct__130472_allow_double_conversion();
extern int struct__130472_to_double(const void *pValue, double *nValue);
extern int get_struct__130472_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130472(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130472_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130472_Utils;

/****************************************************************
 ** struct__130477 
 ****************************************************************/
extern int struct__130477_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130477_string(const char *str, char **endptr);
extern int string_to_struct__130477(const char *str, void *pValue, char **endptr);
extern int is_struct__130477_allow_double_conversion();
extern int struct__130477_to_double(const void *pValue, double *nValue);
extern int get_struct__130477_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130477(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130477_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130477_Utils;

/****************************************************************
 ** struct__130484 
 ****************************************************************/
extern int struct__130484_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130484_string(const char *str, char **endptr);
extern int string_to_struct__130484(const char *str, void *pValue, char **endptr);
extern int is_struct__130484_allow_double_conversion();
extern int struct__130484_to_double(const void *pValue, double *nValue);
extern int get_struct__130484_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130484(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130484_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130484_Utils;

/****************************************************************
 ** array_int_255 
 ****************************************************************/
extern int array_int_255_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_255_string(const char *str, char **endptr);
extern int string_to_array_int_255(const char *str, void *pValue, char **endptr);
extern int is_array_int_255_allow_double_conversion();
extern int array_int_255_to_double(const void *pValue, double *nValue);
extern int get_array_int_255_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_255(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_255_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_255_Utils;

/****************************************************************
 ** array_int_261 
 ****************************************************************/
extern int array_int_261_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_261_string(const char *str, char **endptr);
extern int string_to_array_int_261(const char *str, void *pValue, char **endptr);
extern int is_array_int_261_allow_double_conversion();
extern int array_int_261_to_double(const void *pValue, double *nValue);
extern int get_array_int_261_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_261(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_261_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_261_Utils;

/****************************************************************
 ** struct__130506 
 ****************************************************************/
extern int struct__130506_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130506_string(const char *str, char **endptr);
extern int string_to_struct__130506(const char *str, void *pValue, char **endptr);
extern int is_struct__130506_allow_double_conversion();
extern int struct__130506_to_double(const void *pValue, double *nValue);
extern int get_struct__130506_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130506(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130506_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130506_Utils;

/****************************************************************
 ** struct__130513 
 ****************************************************************/
extern int struct__130513_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130513_string(const char *str, char **endptr);
extern int string_to_struct__130513(const char *str, void *pValue, char **endptr);
extern int is_struct__130513_allow_double_conversion();
extern int struct__130513_to_double(const void *pValue, double *nValue);
extern int get_struct__130513_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130513(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130513_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130513_Utils;

/****************************************************************
 ** array_bool_114 
 ****************************************************************/
extern int array_bool_114_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_114_string(const char *str, char **endptr);
extern int string_to_array_bool_114(const char *str, void *pValue, char **endptr);
extern int is_array_bool_114_allow_double_conversion();
extern int array_bool_114_to_double(const void *pValue, double *nValue);
extern int get_array_bool_114_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_114(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_114_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_114_Utils;

/****************************************************************
 ** array_real_114 
 ****************************************************************/
extern int array_real_114_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_114_string(const char *str, char **endptr);
extern int string_to_array_real_114(const char *str, void *pValue, char **endptr);
extern int is_array_real_114_allow_double_conversion();
extern int array_real_114_to_double(const void *pValue, double *nValue);
extern int get_array_real_114_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_114(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_114_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_114_Utils;

/****************************************************************
 ** struct__130546 
 ****************************************************************/
extern int struct__130546_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130546_string(const char *str, char **endptr);
extern int string_to_struct__130546(const char *str, void *pValue, char **endptr);
extern int is_struct__130546_allow_double_conversion();
extern int struct__130546_to_double(const void *pValue, double *nValue);
extern int get_struct__130546_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130546(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130546_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130546_Utils;

/****************************************************************
 ** array__130553 
 ****************************************************************/
extern int array__130553_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130553_string(const char *str, char **endptr);
extern int string_to_array__130553(const char *str, void *pValue, char **endptr);
extern int is_array__130553_allow_double_conversion();
extern int array__130553_to_double(const void *pValue, double *nValue);
extern int get_array__130553_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130553(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130553_default_value(void *pValue);
extern SimTypeUtils _Type_array__130553_Utils;

/****************************************************************
 ** struct__130556 
 ****************************************************************/
extern int struct__130556_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130556_string(const char *str, char **endptr);
extern int string_to_struct__130556(const char *str, void *pValue, char **endptr);
extern int is_struct__130556_allow_double_conversion();
extern int struct__130556_to_double(const void *pValue, double *nValue);
extern int get_struct__130556_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130556(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130556_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130556_Utils;

/****************************************************************
 ** struct__130564 
 ****************************************************************/
extern int struct__130564_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130564_string(const char *str, char **endptr);
extern int string_to_struct__130564(const char *str, void *pValue, char **endptr);
extern int is_struct__130564_allow_double_conversion();
extern int struct__130564_to_double(const void *pValue, double *nValue);
extern int get_struct__130564_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130564(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130564_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130564_Utils;

/****************************************************************
 ** array__130570 
 ****************************************************************/
extern int array__130570_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130570_string(const char *str, char **endptr);
extern int string_to_array__130570(const char *str, void *pValue, char **endptr);
extern int is_array__130570_allow_double_conversion();
extern int array__130570_to_double(const void *pValue, double *nValue);
extern int get_array__130570_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130570(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130570_default_value(void *pValue);
extern SimTypeUtils _Type_array__130570_Utils;

/****************************************************************
 ** struct__130573 
 ****************************************************************/
extern int struct__130573_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130573_string(const char *str, char **endptr);
extern int string_to_struct__130573(const char *str, void *pValue, char **endptr);
extern int is_struct__130573_allow_double_conversion();
extern int struct__130573_to_double(const void *pValue, double *nValue);
extern int get_struct__130573_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130573(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130573_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130573_Utils;

/****************************************************************
 ** struct__130580 
 ****************************************************************/
extern int struct__130580_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130580_string(const char *str, char **endptr);
extern int string_to_struct__130580(const char *str, void *pValue, char **endptr);
extern int is_struct__130580_allow_double_conversion();
extern int struct__130580_to_double(const void *pValue, double *nValue);
extern int get_struct__130580_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130580(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130580_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130580_Utils;

/****************************************************************
 ** struct__130586 
 ****************************************************************/
extern int struct__130586_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130586_string(const char *str, char **endptr);
extern int string_to_struct__130586(const char *str, void *pValue, char **endptr);
extern int is_struct__130586_allow_double_conversion();
extern int struct__130586_to_double(const void *pValue, double *nValue);
extern int get_struct__130586_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130586(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130586_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130586_Utils;

/****************************************************************
 ** array__130592 
 ****************************************************************/
extern int array__130592_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130592_string(const char *str, char **endptr);
extern int string_to_array__130592(const char *str, void *pValue, char **endptr);
extern int is_array__130592_allow_double_conversion();
extern int array__130592_to_double(const void *pValue, double *nValue);
extern int get_array__130592_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130592(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130592_default_value(void *pValue);
extern SimTypeUtils _Type_array__130592_Utils;

/****************************************************************
 ** array__130595 
 ****************************************************************/
extern int array__130595_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130595_string(const char *str, char **endptr);
extern int string_to_array__130595(const char *str, void *pValue, char **endptr);
extern int is_array__130595_allow_double_conversion();
extern int array__130595_to_double(const void *pValue, double *nValue);
extern int get_array__130595_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130595(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130595_default_value(void *pValue);
extern SimTypeUtils _Type_array__130595_Utils;

/****************************************************************
 ** struct__130598 
 ****************************************************************/
extern int struct__130598_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130598_string(const char *str, char **endptr);
extern int string_to_struct__130598(const char *str, void *pValue, char **endptr);
extern int is_struct__130598_allow_double_conversion();
extern int struct__130598_to_double(const void *pValue, double *nValue);
extern int get_struct__130598_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130598(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130598_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130598_Utils;

/****************************************************************
 ** array__130606 
 ****************************************************************/
extern int array__130606_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130606_string(const char *str, char **endptr);
extern int string_to_array__130606(const char *str, void *pValue, char **endptr);
extern int is_array__130606_allow_double_conversion();
extern int array__130606_to_double(const void *pValue, double *nValue);
extern int get_array__130606_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130606(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130606_default_value(void *pValue);
extern SimTypeUtils _Type_array__130606_Utils;

/****************************************************************
 ** struct__130609 
 ****************************************************************/
extern int struct__130609_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130609_string(const char *str, char **endptr);
extern int string_to_struct__130609(const char *str, void *pValue, char **endptr);
extern int is_struct__130609_allow_double_conversion();
extern int struct__130609_to_double(const void *pValue, double *nValue);
extern int get_struct__130609_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130609(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130609_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130609_Utils;

/****************************************************************
 ** array_real_100 
 ****************************************************************/
extern int array_real_100_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_string(const char *str, char **endptr);
extern int string_to_array_real_100(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_allow_double_conversion();
extern int array_real_100_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_Utils;

/****************************************************************
 ** array_real_100_14 
 ****************************************************************/
extern int array_real_100_14_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_14_string(const char *str, char **endptr);
extern int string_to_array_real_100_14(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_14_allow_double_conversion();
extern int array_real_100_14_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_14_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_14(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_14_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_14_Utils;

/****************************************************************
 ** array_real_14 
 ****************************************************************/
extern int array_real_14_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_14_string(const char *str, char **endptr);
extern int string_to_array_real_14(const char *str, void *pValue, char **endptr);
extern int is_array_real_14_allow_double_conversion();
extern int array_real_14_to_double(const void *pValue, double *nValue);
extern int get_array_real_14_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_14(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_14_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_14_Utils;

/****************************************************************
 ** struct__130627 
 ****************************************************************/
extern int struct__130627_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130627_string(const char *str, char **endptr);
extern int string_to_struct__130627(const char *str, void *pValue, char **endptr);
extern int is_struct__130627_allow_double_conversion();
extern int struct__130627_to_double(const void *pValue, double *nValue);
extern int get_struct__130627_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130627(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130627_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130627_Utils;

/****************************************************************
 ** struct__130633 
 ****************************************************************/
extern int struct__130633_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130633_string(const char *str, char **endptr);
extern int string_to_struct__130633(const char *str, void *pValue, char **endptr);
extern int is_struct__130633_allow_double_conversion();
extern int struct__130633_to_double(const void *pValue, double *nValue);
extern int get_struct__130633_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130633(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130633_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130633_Utils;

/****************************************************************
 ** struct__130638 
 ****************************************************************/
extern int struct__130638_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130638_string(const char *str, char **endptr);
extern int string_to_struct__130638(const char *str, void *pValue, char **endptr);
extern int is_struct__130638_allow_double_conversion();
extern int struct__130638_to_double(const void *pValue, double *nValue);
extern int get_struct__130638_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130638(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130638_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130638_Utils;

/****************************************************************
 ** array_int_13 
 ****************************************************************/
extern int array_int_13_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_13_string(const char *str, char **endptr);
extern int string_to_array_int_13(const char *str, void *pValue, char **endptr);
extern int is_array_int_13_allow_double_conversion();
extern int array_int_13_to_double(const void *pValue, double *nValue);
extern int get_array_int_13_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_13(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_13_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_13_Utils;

/****************************************************************
 ** struct__130646 
 ****************************************************************/
extern int struct__130646_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130646_string(const char *str, char **endptr);
extern int string_to_struct__130646(const char *str, void *pValue, char **endptr);
extern int is_struct__130646_allow_double_conversion();
extern int struct__130646_to_double(const void *pValue, double *nValue);
extern int get_struct__130646_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130646(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130646_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130646_Utils;

/****************************************************************
 ** array_int_221 
 ****************************************************************/
extern int array_int_221_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_221_string(const char *str, char **endptr);
extern int string_to_array_int_221(const char *str, void *pValue, char **endptr);
extern int is_array_int_221_allow_double_conversion();
extern int array_int_221_to_double(const void *pValue, double *nValue);
extern int get_array_int_221_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_221(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_221_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_221_Utils;

/****************************************************************
 ** array_int_6_221 
 ****************************************************************/
extern int array_int_6_221_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_6_221_string(const char *str, char **endptr);
extern int string_to_array_int_6_221(const char *str, void *pValue, char **endptr);
extern int is_array_int_6_221_allow_double_conversion();
extern int array_int_6_221_to_double(const void *pValue, double *nValue);
extern int get_array_int_6_221_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_6_221(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_6_221_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_6_221_Utils;

/****************************************************************
 ** struct__130657 
 ****************************************************************/
extern int struct__130657_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130657_string(const char *str, char **endptr);
extern int string_to_struct__130657(const char *str, void *pValue, char **endptr);
extern int is_struct__130657_allow_double_conversion();
extern int struct__130657_to_double(const void *pValue, double *nValue);
extern int get_struct__130657_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130657(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130657_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130657_Utils;

/****************************************************************
 ** array_real_3 
 ****************************************************************/
extern int array_real_3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_3_string(const char *str, char **endptr);
extern int string_to_array_real_3(const char *str, void *pValue, char **endptr);
extern int is_array_real_3_allow_double_conversion();
extern int array_real_3_to_double(const void *pValue, double *nValue);
extern int get_array_real_3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_3_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_3_Utils;

/****************************************************************
 ** array_real_2 
 ****************************************************************/
extern int array_real_2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_2_string(const char *str, char **endptr);
extern int string_to_array_real_2(const char *str, void *pValue, char **endptr);
extern int is_array_real_2_allow_double_conversion();
extern int array_real_2_to_double(const void *pValue, double *nValue);
extern int get_array_real_2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_2_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_2_Utils;

/****************************************************************
 ** struct__130668 
 ****************************************************************/
extern int struct__130668_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130668_string(const char *str, char **endptr);
extern int string_to_struct__130668(const char *str, void *pValue, char **endptr);
extern int is_struct__130668_allow_double_conversion();
extern int struct__130668_to_double(const void *pValue, double *nValue);
extern int get_struct__130668_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130668(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130668_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130668_Utils;

/****************************************************************
 ** struct__130673 
 ****************************************************************/
extern int struct__130673_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130673_string(const char *str, char **endptr);
extern int string_to_struct__130673(const char *str, void *pValue, char **endptr);
extern int is_struct__130673_allow_double_conversion();
extern int struct__130673_to_double(const void *pValue, double *nValue);
extern int get_struct__130673_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130673(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130673_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130673_Utils;

/****************************************************************
 ** struct__130683 
 ****************************************************************/
extern int struct__130683_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130683_string(const char *str, char **endptr);
extern int string_to_struct__130683(const char *str, void *pValue, char **endptr);
extern int is_struct__130683_allow_double_conversion();
extern int struct__130683_to_double(const void *pValue, double *nValue);
extern int get_struct__130683_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130683(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130683_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130683_Utils;

/****************************************************************
 ** struct__130689 
 ****************************************************************/
extern int struct__130689_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130689_string(const char *str, char **endptr);
extern int string_to_struct__130689(const char *str, void *pValue, char **endptr);
extern int is_struct__130689_allow_double_conversion();
extern int struct__130689_to_double(const void *pValue, double *nValue);
extern int get_struct__130689_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130689(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130689_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130689_Utils;

/****************************************************************
 ** struct__130694 
 ****************************************************************/
extern int struct__130694_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130694_string(const char *str, char **endptr);
extern int string_to_struct__130694(const char *str, void *pValue, char **endptr);
extern int is_struct__130694_allow_double_conversion();
extern int struct__130694_to_double(const void *pValue, double *nValue);
extern int get_struct__130694_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130694(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130694_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130694_Utils;

/****************************************************************
 ** struct__130702 
 ****************************************************************/
extern int struct__130702_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130702_string(const char *str, char **endptr);
extern int string_to_struct__130702(const char *str, void *pValue, char **endptr);
extern int is_struct__130702_allow_double_conversion();
extern int struct__130702_to_double(const void *pValue, double *nValue);
extern int get_struct__130702_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130702(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130702_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130702_Utils;

/****************************************************************
 ** struct__130714 
 ****************************************************************/
extern int struct__130714_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130714_string(const char *str, char **endptr);
extern int string_to_struct__130714(const char *str, void *pValue, char **endptr);
extern int is_struct__130714_allow_double_conversion();
extern int struct__130714_to_double(const void *pValue, double *nValue);
extern int get_struct__130714_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130714(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130714_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130714_Utils;

/****************************************************************
 ** struct__130719 
 ****************************************************************/
extern int struct__130719_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130719_string(const char *str, char **endptr);
extern int string_to_struct__130719(const char *str, void *pValue, char **endptr);
extern int is_struct__130719_allow_double_conversion();
extern int struct__130719_to_double(const void *pValue, double *nValue);
extern int get_struct__130719_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130719(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130719_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130719_Utils;

/****************************************************************
 ** struct__130732 
 ****************************************************************/
extern int struct__130732_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130732_string(const char *str, char **endptr);
extern int string_to_struct__130732(const char *str, void *pValue, char **endptr);
extern int is_struct__130732_allow_double_conversion();
extern int struct__130732_to_double(const void *pValue, double *nValue);
extern int get_struct__130732_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130732(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130732_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130732_Utils;

/****************************************************************
 ** array__130738 
 ****************************************************************/
extern int array__130738_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130738_string(const char *str, char **endptr);
extern int string_to_array__130738(const char *str, void *pValue, char **endptr);
extern int is_array__130738_allow_double_conversion();
extern int array__130738_to_double(const void *pValue, double *nValue);
extern int get_array__130738_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130738(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130738_default_value(void *pValue);
extern SimTypeUtils _Type_array__130738_Utils;

/****************************************************************
 ** struct__130741 
 ****************************************************************/
extern int struct__130741_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130741_string(const char *str, char **endptr);
extern int string_to_struct__130741(const char *str, void *pValue, char **endptr);
extern int is_struct__130741_allow_double_conversion();
extern int struct__130741_to_double(const void *pValue, double *nValue);
extern int get_struct__130741_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130741(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130741_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130741_Utils;

/****************************************************************
 ** struct__130764 
 ****************************************************************/
extern int struct__130764_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130764_string(const char *str, char **endptr);
extern int string_to_struct__130764(const char *str, void *pValue, char **endptr);
extern int is_struct__130764_allow_double_conversion();
extern int struct__130764_to_double(const void *pValue, double *nValue);
extern int get_struct__130764_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130764(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130764_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130764_Utils;

/****************************************************************
 ** struct__130782 
 ****************************************************************/
extern int struct__130782_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130782_string(const char *str, char **endptr);
extern int string_to_struct__130782(const char *str, void *pValue, char **endptr);
extern int is_struct__130782_allow_double_conversion();
extern int struct__130782_to_double(const void *pValue, double *nValue);
extern int get_struct__130782_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130782(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130782_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130782_Utils;

/****************************************************************
 ** struct__130787 
 ****************************************************************/
extern int struct__130787_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130787_string(const char *str, char **endptr);
extern int string_to_struct__130787(const char *str, void *pValue, char **endptr);
extern int is_struct__130787_allow_double_conversion();
extern int struct__130787_to_double(const void *pValue, double *nValue);
extern int get_struct__130787_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130787(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130787_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130787_Utils;

/****************************************************************
 ** struct__130795 
 ****************************************************************/
extern int struct__130795_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130795_string(const char *str, char **endptr);
extern int string_to_struct__130795(const char *str, void *pValue, char **endptr);
extern int is_struct__130795_allow_double_conversion();
extern int struct__130795_to_double(const void *pValue, double *nValue);
extern int get_struct__130795_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130795(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130795_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130795_Utils;

/****************************************************************
 ** struct__130808 
 ****************************************************************/
extern int struct__130808_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130808_string(const char *str, char **endptr);
extern int string_to_struct__130808(const char *str, void *pValue, char **endptr);
extern int is_struct__130808_allow_double_conversion();
extern int struct__130808_to_double(const void *pValue, double *nValue);
extern int get_struct__130808_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130808(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130808_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130808_Utils;

/****************************************************************
 ** array_bool_14 
 ****************************************************************/
extern int array_bool_14_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_14_string(const char *str, char **endptr);
extern int string_to_array_bool_14(const char *str, void *pValue, char **endptr);
extern int is_array_bool_14_allow_double_conversion();
extern int array_bool_14_to_double(const void *pValue, double *nValue);
extern int get_array_bool_14_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_14(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_14_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_14_Utils;

/****************************************************************
 ** struct__130828 
 ****************************************************************/
extern int struct__130828_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130828_string(const char *str, char **endptr);
extern int string_to_struct__130828(const char *str, void *pValue, char **endptr);
extern int is_struct__130828_allow_double_conversion();
extern int struct__130828_to_double(const void *pValue, double *nValue);
extern int get_struct__130828_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130828(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130828_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130828_Utils;

/****************************************************************
 ** struct__130835 
 ****************************************************************/
extern int struct__130835_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130835_string(const char *str, char **endptr);
extern int string_to_struct__130835(const char *str, void *pValue, char **endptr);
extern int is_struct__130835_allow_double_conversion();
extern int struct__130835_to_double(const void *pValue, double *nValue);
extern int get_struct__130835_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130835(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130835_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130835_Utils;

/****************************************************************
 ** struct__130844 
 ****************************************************************/
extern int struct__130844_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130844_string(const char *str, char **endptr);
extern int string_to_struct__130844(const char *str, void *pValue, char **endptr);
extern int is_struct__130844_allow_double_conversion();
extern int struct__130844_to_double(const void *pValue, double *nValue);
extern int get_struct__130844_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130844(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130844_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130844_Utils;

/****************************************************************
 ** struct__130850 
 ****************************************************************/
extern int struct__130850_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130850_string(const char *str, char **endptr);
extern int string_to_struct__130850(const char *str, void *pValue, char **endptr);
extern int is_struct__130850_allow_double_conversion();
extern int struct__130850_to_double(const void *pValue, double *nValue);
extern int get_struct__130850_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130850(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130850_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130850_Utils;

/****************************************************************
 ** struct__130856 
 ****************************************************************/
extern int struct__130856_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130856_string(const char *str, char **endptr);
extern int string_to_struct__130856(const char *str, void *pValue, char **endptr);
extern int is_struct__130856_allow_double_conversion();
extern int struct__130856_to_double(const void *pValue, double *nValue);
extern int get_struct__130856_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130856(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130856_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130856_Utils;

/****************************************************************
 ** struct__130862 
 ****************************************************************/
extern int struct__130862_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130862_string(const char *str, char **endptr);
extern int string_to_struct__130862(const char *str, void *pValue, char **endptr);
extern int is_struct__130862_allow_double_conversion();
extern int struct__130862_to_double(const void *pValue, double *nValue);
extern int get_struct__130862_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130862(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130862_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130862_Utils;

/****************************************************************
 ** struct__130869 
 ****************************************************************/
extern int struct__130869_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130869_string(const char *str, char **endptr);
extern int string_to_struct__130869(const char *str, void *pValue, char **endptr);
extern int is_struct__130869_allow_double_conversion();
extern int struct__130869_to_double(const void *pValue, double *nValue);
extern int get_struct__130869_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130869(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130869_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130869_Utils;

/****************************************************************
 ** struct__130877 
 ****************************************************************/
extern int struct__130877_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130877_string(const char *str, char **endptr);
extern int string_to_struct__130877(const char *str, void *pValue, char **endptr);
extern int is_struct__130877_allow_double_conversion();
extern int struct__130877_to_double(const void *pValue, double *nValue);
extern int get_struct__130877_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130877(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130877_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130877_Utils;

/****************************************************************
 ** struct__130886 
 ****************************************************************/
extern int struct__130886_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130886_string(const char *str, char **endptr);
extern int string_to_struct__130886(const char *str, void *pValue, char **endptr);
extern int is_struct__130886_allow_double_conversion();
extern int struct__130886_to_double(const void *pValue, double *nValue);
extern int get_struct__130886_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130886(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130886_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130886_Utils;

/****************************************************************
 ** struct__130898 
 ****************************************************************/
extern int struct__130898_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130898_string(const char *str, char **endptr);
extern int string_to_struct__130898(const char *str, void *pValue, char **endptr);
extern int is_struct__130898_allow_double_conversion();
extern int struct__130898_to_double(const void *pValue, double *nValue);
extern int get_struct__130898_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130898(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130898_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130898_Utils;

/****************************************************************
 ** struct__130904 
 ****************************************************************/
extern int struct__130904_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130904_string(const char *str, char **endptr);
extern int string_to_struct__130904(const char *str, void *pValue, char **endptr);
extern int is_struct__130904_allow_double_conversion();
extern int struct__130904_to_double(const void *pValue, double *nValue);
extern int get_struct__130904_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130904(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130904_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130904_Utils;

/****************************************************************
 ** struct__130910 
 ****************************************************************/
extern int struct__130910_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130910_string(const char *str, char **endptr);
extern int string_to_struct__130910(const char *str, void *pValue, char **endptr);
extern int is_struct__130910_allow_double_conversion();
extern int struct__130910_to_double(const void *pValue, double *nValue);
extern int get_struct__130910_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130910(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130910_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130910_Utils;

/****************************************************************
 ** array_int_65 
 ****************************************************************/
extern int array_int_65_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_65_string(const char *str, char **endptr);
extern int string_to_array_int_65(const char *str, void *pValue, char **endptr);
extern int is_array_int_65_allow_double_conversion();
extern int array_int_65_to_double(const void *pValue, double *nValue);
extern int get_array_int_65_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_65(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_65_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_65_Utils;

/****************************************************************
 ** array_int_67 
 ****************************************************************/
extern int array_int_67_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_67_string(const char *str, char **endptr);
extern int string_to_array_int_67(const char *str, void *pValue, char **endptr);
extern int is_array_int_67_allow_double_conversion();
extern int array_int_67_to_double(const void *pValue, double *nValue);
extern int get_array_int_67_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_67(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_67_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_67_Utils;

/****************************************************************
 ** struct__130928 
 ****************************************************************/
extern int struct__130928_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130928_string(const char *str, char **endptr);
extern int string_to_struct__130928(const char *str, void *pValue, char **endptr);
extern int is_struct__130928_allow_double_conversion();
extern int struct__130928_to_double(const void *pValue, double *nValue);
extern int get_struct__130928_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130928(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130928_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130928_Utils;

/****************************************************************
 ** struct__130934 
 ****************************************************************/
extern int struct__130934_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130934_string(const char *str, char **endptr);
extern int string_to_struct__130934(const char *str, void *pValue, char **endptr);
extern int is_struct__130934_allow_double_conversion();
extern int struct__130934_to_double(const void *pValue, double *nValue);
extern int get_struct__130934_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130934(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130934_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130934_Utils;

/****************************************************************
 ** struct__130940 
 ****************************************************************/
extern int struct__130940_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130940_string(const char *str, char **endptr);
extern int string_to_struct__130940(const char *str, void *pValue, char **endptr);
extern int is_struct__130940_allow_double_conversion();
extern int struct__130940_to_double(const void *pValue, double *nValue);
extern int get_struct__130940_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130940(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130940_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130940_Utils;

/****************************************************************
 ** array_int_129 
 ****************************************************************/
extern int array_int_129_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_129_string(const char *str, char **endptr);
extern int string_to_array_int_129(const char *str, void *pValue, char **endptr);
extern int is_array_int_129_allow_double_conversion();
extern int array_int_129_to_double(const void *pValue, double *nValue);
extern int get_array_int_129_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_129(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_129_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_129_Utils;

/****************************************************************
 ** array__130953 
 ****************************************************************/
extern int array__130953_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130953_string(const char *str, char **endptr);
extern int string_to_array__130953(const char *str, void *pValue, char **endptr);
extern int is_array__130953_allow_double_conversion();
extern int array__130953_to_double(const void *pValue, double *nValue);
extern int get_array__130953_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130953(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130953_default_value(void *pValue);
extern SimTypeUtils _Type_array__130953_Utils;

/****************************************************************
 ** struct__130956 
 ****************************************************************/
extern int struct__130956_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130956_string(const char *str, char **endptr);
extern int string_to_struct__130956(const char *str, void *pValue, char **endptr);
extern int is_struct__130956_allow_double_conversion();
extern int struct__130956_to_double(const void *pValue, double *nValue);
extern int get_struct__130956_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130956(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130956_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130956_Utils;

/****************************************************************
 ** array__130961 
 ****************************************************************/
extern int array__130961_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130961_string(const char *str, char **endptr);
extern int string_to_array__130961(const char *str, void *pValue, char **endptr);
extern int is_array__130961_allow_double_conversion();
extern int array__130961_to_double(const void *pValue, double *nValue);
extern int get_array__130961_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130961(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130961_default_value(void *pValue);
extern SimTypeUtils _Type_array__130961_Utils;

/****************************************************************
 ** struct__130964 
 ****************************************************************/
extern int struct__130964_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130964_string(const char *str, char **endptr);
extern int string_to_struct__130964(const char *str, void *pValue, char **endptr);
extern int is_struct__130964_allow_double_conversion();
extern int struct__130964_to_double(const void *pValue, double *nValue);
extern int get_struct__130964_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130964(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130964_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130964_Utils;

/****************************************************************
 ** struct__130969 
 ****************************************************************/
extern int struct__130969_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130969_string(const char *str, char **endptr);
extern int string_to_struct__130969(const char *str, void *pValue, char **endptr);
extern int is_struct__130969_allow_double_conversion();
extern int struct__130969_to_double(const void *pValue, double *nValue);
extern int get_struct__130969_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130969(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130969_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130969_Utils;

/****************************************************************
 ** array__130974 
 ****************************************************************/
extern int array__130974_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__130974_string(const char *str, char **endptr);
extern int string_to_array__130974(const char *str, void *pValue, char **endptr);
extern int is_array__130974_allow_double_conversion();
extern int array__130974_to_double(const void *pValue, double *nValue);
extern int get_array__130974_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__130974(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__130974_default_value(void *pValue);
extern SimTypeUtils _Type_array__130974_Utils;

/****************************************************************
 ** struct__130977 
 ****************************************************************/
extern int struct__130977_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130977_string(const char *str, char **endptr);
extern int string_to_struct__130977(const char *str, void *pValue, char **endptr);
extern int is_struct__130977_allow_double_conversion();
extern int struct__130977_to_double(const void *pValue, double *nValue);
extern int get_struct__130977_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130977(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130977_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130977_Utils;

/****************************************************************
 ** struct__130982 
 ****************************************************************/
extern int struct__130982_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130982_string(const char *str, char **endptr);
extern int string_to_struct__130982(const char *str, void *pValue, char **endptr);
extern int is_struct__130982_allow_double_conversion();
extern int struct__130982_to_double(const void *pValue, double *nValue);
extern int get_struct__130982_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130982(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130982_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130982_Utils;

/****************************************************************
 ** array_int_325 
 ****************************************************************/
extern int array_int_325_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_325_string(const char *str, char **endptr);
extern int string_to_array_int_325(const char *str, void *pValue, char **endptr);
extern int is_array_int_325_allow_double_conversion();
extern int array_int_325_to_double(const void *pValue, double *nValue);
extern int get_array_int_325_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_325(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_325_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_325_Utils;

/****************************************************************
 ** array_int_262 
 ****************************************************************/
extern int array_int_262_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_262_string(const char *str, char **endptr);
extern int string_to_array_int_262(const char *str, void *pValue, char **endptr);
extern int is_array_int_262_allow_double_conversion();
extern int array_int_262_to_double(const void *pValue, double *nValue);
extern int get_array_int_262_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_262(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_262_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_262_Utils;

/****************************************************************
 ** struct__130996 
 ****************************************************************/
extern int struct__130996_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__130996_string(const char *str, char **endptr);
extern int string_to_struct__130996(const char *str, void *pValue, char **endptr);
extern int is_struct__130996_allow_double_conversion();
extern int struct__130996_to_double(const void *pValue, double *nValue);
extern int get_struct__130996_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__130996(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__130996_default_value(void *pValue);
extern SimTypeUtils _Type_struct__130996_Utils;

/****************************************************************
 ** struct__131007 
 ****************************************************************/
extern int struct__131007_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131007_string(const char *str, char **endptr);
extern int string_to_struct__131007(const char *str, void *pValue, char **endptr);
extern int is_struct__131007_allow_double_conversion();
extern int struct__131007_to_double(const void *pValue, double *nValue);
extern int get_struct__131007_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131007(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131007_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131007_Utils;

/****************************************************************
 ** struct__131040 
 ****************************************************************/
extern int struct__131040_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131040_string(const char *str, char **endptr);
extern int string_to_struct__131040(const char *str, void *pValue, char **endptr);
extern int is_struct__131040_allow_double_conversion();
extern int struct__131040_to_double(const void *pValue, double *nValue);
extern int get_struct__131040_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131040(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131040_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131040_Utils;

/****************************************************************
 ** struct__131046 
 ****************************************************************/
extern int struct__131046_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131046_string(const char *str, char **endptr);
extern int string_to_struct__131046(const char *str, void *pValue, char **endptr);
extern int is_struct__131046_allow_double_conversion();
extern int struct__131046_to_double(const void *pValue, double *nValue);
extern int get_struct__131046_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131046(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131046_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131046_Utils;

/****************************************************************
 ** struct__131072 
 ****************************************************************/
extern int struct__131072_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131072_string(const char *str, char **endptr);
extern int string_to_struct__131072(const char *str, void *pValue, char **endptr);
extern int is_struct__131072_allow_double_conversion();
extern int struct__131072_to_double(const void *pValue, double *nValue);
extern int get_struct__131072_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131072(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131072_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131072_Utils;

/****************************************************************
 ** struct__131092 
 ****************************************************************/
extern int struct__131092_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131092_string(const char *str, char **endptr);
extern int string_to_struct__131092(const char *str, void *pValue, char **endptr);
extern int is_struct__131092_allow_double_conversion();
extern int struct__131092_to_double(const void *pValue, double *nValue);
extern int get_struct__131092_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131092(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131092_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131092_Utils;

/****************************************************************
 ** struct__131099 
 ****************************************************************/
extern int struct__131099_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131099_string(const char *str, char **endptr);
extern int string_to_struct__131099(const char *str, void *pValue, char **endptr);
extern int is_struct__131099_allow_double_conversion();
extern int struct__131099_to_double(const void *pValue, double *nValue);
extern int get_struct__131099_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131099(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131099_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131099_Utils;

/****************************************************************
 ** struct__131104 
 ****************************************************************/
extern int struct__131104_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131104_string(const char *str, char **endptr);
extern int string_to_struct__131104(const char *str, void *pValue, char **endptr);
extern int is_struct__131104_allow_double_conversion();
extern int struct__131104_to_double(const void *pValue, double *nValue);
extern int get_struct__131104_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131104(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131104_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131104_Utils;

/****************************************************************
 ** struct__131109 
 ****************************************************************/
extern int struct__131109_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131109_string(const char *str, char **endptr);
extern int string_to_struct__131109(const char *str, void *pValue, char **endptr);
extern int is_struct__131109_allow_double_conversion();
extern int struct__131109_to_double(const void *pValue, double *nValue);
extern int get_struct__131109_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131109(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131109_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131109_Utils;

/****************************************************************
 ** struct__131117 
 ****************************************************************/
extern int struct__131117_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131117_string(const char *str, char **endptr);
extern int string_to_struct__131117(const char *str, void *pValue, char **endptr);
extern int is_struct__131117_allow_double_conversion();
extern int struct__131117_to_double(const void *pValue, double *nValue);
extern int get_struct__131117_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131117(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131117_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131117_Utils;

/****************************************************************
 ** struct__131124 
 ****************************************************************/
extern int struct__131124_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131124_string(const char *str, char **endptr);
extern int string_to_struct__131124(const char *str, void *pValue, char **endptr);
extern int is_struct__131124_allow_double_conversion();
extern int struct__131124_to_double(const void *pValue, double *nValue);
extern int get_struct__131124_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131124(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131124_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131124_Utils;

/****************************************************************
 ** struct__131129 
 ****************************************************************/
extern int struct__131129_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131129_string(const char *str, char **endptr);
extern int string_to_struct__131129(const char *str, void *pValue, char **endptr);
extern int is_struct__131129_allow_double_conversion();
extern int struct__131129_to_double(const void *pValue, double *nValue);
extern int get_struct__131129_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131129(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131129_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131129_Utils;

/****************************************************************
 ** struct__131138 
 ****************************************************************/
extern int struct__131138_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131138_string(const char *str, char **endptr);
extern int string_to_struct__131138(const char *str, void *pValue, char **endptr);
extern int is_struct__131138_allow_double_conversion();
extern int struct__131138_to_double(const void *pValue, double *nValue);
extern int get_struct__131138_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131138(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131138_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131138_Utils;

/****************************************************************
 ** struct__131147 
 ****************************************************************/
extern int struct__131147_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131147_string(const char *str, char **endptr);
extern int string_to_struct__131147(const char *str, void *pValue, char **endptr);
extern int is_struct__131147_allow_double_conversion();
extern int struct__131147_to_double(const void *pValue, double *nValue);
extern int get_struct__131147_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131147(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131147_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131147_Utils;

/****************************************************************
 ** struct__131156 
 ****************************************************************/
extern int struct__131156_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131156_string(const char *str, char **endptr);
extern int string_to_struct__131156(const char *str, void *pValue, char **endptr);
extern int is_struct__131156_allow_double_conversion();
extern int struct__131156_to_double(const void *pValue, double *nValue);
extern int get_struct__131156_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131156(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131156_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131156_Utils;

/****************************************************************
 ** array__131162 
 ****************************************************************/
extern int array__131162_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131162_string(const char *str, char **endptr);
extern int string_to_array__131162(const char *str, void *pValue, char **endptr);
extern int is_array__131162_allow_double_conversion();
extern int array__131162_to_double(const void *pValue, double *nValue);
extern int get_array__131162_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131162(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131162_default_value(void *pValue);
extern SimTypeUtils _Type_array__131162_Utils;

/****************************************************************
 ** struct__131165 
 ****************************************************************/
extern int struct__131165_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131165_string(const char *str, char **endptr);
extern int string_to_struct__131165(const char *str, void *pValue, char **endptr);
extern int is_struct__131165_allow_double_conversion();
extern int struct__131165_to_double(const void *pValue, double *nValue);
extern int get_struct__131165_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131165(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131165_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131165_Utils;

/****************************************************************
 ** struct__131172 
 ****************************************************************/
extern int struct__131172_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131172_string(const char *str, char **endptr);
extern int string_to_struct__131172(const char *str, void *pValue, char **endptr);
extern int is_struct__131172_allow_double_conversion();
extern int struct__131172_to_double(const void *pValue, double *nValue);
extern int get_struct__131172_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131172(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131172_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131172_Utils;

/****************************************************************
 ** struct__131189 
 ****************************************************************/
extern int struct__131189_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131189_string(const char *str, char **endptr);
extern int string_to_struct__131189(const char *str, void *pValue, char **endptr);
extern int is_struct__131189_allow_double_conversion();
extern int struct__131189_to_double(const void *pValue, double *nValue);
extern int get_struct__131189_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131189(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131189_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131189_Utils;

/****************************************************************
 ** struct__131201 
 ****************************************************************/
extern int struct__131201_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131201_string(const char *str, char **endptr);
extern int string_to_struct__131201(const char *str, void *pValue, char **endptr);
extern int is_struct__131201_allow_double_conversion();
extern int struct__131201_to_double(const void *pValue, double *nValue);
extern int get_struct__131201_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131201(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131201_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131201_Utils;

/****************************************************************
 ** array__131209 
 ****************************************************************/
extern int array__131209_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131209_string(const char *str, char **endptr);
extern int string_to_array__131209(const char *str, void *pValue, char **endptr);
extern int is_array__131209_allow_double_conversion();
extern int array__131209_to_double(const void *pValue, double *nValue);
extern int get_array__131209_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131209(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131209_default_value(void *pValue);
extern SimTypeUtils _Type_array__131209_Utils;

/****************************************************************
 ** struct__131212 
 ****************************************************************/
extern int struct__131212_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131212_string(const char *str, char **endptr);
extern int string_to_struct__131212(const char *str, void *pValue, char **endptr);
extern int is_struct__131212_allow_double_conversion();
extern int struct__131212_to_double(const void *pValue, double *nValue);
extern int get_struct__131212_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131212(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131212_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131212_Utils;

/****************************************************************
 ** struct__131220 
 ****************************************************************/
extern int struct__131220_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131220_string(const char *str, char **endptr);
extern int string_to_struct__131220(const char *str, void *pValue, char **endptr);
extern int is_struct__131220_allow_double_conversion();
extern int struct__131220_to_double(const void *pValue, double *nValue);
extern int get_struct__131220_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131220(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131220_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131220_Utils;

/****************************************************************
 ** array_bool_30 
 ****************************************************************/
extern int array_bool_30_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_30_string(const char *str, char **endptr);
extern int string_to_array_bool_30(const char *str, void *pValue, char **endptr);
extern int is_array_bool_30_allow_double_conversion();
extern int array_bool_30_to_double(const void *pValue, double *nValue);
extern int get_array_bool_30_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_30(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_30_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_30_Utils;

/****************************************************************
 ** array_bool_4 
 ****************************************************************/
extern int array_bool_4_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_4_string(const char *str, char **endptr);
extern int string_to_array_bool_4(const char *str, void *pValue, char **endptr);
extern int is_array_bool_4_allow_double_conversion();
extern int array_bool_4_to_double(const void *pValue, double *nValue);
extern int get_array_bool_4_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_4(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_4_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_4_Utils;

/****************************************************************
 ** struct__131240 
 ****************************************************************/
extern int struct__131240_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131240_string(const char *str, char **endptr);
extern int string_to_struct__131240(const char *str, void *pValue, char **endptr);
extern int is_struct__131240_allow_double_conversion();
extern int struct__131240_to_double(const void *pValue, double *nValue);
extern int get_struct__131240_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131240(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131240_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131240_Utils;

/****************************************************************
 ** array_bool_1 
 ****************************************************************/
extern int array_bool_1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_1_string(const char *str, char **endptr);
extern int string_to_array_bool_1(const char *str, void *pValue, char **endptr);
extern int is_array_bool_1_allow_double_conversion();
extern int array_bool_1_to_double(const void *pValue, double *nValue);
extern int get_array_bool_1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_1_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_1_Utils;

/****************************************************************
 ** array_real_1 
 ****************************************************************/
extern int array_real_1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_1_string(const char *str, char **endptr);
extern int string_to_array_real_1(const char *str, void *pValue, char **endptr);
extern int is_array_real_1_allow_double_conversion();
extern int array_real_1_to_double(const void *pValue, double *nValue);
extern int get_array_real_1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_1_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_1_Utils;

/****************************************************************
 ** array__131251 
 ****************************************************************/
extern int array__131251_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131251_string(const char *str, char **endptr);
extern int string_to_array__131251(const char *str, void *pValue, char **endptr);
extern int is_array__131251_allow_double_conversion();
extern int array__131251_to_double(const void *pValue, double *nValue);
extern int get_array__131251_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131251(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131251_default_value(void *pValue);
extern SimTypeUtils _Type_array__131251_Utils;

/****************************************************************
 ** array_real_100_1 
 ****************************************************************/
extern int array_real_100_1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_1_string(const char *str, char **endptr);
extern int string_to_array_real_100_1(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_1_allow_double_conversion();
extern int array_real_100_1_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_1_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_1_Utils;

/****************************************************************
 ** array_real_100_13 
 ****************************************************************/
extern int array_real_100_13_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_13_string(const char *str, char **endptr);
extern int string_to_array_real_100_13(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_13_allow_double_conversion();
extern int array_real_100_13_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_13_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_13(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_13_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_13_Utils;

/****************************************************************
 ** array_real_13 
 ****************************************************************/
extern int array_real_13_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_13_string(const char *str, char **endptr);
extern int string_to_array_real_13(const char *str, void *pValue, char **endptr);
extern int is_array_real_13_allow_double_conversion();
extern int array_real_13_to_double(const void *pValue, double *nValue);
extern int get_array_real_13_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_13(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_13_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_13_Utils;

/****************************************************************
 ** array_real_8 
 ****************************************************************/
extern int array_real_8_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_8_string(const char *str, char **endptr);
extern int string_to_array_real_8(const char *str, void *pValue, char **endptr);
extern int is_array_real_8_allow_double_conversion();
extern int array_real_8_to_double(const void *pValue, double *nValue);
extern int get_array_real_8_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_8(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_8_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_8_Utils;

/****************************************************************
 ** array_real_100_8 
 ****************************************************************/
extern int array_real_100_8_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_8_string(const char *str, char **endptr);
extern int string_to_array_real_100_8(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_8_allow_double_conversion();
extern int array_real_100_8_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_8_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_8(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_8_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_8_Utils;

/****************************************************************
 ** array_real_100_6 
 ****************************************************************/
extern int array_real_100_6_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_100_6_string(const char *str, char **endptr);
extern int string_to_array_real_100_6(const char *str, void *pValue, char **endptr);
extern int is_array_real_100_6_allow_double_conversion();
extern int array_real_100_6_to_double(const void *pValue, double *nValue);
extern int get_array_real_100_6_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_100_6(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_100_6_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_100_6_Utils;

/****************************************************************
 ** array_real_6 
 ****************************************************************/
extern int array_real_6_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_6_string(const char *str, char **endptr);
extern int string_to_array_real_6(const char *str, void *pValue, char **endptr);
extern int is_array_real_6_allow_double_conversion();
extern int array_real_6_to_double(const void *pValue, double *nValue);
extern int get_array_real_6_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_6(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_6_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_6_Utils;

/****************************************************************
 ** array_bool_8 
 ****************************************************************/
extern int array_bool_8_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_8_string(const char *str, char **endptr);
extern int string_to_array_bool_8(const char *str, void *pValue, char **endptr);
extern int is_array_bool_8_allow_double_conversion();
extern int array_bool_8_to_double(const void *pValue, double *nValue);
extern int get_array_bool_8_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_8(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_8_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_8_Utils;

/****************************************************************
 ** array__131278 
 ****************************************************************/
extern int array__131278_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131278_string(const char *str, char **endptr);
extern int string_to_array__131278(const char *str, void *pValue, char **endptr);
extern int is_array__131278_allow_double_conversion();
extern int array__131278_to_double(const void *pValue, double *nValue);
extern int get_array__131278_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131278(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131278_default_value(void *pValue);
extern SimTypeUtils _Type_array__131278_Utils;

/****************************************************************
 ** array__131281 
 ****************************************************************/
extern int array__131281_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131281_string(const char *str, char **endptr);
extern int string_to_array__131281(const char *str, void *pValue, char **endptr);
extern int is_array__131281_allow_double_conversion();
extern int array__131281_to_double(const void *pValue, double *nValue);
extern int get_array__131281_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131281(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131281_default_value(void *pValue);
extern SimTypeUtils _Type_array__131281_Utils;

/****************************************************************
 ** array__131284 
 ****************************************************************/
extern int array__131284_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131284_string(const char *str, char **endptr);
extern int string_to_array__131284(const char *str, void *pValue, char **endptr);
extern int is_array__131284_allow_double_conversion();
extern int array__131284_to_double(const void *pValue, double *nValue);
extern int get_array__131284_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131284(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131284_default_value(void *pValue);
extern SimTypeUtils _Type_array__131284_Utils;

/****************************************************************
 ** array_int_33 
 ****************************************************************/
extern int array_int_33_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_33_string(const char *str, char **endptr);
extern int string_to_array_int_33(const char *str, void *pValue, char **endptr);
extern int is_array_int_33_allow_double_conversion();
extern int array_int_33_to_double(const void *pValue, double *nValue);
extern int get_array_int_33_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_33(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_33_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_33_Utils;

/****************************************************************
 ** array_int_30 
 ****************************************************************/
extern int array_int_30_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_30_string(const char *str, char **endptr);
extern int string_to_array_int_30(const char *str, void *pValue, char **endptr);
extern int is_array_int_30_allow_double_conversion();
extern int array_int_30_to_double(const void *pValue, double *nValue);
extern int get_array_int_30_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_30(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_30_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_30_Utils;

/****************************************************************
 ** array__131293 
 ****************************************************************/
extern int array__131293_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131293_string(const char *str, char **endptr);
extern int string_to_array__131293(const char *str, void *pValue, char **endptr);
extern int is_array__131293_allow_double_conversion();
extern int array__131293_to_double(const void *pValue, double *nValue);
extern int get_array__131293_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131293(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131293_default_value(void *pValue);
extern SimTypeUtils _Type_array__131293_Utils;

/****************************************************************
 ** array__131296 
 ****************************************************************/
extern int array__131296_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131296_string(const char *str, char **endptr);
extern int string_to_array__131296(const char *str, void *pValue, char **endptr);
extern int is_array__131296_allow_double_conversion();
extern int array__131296_to_double(const void *pValue, double *nValue);
extern int get_array__131296_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131296(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131296_default_value(void *pValue);
extern SimTypeUtils _Type_array__131296_Utils;

/****************************************************************
 ** array_int_42 
 ****************************************************************/
extern int array_int_42_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_42_string(const char *str, char **endptr);
extern int string_to_array_int_42(const char *str, void *pValue, char **endptr);
extern int is_array_int_42_allow_double_conversion();
extern int array_int_42_to_double(const void *pValue, double *nValue);
extern int get_array_int_42_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_42(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_42_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_42_Utils;

/****************************************************************
 ** array__131302 
 ****************************************************************/
extern int array__131302_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131302_string(const char *str, char **endptr);
extern int string_to_array__131302(const char *str, void *pValue, char **endptr);
extern int is_array__131302_allow_double_conversion();
extern int array__131302_to_double(const void *pValue, double *nValue);
extern int get_array__131302_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131302(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131302_default_value(void *pValue);
extern SimTypeUtils _Type_array__131302_Utils;

/****************************************************************
 ** array_int_444 
 ****************************************************************/
extern int array_int_444_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_444_string(const char *str, char **endptr);
extern int string_to_array_int_444(const char *str, void *pValue, char **endptr);
extern int is_array_int_444_allow_double_conversion();
extern int array_int_444_to_double(const void *pValue, double *nValue);
extern int get_array_int_444_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_444(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_444_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_444_Utils;

/****************************************************************
 ** array_int_264 
 ****************************************************************/
extern int array_int_264_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_264_string(const char *str, char **endptr);
extern int string_to_array_int_264(const char *str, void *pValue, char **endptr);
extern int is_array_int_264_allow_double_conversion();
extern int array_int_264_to_double(const void *pValue, double *nValue);
extern int get_array_int_264_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_264(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_264_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_264_Utils;

/****************************************************************
 ** array_int_350 
 ****************************************************************/
extern int array_int_350_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_350_string(const char *str, char **endptr);
extern int string_to_array_int_350(const char *str, void *pValue, char **endptr);
extern int is_array_int_350_allow_double_conversion();
extern int array_int_350_to_double(const void *pValue, double *nValue);
extern int get_array_int_350_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_350(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_350_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_350_Utils;

/****************************************************************
 ** array_int_396 
 ****************************************************************/
extern int array_int_396_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_396_string(const char *str, char **endptr);
extern int string_to_array_int_396(const char *str, void *pValue, char **endptr);
extern int is_array_int_396_allow_double_conversion();
extern int array_int_396_to_double(const void *pValue, double *nValue);
extern int get_array_int_396_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_396(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_396_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_396_Utils;

/****************************************************************
 ** array_int_432 
 ****************************************************************/
extern int array_int_432_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_432_string(const char *str, char **endptr);
extern int string_to_array_int_432(const char *str, void *pValue, char **endptr);
extern int is_array_int_432_allow_double_conversion();
extern int array_int_432_to_double(const void *pValue, double *nValue);
extern int get_array_int_432_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_432(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_432_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_432_Utils;

/****************************************************************
 ** array_int_428 
 ****************************************************************/
extern int array_int_428_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_int_428_string(const char *str, char **endptr);
extern int string_to_array_int_428(const char *str, void *pValue, char **endptr);
extern int is_array_int_428_allow_double_conversion();
extern int array_int_428_to_double(const void *pValue, double *nValue);
extern int get_array_int_428_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_int_428(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_int_428_default_value(void *pValue);
extern SimTypeUtils _Type_array_int_428_Utils;

/****************************************************************
 ** array__131323 
 ****************************************************************/
extern int array__131323_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__131323_string(const char *str, char **endptr);
extern int string_to_array__131323(const char *str, void *pValue, char **endptr);
extern int is_array__131323_allow_double_conversion();
extern int array__131323_to_double(const void *pValue, double *nValue);
extern int get_array__131323_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__131323(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__131323_default_value(void *pValue);
extern SimTypeUtils _Type_array__131323_Utils;

/****************************************************************
 ** array_bool_5 
 ****************************************************************/
extern int array_bool_5_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_5_string(const char *str, char **endptr);
extern int string_to_array_bool_5(const char *str, void *pValue, char **endptr);
extern int is_array_bool_5_allow_double_conversion();
extern int array_bool_5_to_double(const void *pValue, double *nValue);
extern int get_array_bool_5_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_5(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_5_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_5_Utils;

/****************************************************************
 ** struct__131329 
 ****************************************************************/
extern int struct__131329_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_struct__131329_string(const char *str, char **endptr);
extern int string_to_struct__131329(const char *str, void *pValue, char **endptr);
extern int is_struct__131329_allow_double_conversion();
extern int struct__131329_to_double(const void *pValue, double *nValue);
extern int get_struct__131329_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_struct__131329(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_struct__131329_default_value(void *pValue);
extern SimTypeUtils _Type_struct__131329_Utils;

/****************************************************************
 ** array_real_113 
 ****************************************************************/
extern int array_real_113_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_real_113_string(const char *str, char **endptr);
extern int string_to_array_real_113(const char *str, void *pValue, char **endptr);
extern int is_array_real_113_allow_double_conversion();
extern int array_real_113_to_double(const void *pValue, double *nValue);
extern int get_array_real_113_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_real_113(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_real_113_default_value(void *pValue);
extern SimTypeUtils _Type_array_real_113_Utils;

/****************************************************************
 ** array_bool_113 
 ****************************************************************/
extern int array_bool_113_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array_bool_113_string(const char *str, char **endptr);
extern int string_to_array_bool_113(const char *str, void *pValue, char **endptr);
extern int is_array_bool_113_allow_double_conversion();
extern int array_bool_113_to_double(const void *pValue, double *nValue);
extern int get_array_bool_113_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array_bool_113(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array_bool_113_default_value(void *pValue);
extern SimTypeUtils _Type_array_bool_113_Utils;

/****************************************************************
 ** array__136285 
 ****************************************************************/
extern int array__136285_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__136285_string(const char *str, char **endptr);
extern int string_to_array__136285(const char *str, void *pValue, char **endptr);
extern int is_array__136285_allow_double_conversion();
extern int array__136285_to_double(const void *pValue, double *nValue);
extern int get_array__136285_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__136285(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__136285_default_value(void *pValue);
extern SimTypeUtils _Type_array__136285_Utils;

/****************************************************************
 ** array__136722 
 ****************************************************************/
extern int array__136722_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__136722_string(const char *str, char **endptr);
extern int string_to_array__136722(const char *str, void *pValue, char **endptr);
extern int is_array__136722_allow_double_conversion();
extern int array__136722_to_double(const void *pValue, double *nValue);
extern int get_array__136722_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__136722(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__136722_default_value(void *pValue);
extern SimTypeUtils _Type_array__136722_Utils;

/****************************************************************
 ** array__136961 
 ****************************************************************/
extern int array__136961_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__136961_string(const char *str, char **endptr);
extern int string_to_array__136961(const char *str, void *pValue, char **endptr);
extern int is_array__136961_allow_double_conversion();
extern int array__136961_to_double(const void *pValue, double *nValue);
extern int get_array__136961_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__136961(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__136961_default_value(void *pValue);
extern SimTypeUtils _Type_array__136961_Utils;

/****************************************************************
 ** array__137060 
 ****************************************************************/
extern int array__137060_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__137060_string(const char *str, char **endptr);
extern int string_to_array__137060(const char *str, void *pValue, char **endptr);
extern int is_array__137060_allow_double_conversion();
extern int array__137060_to_double(const void *pValue, double *nValue);
extern int get_array__137060_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__137060(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__137060_default_value(void *pValue);
extern SimTypeUtils _Type_array__137060_Utils;

/****************************************************************
 ** array__137215 
 ****************************************************************/
extern int array__137215_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__137215_string(const char *str, char **endptr);
extern int string_to_array__137215(const char *str, void *pValue, char **endptr);
extern int is_array__137215_allow_double_conversion();
extern int array__137215_to_double(const void *pValue, double *nValue);
extern int get_array__137215_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__137215(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__137215_default_value(void *pValue);
extern SimTypeUtils _Type_array__137215_Utils;

/****************************************************************
 ** array__137219 
 ****************************************************************/
extern int array__137219_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__137219_string(const char *str, char **endptr);
extern int string_to_array__137219(const char *str, void *pValue, char **endptr);
extern int is_array__137219_allow_double_conversion();
extern int array__137219_to_double(const void *pValue, double *nValue);
extern int get_array__137219_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__137219(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__137219_default_value(void *pValue);
extern SimTypeUtils _Type_array__137219_Utils;

/****************************************************************
 ** array__137223 
 ****************************************************************/
extern int array__137223_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__137223_string(const char *str, char **endptr);
extern int string_to_array__137223(const char *str, void *pValue, char **endptr);
extern int is_array__137223_allow_double_conversion();
extern int array__137223_to_double(const void *pValue, double *nValue);
extern int get_array__137223_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__137223(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__137223_default_value(void *pValue);
extern SimTypeUtils _Type_array__137223_Utils;

/****************************************************************
 ** array__137226 
 ****************************************************************/
extern int array__137226_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__137226_string(const char *str, char **endptr);
extern int string_to_array__137226(const char *str, void *pValue, char **endptr);
extern int is_array__137226_allow_double_conversion();
extern int array__137226_to_double(const void *pValue, double *nValue);
extern int get_array__137226_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__137226(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__137226_default_value(void *pValue);
extern SimTypeUtils _Type_array__137226_Utils;

/****************************************************************
 ** array__137230 
 ****************************************************************/
extern int array__137230_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__137230_string(const char *str, char **endptr);
extern int string_to_array__137230(const char *str, void *pValue, char **endptr);
extern int is_array__137230_allow_double_conversion();
extern int array__137230_to_double(const void *pValue, double *nValue);
extern int get_array__137230_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__137230(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__137230_default_value(void *pValue);
extern SimTypeUtils _Type_array__137230_Utils;

/****************************************************************
 ** array__137233 
 ****************************************************************/
extern int array__137233_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__137233_string(const char *str, char **endptr);
extern int string_to_array__137233(const char *str, void *pValue, char **endptr);
extern int is_array__137233_allow_double_conversion();
extern int array__137233_to_double(const void *pValue, double *nValue);
extern int get_array__137233_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__137233(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__137233_default_value(void *pValue);
extern SimTypeUtils _Type_array__137233_Utils;

/****************************************************************
 ** array__137237 
 ****************************************************************/
extern int array__137237_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__137237_string(const char *str, char **endptr);
extern int string_to_array__137237(const char *str, void *pValue, char **endptr);
extern int is_array__137237_allow_double_conversion();
extern int array__137237_to_double(const void *pValue, double *nValue);
extern int get_array__137237_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__137237(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__137237_default_value(void *pValue);
extern SimTypeUtils _Type_array__137237_Utils;

/****************************************************************
 ** array__137323 
 ****************************************************************/
extern int array__137323_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_array__137323_string(const char *str, char **endptr);
extern int string_to_array__137323(const char *str, void *pValue, char **endptr);
extern int is_array__137323_allow_double_conversion();
extern int array__137323_to_double(const void *pValue, double *nValue);
extern int get_array__137323_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_array__137323(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_array__137323_default_value(void *pValue);
extern SimTypeUtils _Type_array__137323_Utils;

/****************************************************************
 ** NID_MN 
 ****************************************************************/
extern int NID_MN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_MN_string(const char *str, char **endptr);
extern int string_to_NID_MN(const char *str, void *pValue, char **endptr);
extern int is_NID_MN_allow_double_conversion();
extern int NID_MN_to_double(const void *pValue, double *nValue);
extern int get_NID_MN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_MN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_MN_default_value(void *pValue);
extern SimTypeUtils _Type_NID_MN_Utils;

/****************************************************************
 ** M_MODE 
 ****************************************************************/
extern int M_MODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_MODE_string(const char *str, char **endptr);
extern int string_to_M_MODE(const char *str, void *pValue, char **endptr);
extern int is_M_MODE_allow_double_conversion();
extern int M_MODE_to_double(const void *pValue, double *nValue);
extern int get_M_MODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_MODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_MODE_default_value(void *pValue);
extern SimTypeUtils _Type_M_MODE_Utils;

/****************************************************************
 ** M_LEVEL 
 ****************************************************************/
extern int M_LEVEL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_LEVEL_string(const char *str, char **endptr);
extern int string_to_M_LEVEL(const char *str, void *pValue, char **endptr);
extern int is_M_LEVEL_allow_double_conversion();
extern int M_LEVEL_to_double(const void *pValue, double *nValue);
extern int get_M_LEVEL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_LEVEL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_LEVEL_default_value(void *pValue);
extern SimTypeUtils _Type_M_LEVEL_Utils;

/****************************************************************
 ** L_TEXT 
 ****************************************************************/
extern int L_TEXT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_TEXT_string(const char *str, char **endptr);
extern int string_to_L_TEXT(const char *str, void *pValue, char **endptr);
extern int is_L_TEXT_allow_double_conversion();
extern int L_TEXT_to_double(const void *pValue, double *nValue);
extern int get_L_TEXT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_TEXT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_TEXT_default_value(void *pValue);
extern SimTypeUtils _Type_L_TEXT_Utils;

/****************************************************************
 ** M_VERSION 
 ****************************************************************/
extern int M_VERSION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_VERSION_string(const char *str, char **endptr);
extern int string_to_M_VERSION(const char *str, void *pValue, char **endptr);
extern int is_M_VERSION_allow_double_conversion();
extern int M_VERSION_to_double(const void *pValue, double *nValue);
extern int get_M_VERSION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_VERSION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_VERSION_default_value(void *pValue);
extern SimTypeUtils _Type_M_VERSION_Utils;

/****************************************************************
 ** NID_C 
 ****************************************************************/
extern int NID_C_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_C_string(const char *str, char **endptr);
extern int string_to_NID_C(const char *str, void *pValue, char **endptr);
extern int is_NID_C_allow_double_conversion();
extern int NID_C_to_double(const void *pValue, double *nValue);
extern int get_NID_C_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_C(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_C_default_value(void *pValue);
extern SimTypeUtils _Type_NID_C_Utils;

/****************************************************************
 ** NID_RADIO 
 ****************************************************************/
extern int NID_RADIO_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_RADIO_string(const char *str, char **endptr);
extern int string_to_NID_RADIO(const char *str, void *pValue, char **endptr);
extern int is_NID_RADIO_allow_double_conversion();
extern int NID_RADIO_to_double(const void *pValue, double *nValue);
extern int get_NID_RADIO_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_RADIO(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_RADIO_default_value(void *pValue);
extern SimTypeUtils _Type_NID_RADIO_Utils;

/****************************************************************
 ** NID_RBC 
 ****************************************************************/
extern int NID_RBC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_RBC_string(const char *str, char **endptr);
extern int string_to_NID_RBC(const char *str, void *pValue, char **endptr);
extern int is_NID_RBC_allow_double_conversion();
extern int NID_RBC_to_double(const void *pValue, double *nValue);
extern int get_NID_RBC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_RBC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_RBC_default_value(void *pValue);
extern SimTypeUtils _Type_NID_RBC_Utils;

/****************************************************************
 ** NID_BG 
 ****************************************************************/
extern int NID_BG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_BG_string(const char *str, char **endptr);
extern int string_to_NID_BG(const char *str, void *pValue, char **endptr);
extern int is_NID_BG_allow_double_conversion();
extern int NID_BG_to_double(const void *pValue, double *nValue);
extern int get_NID_BG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_BG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_BG_default_value(void *pValue);
extern SimTypeUtils _Type_NID_BG_Utils;

/****************************************************************
 ** Q_LINK 
 ****************************************************************/
extern int Q_LINK_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LINK_string(const char *str, char **endptr);
extern int string_to_Q_LINK(const char *str, void *pValue, char **endptr);
extern int is_Q_LINK_allow_double_conversion();
extern int Q_LINK_to_double(const void *pValue, double *nValue);
extern int get_Q_LINK_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LINK(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LINK_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LINK_Utils;

/****************************************************************
 ** NID_LRBG 
 ****************************************************************/
extern int NID_LRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_LRBG_string(const char *str, char **endptr);
extern int string_to_NID_LRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_LRBG_allow_double_conversion();
extern int NID_LRBG_to_double(const void *pValue, double *nValue);
extern int get_NID_LRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_LRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_LRBG_default_value(void *pValue);
extern SimTypeUtils _Type_NID_LRBG_Utils;

/****************************************************************
 ** Q_DIR 
 ****************************************************************/
extern int Q_DIR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DIR_string(const char *str, char **endptr);
extern int string_to_Q_DIR(const char *str, void *pValue, char **endptr);
extern int is_Q_DIR_allow_double_conversion();
extern int Q_DIR_to_double(const void *pValue, double *nValue);
extern int get_Q_DIR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DIR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DIR_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DIR_Utils;

/****************************************************************
 ** Q_SCALE 
 ****************************************************************/
extern int Q_SCALE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_SCALE_string(const char *str, char **endptr);
extern int string_to_Q_SCALE(const char *str, void *pValue, char **endptr);
extern int is_Q_SCALE_allow_double_conversion();
extern int Q_SCALE_to_double(const void *pValue, double *nValue);
extern int get_Q_SCALE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_SCALE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_SCALE_default_value(void *pValue);
extern SimTypeUtils _Type_Q_SCALE_Utils;

/****************************************************************
 ** D_LINK 
 ****************************************************************/
extern int D_LINK_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_LINK_string(const char *str, char **endptr);
extern int string_to_D_LINK(const char *str, void *pValue, char **endptr);
extern int is_D_LINK_allow_double_conversion();
extern int D_LINK_to_double(const void *pValue, double *nValue);
extern int get_D_LINK_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_LINK(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_LINK_default_value(void *pValue);
extern SimTypeUtils _Type_D_LINK_Utils;

/****************************************************************
 ** Q_NEWCOUNTRY 
 ****************************************************************/
extern int Q_NEWCOUNTRY_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NEWCOUNTRY_string(const char *str, char **endptr);
extern int string_to_Q_NEWCOUNTRY(const char *str, void *pValue, char **endptr);
extern int is_Q_NEWCOUNTRY_allow_double_conversion();
extern int Q_NEWCOUNTRY_to_double(const void *pValue, double *nValue);
extern int get_Q_NEWCOUNTRY_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NEWCOUNTRY(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NEWCOUNTRY_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NEWCOUNTRY_Utils;

/****************************************************************
 ** Q_LINKORIENTATION 
 ****************************************************************/
extern int Q_LINKORIENTATION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LINKORIENTATION_string(const char *str, char **endptr);
extern int string_to_Q_LINKORIENTATION(const char *str, void *pValue, char **endptr);
extern int is_Q_LINKORIENTATION_allow_double_conversion();
extern int Q_LINKORIENTATION_to_double(const void *pValue, double *nValue);
extern int get_Q_LINKORIENTATION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LINKORIENTATION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LINKORIENTATION_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LINKORIENTATION_Utils;

/****************************************************************
 ** Q_LINKREACTION 
 ****************************************************************/
extern int Q_LINKREACTION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LINKREACTION_string(const char *str, char **endptr);
extern int string_to_Q_LINKREACTION(const char *str, void *pValue, char **endptr);
extern int is_Q_LINKREACTION_allow_double_conversion();
extern int Q_LINKREACTION_to_double(const void *pValue, double *nValue);
extern int get_Q_LINKREACTION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LINKREACTION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LINKREACTION_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LINKREACTION_Utils;

/****************************************************************
 ** Q_LOCACC 
 ****************************************************************/
extern int Q_LOCACC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LOCACC_string(const char *str, char **endptr);
extern int string_to_Q_LOCACC(const char *str, void *pValue, char **endptr);
extern int is_Q_LOCACC_allow_double_conversion();
extern int Q_LOCACC_to_double(const void *pValue, double *nValue);
extern int get_Q_LOCACC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LOCACC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LOCACC_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LOCACC_Utils;

/****************************************************************
 ** Q_UPDOWN 
 ****************************************************************/
extern int Q_UPDOWN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_UPDOWN_string(const char *str, char **endptr);
extern int string_to_Q_UPDOWN(const char *str, void *pValue, char **endptr);
extern int is_Q_UPDOWN_allow_double_conversion();
extern int Q_UPDOWN_to_double(const void *pValue, double *nValue);
extern int get_Q_UPDOWN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_UPDOWN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_UPDOWN_default_value(void *pValue);
extern SimTypeUtils _Type_Q_UPDOWN_Utils;

/****************************************************************
 ** Q_MEDIA 
 ****************************************************************/
extern int Q_MEDIA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_MEDIA_string(const char *str, char **endptr);
extern int string_to_Q_MEDIA(const char *str, void *pValue, char **endptr);
extern int is_Q_MEDIA_allow_double_conversion();
extern int Q_MEDIA_to_double(const void *pValue, double *nValue);
extern int get_Q_MEDIA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_MEDIA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_MEDIA_default_value(void *pValue);
extern SimTypeUtils _Type_Q_MEDIA_Utils;

/****************************************************************
 ** N_TOTAL 
 ****************************************************************/
extern int N_TOTAL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_N_TOTAL_string(const char *str, char **endptr);
extern int string_to_N_TOTAL(const char *str, void *pValue, char **endptr);
extern int is_N_TOTAL_allow_double_conversion();
extern int N_TOTAL_to_double(const void *pValue, double *nValue);
extern int get_N_TOTAL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_N_TOTAL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_N_TOTAL_default_value(void *pValue);
extern SimTypeUtils _Type_N_TOTAL_Utils;

/****************************************************************
 ** M_MCOUNT 
 ****************************************************************/
extern int M_MCOUNT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_MCOUNT_string(const char *str, char **endptr);
extern int string_to_M_MCOUNT(const char *str, void *pValue, char **endptr);
extern int is_M_MCOUNT_allow_double_conversion();
extern int M_MCOUNT_to_double(const void *pValue, double *nValue);
extern int get_M_MCOUNT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_MCOUNT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_MCOUNT_default_value(void *pValue);
extern SimTypeUtils _Type_M_MCOUNT_Utils;

/****************************************************************
 ** Q_NVLOCACC 
 ****************************************************************/
extern int Q_NVLOCACC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVLOCACC_string(const char *str, char **endptr);
extern int string_to_Q_NVLOCACC(const char *str, void *pValue, char **endptr);
extern int is_Q_NVLOCACC_allow_double_conversion();
extern int Q_NVLOCACC_to_double(const void *pValue, double *nValue);
extern int get_Q_NVLOCACC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVLOCACC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVLOCACC_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVLOCACC_Utils;

/****************************************************************
 ** Q_DIRLRBG 
 ****************************************************************/
extern int Q_DIRLRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DIRLRBG_string(const char *str, char **endptr);
extern int string_to_Q_DIRLRBG(const char *str, void *pValue, char **endptr);
extern int is_Q_DIRLRBG_allow_double_conversion();
extern int Q_DIRLRBG_to_double(const void *pValue, double *nValue);
extern int get_Q_DIRLRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DIRLRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DIRLRBG_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DIRLRBG_Utils;

/****************************************************************
 ** Q_DIRTRAIN 
 ****************************************************************/
extern int Q_DIRTRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DIRTRAIN_string(const char *str, char **endptr);
extern int string_to_Q_DIRTRAIN(const char *str, void *pValue, char **endptr);
extern int is_Q_DIRTRAIN_allow_double_conversion();
extern int Q_DIRTRAIN_to_double(const void *pValue, double *nValue);
extern int get_Q_DIRTRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DIRTRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DIRTRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DIRTRAIN_Utils;

/****************************************************************
 ** Q_DLRBG 
 ****************************************************************/
extern int Q_DLRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DLRBG_string(const char *str, char **endptr);
extern int string_to_Q_DLRBG(const char *str, void *pValue, char **endptr);
extern int is_Q_DLRBG_allow_double_conversion();
extern int Q_DLRBG_to_double(const void *pValue, double *nValue);
extern int get_Q_DLRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DLRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DLRBG_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DLRBG_Utils;

/****************************************************************
 ** NID_NTC 
 ****************************************************************/
extern int NID_NTC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_NTC_string(const char *str, char **endptr);
extern int string_to_NID_NTC(const char *str, void *pValue, char **endptr);
extern int is_NID_NTC_allow_double_conversion();
extern int NID_NTC_to_double(const void *pValue, double *nValue);
extern int get_NID_NTC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_NTC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_NTC_default_value(void *pValue);
extern SimTypeUtils _Type_NID_NTC_Utils;

/****************************************************************
 ** M_AXLELOADCAT 
 ****************************************************************/
extern int M_AXLELOADCAT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_AXLELOADCAT_string(const char *str, char **endptr);
extern int string_to_M_AXLELOADCAT(const char *str, void *pValue, char **endptr);
extern int is_M_AXLELOADCAT_allow_double_conversion();
extern int M_AXLELOADCAT_to_double(const void *pValue, double *nValue);
extern int get_M_AXLELOADCAT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_AXLELOADCAT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_AXLELOADCAT_default_value(void *pValue);
extern SimTypeUtils _Type_M_AXLELOADCAT_Utils;

/****************************************************************
 ** Q_TEXTCLASS 
 ****************************************************************/
extern int Q_TEXTCLASS_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_TEXTCLASS_string(const char *str, char **endptr);
extern int string_to_Q_TEXTCLASS(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTCLASS_allow_double_conversion();
extern int Q_TEXTCLASS_to_double(const void *pValue, double *nValue);
extern int get_Q_TEXTCLASS_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_TEXTCLASS(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_TEXTCLASS_default_value(void *pValue);
extern SimTypeUtils _Type_Q_TEXTCLASS_Utils;

/****************************************************************
 ** Q_TEXTCONFIRM 
 ****************************************************************/
extern int Q_TEXTCONFIRM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_TEXTCONFIRM_string(const char *str, char **endptr);
extern int string_to_Q_TEXTCONFIRM(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTCONFIRM_allow_double_conversion();
extern int Q_TEXTCONFIRM_to_double(const void *pValue, double *nValue);
extern int get_Q_TEXTCONFIRM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_TEXTCONFIRM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_TEXTCONFIRM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_TEXTCONFIRM_Utils;

/****************************************************************
 ** D_TRACKCOND 
 ****************************************************************/
extern int D_TRACKCOND_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_TRACKCOND_string(const char *str, char **endptr);
extern int string_to_D_TRACKCOND(const char *str, void *pValue, char **endptr);
extern int is_D_TRACKCOND_allow_double_conversion();
extern int D_TRACKCOND_to_double(const void *pValue, double *nValue);
extern int get_D_TRACKCOND_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_TRACKCOND(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_TRACKCOND_default_value(void *pValue);
extern SimTypeUtils _Type_D_TRACKCOND_Utils;

/****************************************************************
 ** M_TRACKCOND 
 ****************************************************************/
extern int M_TRACKCOND_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TRACKCOND_string(const char *str, char **endptr);
extern int string_to_M_TRACKCOND(const char *str, void *pValue, char **endptr);
extern int is_M_TRACKCOND_allow_double_conversion();
extern int M_TRACKCOND_to_double(const void *pValue, double *nValue);
extern int get_M_TRACKCOND_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TRACKCOND(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TRACKCOND_default_value(void *pValue);
extern SimTypeUtils _Type_M_TRACKCOND_Utils;

/****************************************************************
 ** NID_OPERATIONAL 
 ****************************************************************/
extern int NID_OPERATIONAL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_OPERATIONAL_string(const char *str, char **endptr);
extern int string_to_NID_OPERATIONAL(const char *str, void *pValue, char **endptr);
extern int is_NID_OPERATIONAL_allow_double_conversion();
extern int NID_OPERATIONAL_to_double(const void *pValue, double *nValue);
extern int get_NID_OPERATIONAL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_OPERATIONAL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_OPERATIONAL_default_value(void *pValue);
extern SimTypeUtils _Type_NID_OPERATIONAL_Utils;

/****************************************************************
 ** NC_TRAIN 
 ****************************************************************/
extern int NC_TRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NC_TRAIN_string(const char *str, char **endptr);
extern int string_to_NC_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_NC_TRAIN_allow_double_conversion();
extern int NC_TRAIN_to_double(const void *pValue, double *nValue);
extern int get_NC_TRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NC_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NC_TRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_NC_TRAIN_Utils;

/****************************************************************
 ** M_AIRTIGHT 
 ****************************************************************/
extern int M_AIRTIGHT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_AIRTIGHT_string(const char *str, char **endptr);
extern int string_to_M_AIRTIGHT(const char *str, void *pValue, char **endptr);
extern int is_M_AIRTIGHT_allow_double_conversion();
extern int M_AIRTIGHT_to_double(const void *pValue, double *nValue);
extern int get_M_AIRTIGHT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_AIRTIGHT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_AIRTIGHT_default_value(void *pValue);
extern SimTypeUtils _Type_M_AIRTIGHT_Utils;

/****************************************************************
 ** M_LOADINGGAUGE 
 ****************************************************************/
extern int M_LOADINGGAUGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_LOADINGGAUGE_string(const char *str, char **endptr);
extern int string_to_M_LOADINGGAUGE(const char *str, void *pValue, char **endptr);
extern int is_M_LOADINGGAUGE_allow_double_conversion();
extern int M_LOADINGGAUGE_to_double(const void *pValue, double *nValue);
extern int get_M_LOADINGGAUGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_LOADINGGAUGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_LOADINGGAUGE_default_value(void *pValue);
extern SimTypeUtils _Type_M_LOADINGGAUGE_Utils;

/****************************************************************
 ** M_ADHESION 
 ****************************************************************/
extern int M_ADHESION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_ADHESION_string(const char *str, char **endptr);
extern int string_to_M_ADHESION(const char *str, void *pValue, char **endptr);
extern int is_M_ADHESION_allow_double_conversion();
extern int M_ADHESION_to_double(const void *pValue, double *nValue);
extern int get_M_ADHESION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_ADHESION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_ADHESION_default_value(void *pValue);
extern SimTypeUtils _Type_M_ADHESION_Utils;

/****************************************************************
 ** NC_CDTRAIN 
 ****************************************************************/
extern int NC_CDTRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NC_CDTRAIN_string(const char *str, char **endptr);
extern int string_to_NC_CDTRAIN(const char *str, void *pValue, char **endptr);
extern int is_NC_CDTRAIN_allow_double_conversion();
extern int NC_CDTRAIN_to_double(const void *pValue, double *nValue);
extern int get_NC_CDTRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NC_CDTRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NC_CDTRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_NC_CDTRAIN_Utils;

/****************************************************************
 ** M_VOLTAGE 
 ****************************************************************/
extern int M_VOLTAGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_VOLTAGE_string(const char *str, char **endptr);
extern int string_to_M_VOLTAGE(const char *str, void *pValue, char **endptr);
extern int is_M_VOLTAGE_allow_double_conversion();
extern int M_VOLTAGE_to_double(const void *pValue, double *nValue);
extern int get_M_VOLTAGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_VOLTAGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_VOLTAGE_default_value(void *pValue);
extern SimTypeUtils _Type_M_VOLTAGE_Utils;

/****************************************************************
 ** NID_CTRACTION 
 ****************************************************************/
extern int NID_CTRACTION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_CTRACTION_string(const char *str, char **endptr);
extern int string_to_NID_CTRACTION(const char *str, void *pValue, char **endptr);
extern int is_NID_CTRACTION_allow_double_conversion();
extern int NID_CTRACTION_to_double(const void *pValue, double *nValue);
extern int get_NID_CTRACTION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_CTRACTION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_CTRACTION_default_value(void *pValue);
extern SimTypeUtils _Type_NID_CTRACTION_Utils;

/****************************************************************
 ** Q_TEXTREPORT 
 ****************************************************************/
extern int Q_TEXTREPORT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_TEXTREPORT_string(const char *str, char **endptr);
extern int string_to_Q_TEXTREPORT(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTREPORT_allow_double_conversion();
extern int Q_TEXTREPORT_to_double(const void *pValue, double *nValue);
extern int get_Q_TEXTREPORT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_TEXTREPORT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_TEXTREPORT_default_value(void *pValue);
extern SimTypeUtils _Type_Q_TEXTREPORT_Utils;

/****************************************************************
 ** NID_TEXTMESSAGE 
 ****************************************************************/
extern int NID_TEXTMESSAGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_TEXTMESSAGE_string(const char *str, char **endptr);
extern int string_to_NID_TEXTMESSAGE(const char *str, void *pValue, char **endptr);
extern int is_NID_TEXTMESSAGE_allow_double_conversion();
extern int NID_TEXTMESSAGE_to_double(const void *pValue, double *nValue);
extern int get_NID_TEXTMESSAGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_TEXTMESSAGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_TEXTMESSAGE_default_value(void *pValue);
extern SimTypeUtils _Type_NID_TEXTMESSAGE_Utils;

/****************************************************************
 ** M_POSITION 
 ****************************************************************/
extern int M_POSITION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_POSITION_string(const char *str, char **endptr);
extern int string_to_M_POSITION(const char *str, void *pValue, char **endptr);
extern int is_M_POSITION_allow_double_conversion();
extern int M_POSITION_to_double(const void *pValue, double *nValue);
extern int get_M_POSITION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_POSITION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_POSITION_default_value(void *pValue);
extern SimTypeUtils _Type_M_POSITION_Utils;

/****************************************************************
 ** DMI_trackCondition_int_array_T 
 ****************************************************************/
extern int DMI_trackCondition_int_array_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_trackCondition_int_array_T_string(const char *str, char **endptr);
extern int string_to_DMI_trackCondition_int_array_T(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackCondition_int_array_T_allow_double_conversion();
extern int DMI_trackCondition_int_array_T_to_double(const void *pValue, double *nValue);
extern int get_DMI_trackCondition_int_array_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_trackCondition_int_array_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_trackCondition_int_array_T_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_trackCondition_int_array_T_Utils;

/****************************************************************
 ** DMI_gradientProfile_int_arrayT 
 ****************************************************************/
extern int DMI_gradientProfile_int_arrayT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_gradientProfile_int_arrayT_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfile_int_arrayT(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfile_int_arrayT_allow_double_conversion();
extern int DMI_gradientProfile_int_arrayT_to_double(const void *pValue, double *nValue);
extern int get_DMI_gradientProfile_int_arrayT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_gradientProfile_int_arrayT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_gradientProfile_int_arrayT_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_gradientProfile_int_arrayT_Utils;

/****************************************************************
 ** DMI_Track_Description_int_array_T 
 ****************************************************************/
extern int DMI_Track_Description_int_array_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Track_Description_int_array_T_string(const char *str, char **endptr);
extern int string_to_DMI_Track_Description_int_array_T(const char *str, void *pValue, char **endptr);
extern int is_DMI_Track_Description_int_array_T_allow_double_conversion();
extern int DMI_Track_Description_int_array_T_to_double(const void *pValue, double *nValue);
extern int get_DMI_Track_Description_int_array_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Track_Description_int_array_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Track_Description_int_array_T_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Track_Description_int_array_T_Utils;

/****************************************************************
 ** NID_MESSAGE 
 ****************************************************************/
extern int NID_MESSAGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_MESSAGE_string(const char *str, char **endptr);
extern int string_to_NID_MESSAGE(const char *str, void *pValue, char **endptr);
extern int is_NID_MESSAGE_allow_double_conversion();
extern int NID_MESSAGE_to_double(const void *pValue, double *nValue);
extern int get_NID_MESSAGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_MESSAGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_MESSAGE_default_value(void *pValue);
extern SimTypeUtils _Type_NID_MESSAGE_Utils;

/****************************************************************
 ** T_TRAIN 
 ****************************************************************/
extern int T_TRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_TRAIN_string(const char *str, char **endptr);
extern int string_to_T_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_T_TRAIN_allow_double_conversion();
extern int T_TRAIN_to_double(const void *pValue, double *nValue);
extern int get_T_TRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_TRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_T_TRAIN_Utils;

/****************************************************************
 ** M_ACK 
 ****************************************************************/
extern int M_ACK_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_ACK_string(const char *str, char **endptr);
extern int string_to_M_ACK(const char *str, void *pValue, char **endptr);
extern int is_M_ACK_allow_double_conversion();
extern int M_ACK_to_double(const void *pValue, double *nValue);
extern int get_M_ACK_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_ACK(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_ACK_default_value(void *pValue);
extern SimTypeUtils _Type_M_ACK_Utils;

/****************************************************************
 ** NID_EM 
 ****************************************************************/
extern int NID_EM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_EM_string(const char *str, char **endptr);
extern int string_to_NID_EM(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_allow_double_conversion();
extern int NID_EM_to_double(const void *pValue, double *nValue);
extern int get_NID_EM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_EM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_EM_default_value(void *pValue);
extern SimTypeUtils _Type_NID_EM_Utils;

/****************************************************************
 ** D_SR 
 ****************************************************************/
extern int D_SR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_SR_string(const char *str, char **endptr);
extern int string_to_D_SR(const char *str, void *pValue, char **endptr);
extern int is_D_SR_allow_double_conversion();
extern int D_SR_to_double(const void *pValue, double *nValue);
extern int get_D_SR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_SR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_SR_default_value(void *pValue);
extern SimTypeUtils _Type_D_SR_Utils;

/****************************************************************
 ** D_REF 
 ****************************************************************/
extern int D_REF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_REF_string(const char *str, char **endptr);
extern int string_to_D_REF(const char *str, void *pValue, char **endptr);
extern int is_D_REF_allow_double_conversion();
extern int D_REF_to_double(const void *pValue, double *nValue);
extern int get_D_REF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_REF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_REF_default_value(void *pValue);
extern SimTypeUtils _Type_D_REF_Utils;

/****************************************************************
 ** D_EMERGENCYSTOP 
 ****************************************************************/
extern int D_EMERGENCYSTOP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_EMERGENCYSTOP_string(const char *str, char **endptr);
extern int string_to_D_EMERGENCYSTOP(const char *str, void *pValue, char **endptr);
extern int is_D_EMERGENCYSTOP_allow_double_conversion();
extern int D_EMERGENCYSTOP_to_double(const void *pValue, double *nValue);
extern int get_D_EMERGENCYSTOP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_EMERGENCYSTOP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_EMERGENCYSTOP_default_value(void *pValue);
extern SimTypeUtils _Type_D_EMERGENCYSTOP_Utils;

/****************************************************************
 ** Q_RBC 
 ****************************************************************/
extern int Q_RBC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_RBC_string(const char *str, char **endptr);
extern int string_to_Q_RBC(const char *str, void *pValue, char **endptr);
extern int is_Q_RBC_allow_double_conversion();
extern int Q_RBC_to_double(const void *pValue, double *nValue);
extern int get_Q_RBC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_RBC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_RBC_default_value(void *pValue);
extern SimTypeUtils _Type_Q_RBC_Utils;

/****************************************************************
 ** Q_SLEEPSESSION 
 ****************************************************************/
extern int Q_SLEEPSESSION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_SLEEPSESSION_string(const char *str, char **endptr);
extern int string_to_Q_SLEEPSESSION(const char *str, void *pValue, char **endptr);
extern int is_Q_SLEEPSESSION_allow_double_conversion();
extern int Q_SLEEPSESSION_to_double(const void *pValue, double *nValue);
extern int get_Q_SLEEPSESSION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_SLEEPSESSION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_SLEEPSESSION_default_value(void *pValue);
extern SimTypeUtils _Type_Q_SLEEPSESSION_Utils;

/****************************************************************
 ** Q_NVEMRRLS 
 ****************************************************************/
extern int Q_NVEMRRLS_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVEMRRLS_string(const char *str, char **endptr);
extern int string_to_Q_NVEMRRLS(const char *str, void *pValue, char **endptr);
extern int is_Q_NVEMRRLS_allow_double_conversion();
extern int Q_NVEMRRLS_to_double(const void *pValue, double *nValue);
extern int get_Q_NVEMRRLS_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVEMRRLS(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVEMRRLS_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVEMRRLS_Utils;

/****************************************************************
 ** Q_NVSBTSMPERM 
 ****************************************************************/
extern int Q_NVSBTSMPERM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVSBTSMPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVSBTSMPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVSBTSMPERM_allow_double_conversion();
extern int Q_NVSBTSMPERM_to_double(const void *pValue, double *nValue);
extern int get_Q_NVSBTSMPERM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVSBTSMPERM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVSBTSMPERM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVSBTSMPERM_Utils;

/****************************************************************
 ** D_VALIDNV 
 ****************************************************************/
extern int D_VALIDNV_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_VALIDNV_string(const char *str, char **endptr);
extern int string_to_D_VALIDNV(const char *str, void *pValue, char **endptr);
extern int is_D_VALIDNV_allow_double_conversion();
extern int D_VALIDNV_to_double(const void *pValue, double *nValue);
extern int get_D_VALIDNV_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_VALIDNV(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_VALIDNV_default_value(void *pValue);
extern SimTypeUtils _Type_D_VALIDNV_Utils;

/****************************************************************
 ** V_NVSHUNT 
 ****************************************************************/
extern int V_NVSHUNT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVSHUNT_string(const char *str, char **endptr);
extern int string_to_V_NVSHUNT(const char *str, void *pValue, char **endptr);
extern int is_V_NVSHUNT_allow_double_conversion();
extern int V_NVSHUNT_to_double(const void *pValue, double *nValue);
extern int get_V_NVSHUNT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVSHUNT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVSHUNT_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVSHUNT_Utils;

/****************************************************************
 ** V_NVSTFF 
 ****************************************************************/
extern int V_NVSTFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVSTFF_string(const char *str, char **endptr);
extern int string_to_V_NVSTFF(const char *str, void *pValue, char **endptr);
extern int is_V_NVSTFF_allow_double_conversion();
extern int V_NVSTFF_to_double(const void *pValue, double *nValue);
extern int get_V_NVSTFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVSTFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVSTFF_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVSTFF_Utils;

/****************************************************************
 ** V_NVONSIGHT 
 ****************************************************************/
extern int V_NVONSIGHT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVONSIGHT_string(const char *str, char **endptr);
extern int string_to_V_NVONSIGHT(const char *str, void *pValue, char **endptr);
extern int is_V_NVONSIGHT_allow_double_conversion();
extern int V_NVONSIGHT_to_double(const void *pValue, double *nValue);
extern int get_V_NVONSIGHT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVONSIGHT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVONSIGHT_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVONSIGHT_Utils;

/****************************************************************
 ** V_NVLIMSUPERV 
 ****************************************************************/
extern int V_NVLIMSUPERV_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVLIMSUPERV_string(const char *str, char **endptr);
extern int string_to_V_NVLIMSUPERV(const char *str, void *pValue, char **endptr);
extern int is_V_NVLIMSUPERV_allow_double_conversion();
extern int V_NVLIMSUPERV_to_double(const void *pValue, double *nValue);
extern int get_V_NVLIMSUPERV_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVLIMSUPERV(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVLIMSUPERV_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVLIMSUPERV_Utils;

/****************************************************************
 ** V_NVUNFIT 
 ****************************************************************/
extern int V_NVUNFIT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVUNFIT_string(const char *str, char **endptr);
extern int string_to_V_NVUNFIT(const char *str, void *pValue, char **endptr);
extern int is_V_NVUNFIT_allow_double_conversion();
extern int V_NVUNFIT_to_double(const void *pValue, double *nValue);
extern int get_V_NVUNFIT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVUNFIT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVUNFIT_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVUNFIT_Utils;

/****************************************************************
 ** V_NVREL 
 ****************************************************************/
extern int V_NVREL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVREL_string(const char *str, char **endptr);
extern int string_to_V_NVREL(const char *str, void *pValue, char **endptr);
extern int is_V_NVREL_allow_double_conversion();
extern int V_NVREL_to_double(const void *pValue, double *nValue);
extern int get_V_NVREL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVREL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVREL_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVREL_Utils;

/****************************************************************
 ** D_NVROLL 
 ****************************************************************/
extern int D_NVROLL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_NVROLL_string(const char *str, char **endptr);
extern int string_to_D_NVROLL(const char *str, void *pValue, char **endptr);
extern int is_D_NVROLL_allow_double_conversion();
extern int D_NVROLL_to_double(const void *pValue, double *nValue);
extern int get_D_NVROLL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_NVROLL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_NVROLL_default_value(void *pValue);
extern SimTypeUtils _Type_D_NVROLL_Utils;

/****************************************************************
 ** Q_NVGUIPERM 
 ****************************************************************/
extern int Q_NVGUIPERM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVGUIPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVGUIPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVGUIPERM_allow_double_conversion();
extern int Q_NVGUIPERM_to_double(const void *pValue, double *nValue);
extern int get_Q_NVGUIPERM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVGUIPERM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVGUIPERM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVGUIPERM_Utils;

/****************************************************************
 ** Q_NVSBFBPERM 
 ****************************************************************/
extern int Q_NVSBFBPERM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVSBFBPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVSBFBPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVSBFBPERM_allow_double_conversion();
extern int Q_NVSBFBPERM_to_double(const void *pValue, double *nValue);
extern int get_Q_NVSBFBPERM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVSBFBPERM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVSBFBPERM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVSBFBPERM_Utils;

/****************************************************************
 ** Q_NVINHSMICPERM 
 ****************************************************************/
extern int Q_NVINHSMICPERM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVINHSMICPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVINHSMICPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVINHSMICPERM_allow_double_conversion();
extern int Q_NVINHSMICPERM_to_double(const void *pValue, double *nValue);
extern int get_Q_NVINHSMICPERM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVINHSMICPERM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVINHSMICPERM_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVINHSMICPERM_Utils;

/****************************************************************
 ** V_NVALLOWOVTRP 
 ****************************************************************/
extern int V_NVALLOWOVTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVALLOWOVTRP_string(const char *str, char **endptr);
extern int string_to_V_NVALLOWOVTRP(const char *str, void *pValue, char **endptr);
extern int is_V_NVALLOWOVTRP_allow_double_conversion();
extern int V_NVALLOWOVTRP_to_double(const void *pValue, double *nValue);
extern int get_V_NVALLOWOVTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVALLOWOVTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVALLOWOVTRP_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVALLOWOVTRP_Utils;

/****************************************************************
 ** V_NVSUPOVTRP 
 ****************************************************************/
extern int V_NVSUPOVTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVSUPOVTRP_string(const char *str, char **endptr);
extern int string_to_V_NVSUPOVTRP(const char *str, void *pValue, char **endptr);
extern int is_V_NVSUPOVTRP_allow_double_conversion();
extern int V_NVSUPOVTRP_to_double(const void *pValue, double *nValue);
extern int get_V_NVSUPOVTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVSUPOVTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVSUPOVTRP_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVSUPOVTRP_Utils;

/****************************************************************
 ** D_NVOVTRP 
 ****************************************************************/
extern int D_NVOVTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_NVOVTRP_string(const char *str, char **endptr);
extern int string_to_D_NVOVTRP(const char *str, void *pValue, char **endptr);
extern int is_D_NVOVTRP_allow_double_conversion();
extern int D_NVOVTRP_to_double(const void *pValue, double *nValue);
extern int get_D_NVOVTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_NVOVTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_NVOVTRP_default_value(void *pValue);
extern SimTypeUtils _Type_D_NVOVTRP_Utils;

/****************************************************************
 ** T_NVOVTRP 
 ****************************************************************/
extern int T_NVOVTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_NVOVTRP_string(const char *str, char **endptr);
extern int string_to_T_NVOVTRP(const char *str, void *pValue, char **endptr);
extern int is_T_NVOVTRP_allow_double_conversion();
extern int T_NVOVTRP_to_double(const void *pValue, double *nValue);
extern int get_T_NVOVTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_NVOVTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_NVOVTRP_default_value(void *pValue);
extern SimTypeUtils _Type_T_NVOVTRP_Utils;

/****************************************************************
 ** D_NVPOTRP 
 ****************************************************************/
extern int D_NVPOTRP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_NVPOTRP_string(const char *str, char **endptr);
extern int string_to_D_NVPOTRP(const char *str, void *pValue, char **endptr);
extern int is_D_NVPOTRP_allow_double_conversion();
extern int D_NVPOTRP_to_double(const void *pValue, double *nValue);
extern int get_D_NVPOTRP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_NVPOTRP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_NVPOTRP_default_value(void *pValue);
extern SimTypeUtils _Type_D_NVPOTRP_Utils;

/****************************************************************
 ** M_NVCONTACT 
 ****************************************************************/
extern int M_NVCONTACT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVCONTACT_string(const char *str, char **endptr);
extern int string_to_M_NVCONTACT(const char *str, void *pValue, char **endptr);
extern int is_M_NVCONTACT_allow_double_conversion();
extern int M_NVCONTACT_to_double(const void *pValue, double *nValue);
extern int get_M_NVCONTACT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVCONTACT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVCONTACT_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVCONTACT_Utils;

/****************************************************************
 ** T_NVCONTACT 
 ****************************************************************/
extern int T_NVCONTACT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_NVCONTACT_string(const char *str, char **endptr);
extern int string_to_T_NVCONTACT(const char *str, void *pValue, char **endptr);
extern int is_T_NVCONTACT_allow_double_conversion();
extern int T_NVCONTACT_to_double(const void *pValue, double *nValue);
extern int get_T_NVCONTACT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_NVCONTACT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_NVCONTACT_default_value(void *pValue);
extern SimTypeUtils _Type_T_NVCONTACT_Utils;

/****************************************************************
 ** M_NVDERUN 
 ****************************************************************/
extern int M_NVDERUN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVDERUN_string(const char *str, char **endptr);
extern int string_to_M_NVDERUN(const char *str, void *pValue, char **endptr);
extern int is_M_NVDERUN_allow_double_conversion();
extern int M_NVDERUN_to_double(const void *pValue, double *nValue);
extern int get_M_NVDERUN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVDERUN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVDERUN_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVDERUN_Utils;

/****************************************************************
 ** D_NVSTFF 
 ****************************************************************/
extern int D_NVSTFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_NVSTFF_string(const char *str, char **endptr);
extern int string_to_D_NVSTFF(const char *str, void *pValue, char **endptr);
extern int is_D_NVSTFF_allow_double_conversion();
extern int D_NVSTFF_to_double(const void *pValue, double *nValue);
extern int get_D_NVSTFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_NVSTFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_NVSTFF_default_value(void *pValue);
extern SimTypeUtils _Type_D_NVSTFF_Utils;

/****************************************************************
 ** Q_NVDRIVER_ADHES 
 ****************************************************************/
extern int Q_NVDRIVER_ADHES_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVDRIVER_ADHES_string(const char *str, char **endptr);
extern int string_to_Q_NVDRIVER_ADHES(const char *str, void *pValue, char **endptr);
extern int is_Q_NVDRIVER_ADHES_allow_double_conversion();
extern int Q_NVDRIVER_ADHES_to_double(const void *pValue, double *nValue);
extern int get_Q_NVDRIVER_ADHES_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVDRIVER_ADHES(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVDRIVER_ADHES_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVDRIVER_ADHES_Utils;

/****************************************************************
 ** A_NVMAXREDADH1 
 ****************************************************************/
extern int A_NVMAXREDADH1_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVMAXREDADH1_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH1(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH1_allow_double_conversion();
extern int A_NVMAXREDADH1_to_double(const void *pValue, double *nValue);
extern int get_A_NVMAXREDADH1_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVMAXREDADH1(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVMAXREDADH1_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVMAXREDADH1_Utils;

/****************************************************************
 ** A_NVMAXREDADH2 
 ****************************************************************/
extern int A_NVMAXREDADH2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVMAXREDADH2_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH2(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH2_allow_double_conversion();
extern int A_NVMAXREDADH2_to_double(const void *pValue, double *nValue);
extern int get_A_NVMAXREDADH2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVMAXREDADH2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVMAXREDADH2_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVMAXREDADH2_Utils;

/****************************************************************
 ** A_NVMAXREDADH3 
 ****************************************************************/
extern int A_NVMAXREDADH3_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVMAXREDADH3_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH3(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH3_allow_double_conversion();
extern int A_NVMAXREDADH3_to_double(const void *pValue, double *nValue);
extern int get_A_NVMAXREDADH3_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVMAXREDADH3(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVMAXREDADH3_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVMAXREDADH3_Utils;

/****************************************************************
 ** M_NVAVADH 
 ****************************************************************/
extern int M_NVAVADH_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVAVADH_string(const char *str, char **endptr);
extern int string_to_M_NVAVADH(const char *str, void *pValue, char **endptr);
extern int is_M_NVAVADH_allow_double_conversion();
extern int M_NVAVADH_to_double(const void *pValue, double *nValue);
extern int get_M_NVAVADH_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVAVADH(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVAVADH_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVAVADH_Utils;

/****************************************************************
 ** M_NVEBCL 
 ****************************************************************/
extern int M_NVEBCL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVEBCL_string(const char *str, char **endptr);
extern int string_to_M_NVEBCL(const char *str, void *pValue, char **endptr);
extern int is_M_NVEBCL_allow_double_conversion();
extern int M_NVEBCL_to_double(const void *pValue, double *nValue);
extern int get_M_NVEBCL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVEBCL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVEBCL_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVEBCL_Utils;

/****************************************************************
 ** Q_NVKINT 
 ****************************************************************/
extern int Q_NVKINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVKINT_string(const char *str, char **endptr);
extern int string_to_Q_NVKINT(const char *str, void *pValue, char **endptr);
extern int is_Q_NVKINT_allow_double_conversion();
extern int Q_NVKINT_to_double(const void *pValue, double *nValue);
extern int get_Q_NVKINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVKINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVKINT_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVKINT_Utils;

/****************************************************************
 ** Q_NVKVINTSET 
 ****************************************************************/
extern int Q_NVKVINTSET_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_NVKVINTSET_string(const char *str, char **endptr);
extern int string_to_Q_NVKVINTSET(const char *str, void *pValue, char **endptr);
extern int is_Q_NVKVINTSET_allow_double_conversion();
extern int Q_NVKVINTSET_to_double(const void *pValue, double *nValue);
extern int get_Q_NVKVINTSET_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_NVKVINTSET(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_NVKVINTSET_default_value(void *pValue);
extern SimTypeUtils _Type_Q_NVKVINTSET_Utils;

/****************************************************************
 ** A_NVP12 
 ****************************************************************/
extern int A_NVP12_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVP12_string(const char *str, char **endptr);
extern int string_to_A_NVP12(const char *str, void *pValue, char **endptr);
extern int is_A_NVP12_allow_double_conversion();
extern int A_NVP12_to_double(const void *pValue, double *nValue);
extern int get_A_NVP12_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVP12(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVP12_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVP12_Utils;

/****************************************************************
 ** A_NVP23 
 ****************************************************************/
extern int A_NVP23_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_NVP23_string(const char *str, char **endptr);
extern int string_to_A_NVP23(const char *str, void *pValue, char **endptr);
extern int is_A_NVP23_allow_double_conversion();
extern int A_NVP23_to_double(const void *pValue, double *nValue);
extern int get_A_NVP23_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_NVP23(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_NVP23_default_value(void *pValue);
extern SimTypeUtils _Type_A_NVP23_Utils;

/****************************************************************
 ** V_NVKVINT 
 ****************************************************************/
extern int V_NVKVINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_NVKVINT_string(const char *str, char **endptr);
extern int string_to_V_NVKVINT(const char *str, void *pValue, char **endptr);
extern int is_V_NVKVINT_allow_double_conversion();
extern int V_NVKVINT_to_double(const void *pValue, double *nValue);
extern int get_V_NVKVINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_NVKVINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_NVKVINT_default_value(void *pValue);
extern SimTypeUtils _Type_V_NVKVINT_Utils;

/****************************************************************
 ** M_NVKVINT 
 ****************************************************************/
extern int M_NVKVINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVKVINT_string(const char *str, char **endptr);
extern int string_to_M_NVKVINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKVINT_allow_double_conversion();
extern int M_NVKVINT_to_double(const void *pValue, double *nValue);
extern int get_M_NVKVINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVKVINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVKVINT_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVKVINT_Utils;

/****************************************************************
 ** L_NVKRINT 
 ****************************************************************/
extern int L_NVKRINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_NVKRINT_string(const char *str, char **endptr);
extern int string_to_L_NVKRINT(const char *str, void *pValue, char **endptr);
extern int is_L_NVKRINT_allow_double_conversion();
extern int L_NVKRINT_to_double(const void *pValue, double *nValue);
extern int get_L_NVKRINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_NVKRINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_NVKRINT_default_value(void *pValue);
extern SimTypeUtils _Type_L_NVKRINT_Utils;

/****************************************************************
 ** M_NVKRINT 
 ****************************************************************/
extern int M_NVKRINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVKRINT_string(const char *str, char **endptr);
extern int string_to_M_NVKRINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKRINT_allow_double_conversion();
extern int M_NVKRINT_to_double(const void *pValue, double *nValue);
extern int get_M_NVKRINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVKRINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVKRINT_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVKRINT_Utils;

/****************************************************************
 ** M_NVKTINT 
 ****************************************************************/
extern int M_NVKTINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_NVKTINT_string(const char *str, char **endptr);
extern int string_to_M_NVKTINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKTINT_allow_double_conversion();
extern int M_NVKTINT_to_double(const void *pValue, double *nValue);
extern int get_M_NVKTINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_NVKTINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_NVKTINT_default_value(void *pValue);
extern SimTypeUtils _Type_M_NVKTINT_Utils;

/****************************************************************
 ** N_ITER 
 ****************************************************************/
extern int N_ITER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_N_ITER_string(const char *str, char **endptr);
extern int string_to_N_ITER(const char *str, void *pValue, char **endptr);
extern int is_N_ITER_allow_double_conversion();
extern int N_ITER_to_double(const void *pValue, double *nValue);
extern int get_N_ITER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_N_ITER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_N_ITER_default_value(void *pValue);
extern SimTypeUtils _Type_N_ITER_Utils;

/****************************************************************
 ** NID_ENGINE 
 ****************************************************************/
extern int NID_ENGINE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_ENGINE_string(const char *str, char **endptr);
extern int string_to_NID_ENGINE(const char *str, void *pValue, char **endptr);
extern int is_NID_ENGINE_allow_double_conversion();
extern int NID_ENGINE_to_double(const void *pValue, double *nValue);
extern int get_NID_ENGINE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_ENGINE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_ENGINE_default_value(void *pValue);
extern SimTypeUtils _Type_NID_ENGINE_Utils;

/****************************************************************
 ** L_TRAIN 
 ****************************************************************/
extern int L_TRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_TRAIN_string(const char *str, char **endptr);
extern int string_to_L_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_L_TRAIN_allow_double_conversion();
extern int L_TRAIN_to_double(const void *pValue, double *nValue);
extern int get_L_TRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_TRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_L_TRAIN_Utils;

/****************************************************************
 ** N_PIG 
 ****************************************************************/
extern int N_PIG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_N_PIG_string(const char *str, char **endptr);
extern int string_to_N_PIG(const char *str, void *pValue, char **endptr);
extern int is_N_PIG_allow_double_conversion();
extern int N_PIG_to_double(const void *pValue, double *nValue);
extern int get_N_PIG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_N_PIG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_N_PIG_default_value(void *pValue);
extern SimTypeUtils _Type_N_PIG_Utils;

/****************************************************************
 ** M_DUP 
 ****************************************************************/
extern int M_DUP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_DUP_string(const char *str, char **endptr);
extern int string_to_M_DUP(const char *str, void *pValue, char **endptr);
extern int is_M_DUP_allow_double_conversion();
extern int M_DUP_to_double(const void *pValue, double *nValue);
extern int get_M_DUP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_DUP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_DUP_default_value(void *pValue);
extern SimTypeUtils _Type_M_DUP_Utils;

/****************************************************************
 ** NID_PACKET 
 ****************************************************************/
extern int NID_PACKET_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_PACKET_string(const char *str, char **endptr);
extern int string_to_NID_PACKET(const char *str, void *pValue, char **endptr);
extern int is_NID_PACKET_allow_double_conversion();
extern int NID_PACKET_to_double(const void *pValue, double *nValue);
extern int get_NID_PACKET_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_PACKET(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_PACKET_default_value(void *pValue);
extern SimTypeUtils _Type_NID_PACKET_Utils;

/****************************************************************
 ** D_LEVELTR 
 ****************************************************************/
extern int D_LEVELTR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_LEVELTR_string(const char *str, char **endptr);
extern int string_to_D_LEVELTR(const char *str, void *pValue, char **endptr);
extern int is_D_LEVELTR_allow_double_conversion();
extern int D_LEVELTR_to_double(const void *pValue, double *nValue);
extern int get_D_LEVELTR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_LEVELTR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_LEVELTR_default_value(void *pValue);
extern SimTypeUtils _Type_D_LEVELTR_Utils;

/****************************************************************
 ** M_LEVELTR 
 ****************************************************************/
extern int M_LEVELTR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_LEVELTR_string(const char *str, char **endptr);
extern int string_to_M_LEVELTR(const char *str, void *pValue, char **endptr);
extern int is_M_LEVELTR_allow_double_conversion();
extern int M_LEVELTR_to_double(const void *pValue, double *nValue);
extern int get_M_LEVELTR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_LEVELTR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_LEVELTR_default_value(void *pValue);
extern SimTypeUtils _Type_M_LEVELTR_Utils;

/****************************************************************
 ** L_ACKLEVELTR 
 ****************************************************************/
extern int L_ACKLEVELTR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_ACKLEVELTR_string(const char *str, char **endptr);
extern int string_to_L_ACKLEVELTR(const char *str, void *pValue, char **endptr);
extern int is_L_ACKLEVELTR_allow_double_conversion();
extern int L_ACKLEVELTR_to_double(const void *pValue, double *nValue);
extern int get_L_ACKLEVELTR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_ACKLEVELTR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_ACKLEVELTR_default_value(void *pValue);
extern SimTypeUtils _Type_L_ACKLEVELTR_Utils;

/****************************************************************
 ** D_DP 
 ****************************************************************/
extern int D_DP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_DP_string(const char *str, char **endptr);
extern int string_to_D_DP(const char *str, void *pValue, char **endptr);
extern int is_D_DP_allow_double_conversion();
extern int D_DP_to_double(const void *pValue, double *nValue);
extern int get_D_DP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_DP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_DP_default_value(void *pValue);
extern SimTypeUtils _Type_D_DP_Utils;

/****************************************************************
 ** D_OL 
 ****************************************************************/
extern int D_OL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_OL_string(const char *str, char **endptr);
extern int string_to_D_OL(const char *str, void *pValue, char **endptr);
extern int is_D_OL_allow_double_conversion();
extern int D_OL_to_double(const void *pValue, double *nValue);
extern int get_D_OL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_OL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_OL_default_value(void *pValue);
extern SimTypeUtils _Type_D_OL_Utils;

/****************************************************************
 ** V_LOA 
 ****************************************************************/
extern int V_LOA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_LOA_string(const char *str, char **endptr);
extern int string_to_V_LOA(const char *str, void *pValue, char **endptr);
extern int is_V_LOA_allow_double_conversion();
extern int V_LOA_to_double(const void *pValue, double *nValue);
extern int get_V_LOA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_LOA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_LOA_default_value(void *pValue);
extern SimTypeUtils _Type_V_LOA_Utils;

/****************************************************************
 ** T_ENDTIMER 
 ****************************************************************/
extern int T_ENDTIMER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_ENDTIMER_string(const char *str, char **endptr);
extern int string_to_T_ENDTIMER(const char *str, void *pValue, char **endptr);
extern int is_T_ENDTIMER_allow_double_conversion();
extern int T_ENDTIMER_to_double(const void *pValue, double *nValue);
extern int get_T_ENDTIMER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_ENDTIMER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_ENDTIMER_default_value(void *pValue);
extern SimTypeUtils _Type_T_ENDTIMER_Utils;

/****************************************************************
 ** L_SECTION 
 ****************************************************************/
extern int L_SECTION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_SECTION_string(const char *str, char **endptr);
extern int string_to_L_SECTION(const char *str, void *pValue, char **endptr);
extern int is_L_SECTION_allow_double_conversion();
extern int L_SECTION_to_double(const void *pValue, double *nValue);
extern int get_L_SECTION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_SECTION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_SECTION_default_value(void *pValue);
extern SimTypeUtils _Type_L_SECTION_Utils;

/****************************************************************
 ** Q_SECTIONTIMER 
 ****************************************************************/
extern int Q_SECTIONTIMER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_SECTIONTIMER_string(const char *str, char **endptr);
extern int string_to_Q_SECTIONTIMER(const char *str, void *pValue, char **endptr);
extern int is_Q_SECTIONTIMER_allow_double_conversion();
extern int Q_SECTIONTIMER_to_double(const void *pValue, double *nValue);
extern int get_Q_SECTIONTIMER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_SECTIONTIMER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_SECTIONTIMER_default_value(void *pValue);
extern SimTypeUtils _Type_Q_SECTIONTIMER_Utils;

/****************************************************************
 ** T_SECTIONTIMER 
 ****************************************************************/
extern int T_SECTIONTIMER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_SECTIONTIMER_string(const char *str, char **endptr);
extern int string_to_T_SECTIONTIMER(const char *str, void *pValue, char **endptr);
extern int is_T_SECTIONTIMER_allow_double_conversion();
extern int T_SECTIONTIMER_to_double(const void *pValue, double *nValue);
extern int get_T_SECTIONTIMER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_SECTIONTIMER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_SECTIONTIMER_default_value(void *pValue);
extern SimTypeUtils _Type_T_SECTIONTIMER_Utils;

/****************************************************************
 ** D_SECTIONTIMERSTOPLOC 
 ****************************************************************/
extern int D_SECTIONTIMERSTOPLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_SECTIONTIMERSTOPLOC_string(const char *str, char **endptr);
extern int string_to_D_SECTIONTIMERSTOPLOC(const char *str, void *pValue, char **endptr);
extern int is_D_SECTIONTIMERSTOPLOC_allow_double_conversion();
extern int D_SECTIONTIMERSTOPLOC_to_double(const void *pValue, double *nValue);
extern int get_D_SECTIONTIMERSTOPLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_SECTIONTIMERSTOPLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_SECTIONTIMERSTOPLOC_default_value(void *pValue);
extern SimTypeUtils _Type_D_SECTIONTIMERSTOPLOC_Utils;

/****************************************************************
 ** Q_OVERLAP 
 ****************************************************************/
extern int Q_OVERLAP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_OVERLAP_string(const char *str, char **endptr);
extern int string_to_Q_OVERLAP(const char *str, void *pValue, char **endptr);
extern int is_Q_OVERLAP_allow_double_conversion();
extern int Q_OVERLAP_to_double(const void *pValue, double *nValue);
extern int get_Q_OVERLAP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_OVERLAP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_OVERLAP_default_value(void *pValue);
extern SimTypeUtils _Type_Q_OVERLAP_Utils;

/****************************************************************
 ** Q_DANGERPOINT 
 ****************************************************************/
extern int Q_DANGERPOINT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DANGERPOINT_string(const char *str, char **endptr);
extern int string_to_Q_DANGERPOINT(const char *str, void *pValue, char **endptr);
extern int is_Q_DANGERPOINT_allow_double_conversion();
extern int Q_DANGERPOINT_to_double(const void *pValue, double *nValue);
extern int get_Q_DANGERPOINT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DANGERPOINT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DANGERPOINT_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DANGERPOINT_Utils;

/****************************************************************
 ** T_LOA 
 ****************************************************************/
extern int T_LOA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_LOA_string(const char *str, char **endptr);
extern int string_to_T_LOA(const char *str, void *pValue, char **endptr);
extern int is_T_LOA_allow_double_conversion();
extern int T_LOA_to_double(const void *pValue, double *nValue);
extern int get_T_LOA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_LOA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_LOA_default_value(void *pValue);
extern SimTypeUtils _Type_T_LOA_Utils;

/****************************************************************
 ** L_ENDSECTION 
 ****************************************************************/
extern int L_ENDSECTION_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_ENDSECTION_string(const char *str, char **endptr);
extern int string_to_L_ENDSECTION(const char *str, void *pValue, char **endptr);
extern int is_L_ENDSECTION_allow_double_conversion();
extern int L_ENDSECTION_to_double(const void *pValue, double *nValue);
extern int get_L_ENDSECTION_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_ENDSECTION(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_ENDSECTION_default_value(void *pValue);
extern SimTypeUtils _Type_L_ENDSECTION_Utils;

/****************************************************************
 ** Q_ENDTIMER 
 ****************************************************************/
extern int Q_ENDTIMER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_ENDTIMER_string(const char *str, char **endptr);
extern int string_to_Q_ENDTIMER(const char *str, void *pValue, char **endptr);
extern int is_Q_ENDTIMER_allow_double_conversion();
extern int Q_ENDTIMER_to_double(const void *pValue, double *nValue);
extern int get_Q_ENDTIMER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_ENDTIMER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_ENDTIMER_default_value(void *pValue);
extern SimTypeUtils _Type_Q_ENDTIMER_Utils;

/****************************************************************
 ** D_ENDTIMERSTARTLOC 
 ****************************************************************/
extern int D_ENDTIMERSTARTLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_ENDTIMERSTARTLOC_string(const char *str, char **endptr);
extern int string_to_D_ENDTIMERSTARTLOC(const char *str, void *pValue, char **endptr);
extern int is_D_ENDTIMERSTARTLOC_allow_double_conversion();
extern int D_ENDTIMERSTARTLOC_to_double(const void *pValue, double *nValue);
extern int get_D_ENDTIMERSTARTLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_ENDTIMERSTARTLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_ENDTIMERSTARTLOC_default_value(void *pValue);
extern SimTypeUtils _Type_D_ENDTIMERSTARTLOC_Utils;

/****************************************************************
 ** V_RELEASEDP 
 ****************************************************************/
extern int V_RELEASEDP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_RELEASEDP_string(const char *str, char **endptr);
extern int string_to_V_RELEASEDP(const char *str, void *pValue, char **endptr);
extern int is_V_RELEASEDP_allow_double_conversion();
extern int V_RELEASEDP_to_double(const void *pValue, double *nValue);
extern int get_V_RELEASEDP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_RELEASEDP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_RELEASEDP_default_value(void *pValue);
extern SimTypeUtils _Type_V_RELEASEDP_Utils;

/****************************************************************
 ** D_STARTOL 
 ****************************************************************/
extern int D_STARTOL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_STARTOL_string(const char *str, char **endptr);
extern int string_to_D_STARTOL(const char *str, void *pValue, char **endptr);
extern int is_D_STARTOL_allow_double_conversion();
extern int D_STARTOL_to_double(const void *pValue, double *nValue);
extern int get_D_STARTOL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_STARTOL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_STARTOL_default_value(void *pValue);
extern SimTypeUtils _Type_D_STARTOL_Utils;

/****************************************************************
 ** T_OL 
 ****************************************************************/
extern int T_OL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_OL_string(const char *str, char **endptr);
extern int string_to_T_OL(const char *str, void *pValue, char **endptr);
extern int is_T_OL_allow_double_conversion();
extern int T_OL_to_double(const void *pValue, double *nValue);
extern int get_T_OL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_OL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_OL_default_value(void *pValue);
extern SimTypeUtils _Type_T_OL_Utils;

/****************************************************************
 ** V_RELEASEOL 
 ****************************************************************/
extern int V_RELEASEOL_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_RELEASEOL_string(const char *str, char **endptr);
extern int string_to_V_RELEASEOL(const char *str, void *pValue, char **endptr);
extern int is_V_RELEASEOL_allow_double_conversion();
extern int V_RELEASEOL_to_double(const void *pValue, double *nValue);
extern int get_V_RELEASEOL_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_RELEASEOL(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_RELEASEOL_default_value(void *pValue);
extern SimTypeUtils _Type_V_RELEASEOL_Utils;

/****************************************************************
 ** D_GRADIENT 
 ****************************************************************/
extern int D_GRADIENT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_GRADIENT_string(const char *str, char **endptr);
extern int string_to_D_GRADIENT(const char *str, void *pValue, char **endptr);
extern int is_D_GRADIENT_allow_double_conversion();
extern int D_GRADIENT_to_double(const void *pValue, double *nValue);
extern int get_D_GRADIENT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_GRADIENT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_GRADIENT_default_value(void *pValue);
extern SimTypeUtils _Type_D_GRADIENT_Utils;

/****************************************************************
 ** Q_GDIR 
 ****************************************************************/
extern int Q_GDIR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_GDIR_string(const char *str, char **endptr);
extern int string_to_Q_GDIR(const char *str, void *pValue, char **endptr);
extern int is_Q_GDIR_allow_double_conversion();
extern int Q_GDIR_to_double(const void *pValue, double *nValue);
extern int get_Q_GDIR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_GDIR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_GDIR_default_value(void *pValue);
extern SimTypeUtils _Type_Q_GDIR_Utils;

/****************************************************************
 ** G_A 
 ****************************************************************/
extern int G_A_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_G_A_string(const char *str, char **endptr);
extern int string_to_G_A(const char *str, void *pValue, char **endptr);
extern int is_G_A_allow_double_conversion();
extern int G_A_to_double(const void *pValue, double *nValue);
extern int get_G_A_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_G_A(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_G_A_default_value(void *pValue);
extern SimTypeUtils _Type_G_A_Utils;

/****************************************************************
 ** D_STATIC 
 ****************************************************************/
extern int D_STATIC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_STATIC_string(const char *str, char **endptr);
extern int string_to_D_STATIC(const char *str, void *pValue, char **endptr);
extern int is_D_STATIC_allow_double_conversion();
extern int D_STATIC_to_double(const void *pValue, double *nValue);
extern int get_D_STATIC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_STATIC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_STATIC_default_value(void *pValue);
extern SimTypeUtils _Type_D_STATIC_Utils;

/****************************************************************
 ** V_STATIC 
 ****************************************************************/
extern int V_STATIC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_STATIC_string(const char *str, char **endptr);
extern int string_to_V_STATIC(const char *str, void *pValue, char **endptr);
extern int is_V_STATIC_allow_double_conversion();
extern int V_STATIC_to_double(const void *pValue, double *nValue);
extern int get_V_STATIC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_STATIC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_STATIC_default_value(void *pValue);
extern SimTypeUtils _Type_V_STATIC_Utils;

/****************************************************************
 ** Q_FRONT 
 ****************************************************************/
extern int Q_FRONT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_FRONT_string(const char *str, char **endptr);
extern int string_to_Q_FRONT(const char *str, void *pValue, char **endptr);
extern int is_Q_FRONT_allow_double_conversion();
extern int Q_FRONT_to_double(const void *pValue, double *nValue);
extern int get_Q_FRONT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_FRONT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_FRONT_default_value(void *pValue);
extern SimTypeUtils _Type_Q_FRONT_Utils;

/****************************************************************
 ** NC_DIFF 
 ****************************************************************/
extern int NC_DIFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NC_DIFF_string(const char *str, char **endptr);
extern int string_to_NC_DIFF(const char *str, void *pValue, char **endptr);
extern int is_NC_DIFF_allow_double_conversion();
extern int NC_DIFF_to_double(const void *pValue, double *nValue);
extern int get_NC_DIFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NC_DIFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NC_DIFF_default_value(void *pValue);
extern SimTypeUtils _Type_NC_DIFF_Utils;

/****************************************************************
 ** V_DIFF 
 ****************************************************************/
extern int V_DIFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_DIFF_string(const char *str, char **endptr);
extern int string_to_V_DIFF(const char *str, void *pValue, char **endptr);
extern int is_V_DIFF_allow_double_conversion();
extern int V_DIFF_to_double(const void *pValue, double *nValue);
extern int get_V_DIFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_DIFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_DIFF_default_value(void *pValue);
extern SimTypeUtils _Type_V_DIFF_Utils;

/****************************************************************
 ** Q_DIFF 
 ****************************************************************/
extern int Q_DIFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_DIFF_string(const char *str, char **endptr);
extern int string_to_Q_DIFF(const char *str, void *pValue, char **endptr);
extern int is_Q_DIFF_allow_double_conversion();
extern int Q_DIFF_to_double(const void *pValue, double *nValue);
extern int get_Q_DIFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_DIFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_DIFF_default_value(void *pValue);
extern SimTypeUtils _Type_Q_DIFF_Utils;

/****************************************************************
 ** NC_CDDIFF 
 ****************************************************************/
extern int NC_CDDIFF_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NC_CDDIFF_string(const char *str, char **endptr);
extern int string_to_NC_CDDIFF(const char *str, void *pValue, char **endptr);
extern int is_NC_CDDIFF_allow_double_conversion();
extern int NC_CDDIFF_to_double(const void *pValue, double *nValue);
extern int get_NC_CDDIFF_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NC_CDDIFF(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NC_CDDIFF_default_value(void *pValue);
extern SimTypeUtils _Type_NC_CDDIFF_Utils;

/****************************************************************
 ** V_MAIN 
 ****************************************************************/
extern int V_MAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_MAIN_string(const char *str, char **endptr);
extern int string_to_V_MAIN(const char *str, void *pValue, char **endptr);
extern int is_V_MAIN_allow_double_conversion();
extern int V_MAIN_to_double(const void *pValue, double *nValue);
extern int get_V_MAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_MAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_MAIN_default_value(void *pValue);
extern SimTypeUtils _Type_V_MAIN_Utils;

/****************************************************************
 ** D_MAMODE 
 ****************************************************************/
extern int D_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_MAMODE_string(const char *str, char **endptr);
extern int string_to_D_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_D_MAMODE_allow_double_conversion();
extern int D_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_D_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_D_MAMODE_Utils;

/****************************************************************
 ** M_MAMODE 
 ****************************************************************/
extern int M_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_MAMODE_string(const char *str, char **endptr);
extern int string_to_M_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_M_MAMODE_allow_double_conversion();
extern int M_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_M_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_M_MAMODE_Utils;

/****************************************************************
 ** V_MAMODE 
 ****************************************************************/
extern int V_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_MAMODE_string(const char *str, char **endptr);
extern int string_to_V_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_V_MAMODE_allow_double_conversion();
extern int V_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_V_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_V_MAMODE_Utils;

/****************************************************************
 ** L_MAMODE 
 ****************************************************************/
extern int L_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_MAMODE_string(const char *str, char **endptr);
extern int string_to_L_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_L_MAMODE_allow_double_conversion();
extern int L_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_L_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_L_MAMODE_Utils;

/****************************************************************
 ** L_ACKMAMODE 
 ****************************************************************/
extern int L_ACKMAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_ACKMAMODE_string(const char *str, char **endptr);
extern int string_to_L_ACKMAMODE(const char *str, void *pValue, char **endptr);
extern int is_L_ACKMAMODE_allow_double_conversion();
extern int L_ACKMAMODE_to_double(const void *pValue, double *nValue);
extern int get_L_ACKMAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_ACKMAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_ACKMAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_L_ACKMAMODE_Utils;

/****************************************************************
 ** Q_MAMODE 
 ****************************************************************/
extern int Q_MAMODE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_MAMODE_string(const char *str, char **endptr);
extern int string_to_Q_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_Q_MAMODE_allow_double_conversion();
extern int Q_MAMODE_to_double(const void *pValue, double *nValue);
extern int get_Q_MAMODE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_MAMODE_default_value(void *pValue);
extern SimTypeUtils _Type_Q_MAMODE_Utils;

/****************************************************************
 ** Q_SRSTOP 
 ****************************************************************/
extern int Q_SRSTOP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_SRSTOP_string(const char *str, char **endptr);
extern int string_to_Q_SRSTOP(const char *str, void *pValue, char **endptr);
extern int is_Q_SRSTOP_allow_double_conversion();
extern int Q_SRSTOP_to_double(const void *pValue, double *nValue);
extern int get_Q_SRSTOP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_SRSTOP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_SRSTOP_default_value(void *pValue);
extern SimTypeUtils _Type_Q_SRSTOP_Utils;

/****************************************************************
 ** D_STARTREVERSE 
 ****************************************************************/
extern int D_STARTREVERSE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_STARTREVERSE_string(const char *str, char **endptr);
extern int string_to_D_STARTREVERSE(const char *str, void *pValue, char **endptr);
extern int is_D_STARTREVERSE_allow_double_conversion();
extern int D_STARTREVERSE_to_double(const void *pValue, double *nValue);
extern int get_D_STARTREVERSE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_STARTREVERSE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_STARTREVERSE_default_value(void *pValue);
extern SimTypeUtils _Type_D_STARTREVERSE_Utils;

/****************************************************************
 ** L_REVERSEAREA 
 ****************************************************************/
extern int L_REVERSEAREA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_REVERSEAREA_string(const char *str, char **endptr);
extern int string_to_L_REVERSEAREA(const char *str, void *pValue, char **endptr);
extern int is_L_REVERSEAREA_allow_double_conversion();
extern int L_REVERSEAREA_to_double(const void *pValue, double *nValue);
extern int get_L_REVERSEAREA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_REVERSEAREA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_REVERSEAREA_default_value(void *pValue);
extern SimTypeUtils _Type_L_REVERSEAREA_Utils;

/****************************************************************
 ** D_REVERSE 
 ****************************************************************/
extern int D_REVERSE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_REVERSE_string(const char *str, char **endptr);
extern int string_to_D_REVERSE(const char *str, void *pValue, char **endptr);
extern int is_D_REVERSE_allow_double_conversion();
extern int D_REVERSE_to_double(const void *pValue, double *nValue);
extern int get_D_REVERSE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_REVERSE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_REVERSE_default_value(void *pValue);
extern SimTypeUtils _Type_D_REVERSE_Utils;

/****************************************************************
 ** V_REVERSE 
 ****************************************************************/
extern int V_REVERSE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_REVERSE_string(const char *str, char **endptr);
extern int string_to_V_REVERSE(const char *str, void *pValue, char **endptr);
extern int is_V_REVERSE_allow_double_conversion();
extern int V_REVERSE_to_double(const void *pValue, double *nValue);
extern int get_V_REVERSE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_REVERSE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_REVERSE_default_value(void *pValue);
extern SimTypeUtils _Type_V_REVERSE_Utils;

/****************************************************************
 ** M_ERROR 
 ****************************************************************/
extern int M_ERROR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_ERROR_string(const char *str, char **endptr);
extern int string_to_M_ERROR(const char *str, void *pValue, char **endptr);
extern int is_M_ERROR_allow_double_conversion();
extern int M_ERROR_to_double(const void *pValue, double *nValue);
extern int get_M_ERROR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_ERROR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_ERROR_default_value(void *pValue);
extern SimTypeUtils _Type_M_ERROR_Utils;

/****************************************************************
 ** L_PACKET 
 ****************************************************************/
extern int L_PACKET_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_PACKET_string(const char *str, char **endptr);
extern int string_to_L_PACKET(const char *str, void *pValue, char **endptr);
extern int is_L_PACKET_allow_double_conversion();
extern int L_PACKET_to_double(const void *pValue, double *nValue);
extern int get_L_PACKET_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_PACKET(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_PACKET_default_value(void *pValue);
extern SimTypeUtils _Type_L_PACKET_Utils;

/****************************************************************
 ** T_CYCLOC 
 ****************************************************************/
extern int T_CYCLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_CYCLOC_string(const char *str, char **endptr);
extern int string_to_T_CYCLOC(const char *str, void *pValue, char **endptr);
extern int is_T_CYCLOC_allow_double_conversion();
extern int T_CYCLOC_to_double(const void *pValue, double *nValue);
extern int get_T_CYCLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_CYCLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_CYCLOC_default_value(void *pValue);
extern SimTypeUtils _Type_T_CYCLOC_Utils;

/****************************************************************
 ** D_CYCLOC 
 ****************************************************************/
extern int D_CYCLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_CYCLOC_string(const char *str, char **endptr);
extern int string_to_D_CYCLOC(const char *str, void *pValue, char **endptr);
extern int is_D_CYCLOC_allow_double_conversion();
extern int D_CYCLOC_to_double(const void *pValue, double *nValue);
extern int get_D_CYCLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_CYCLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_CYCLOC_default_value(void *pValue);
extern SimTypeUtils _Type_D_CYCLOC_Utils;

/****************************************************************
 ** M_LOC 
 ****************************************************************/
extern int M_LOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_LOC_string(const char *str, char **endptr);
extern int string_to_M_LOC(const char *str, void *pValue, char **endptr);
extern int is_M_LOC_allow_double_conversion();
extern int M_LOC_to_double(const void *pValue, double *nValue);
extern int get_M_LOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_LOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_LOC_default_value(void *pValue);
extern SimTypeUtils _Type_M_LOC_Utils;

/****************************************************************
 ** D_LOC 
 ****************************************************************/
extern int D_LOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_LOC_string(const char *str, char **endptr);
extern int string_to_D_LOC(const char *str, void *pValue, char **endptr);
extern int is_D_LOC_allow_double_conversion();
extern int D_LOC_to_double(const void *pValue, double *nValue);
extern int get_D_LOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_LOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_LOC_default_value(void *pValue);
extern SimTypeUtils _Type_D_LOC_Utils;

/****************************************************************
 ** Q_LGTLOC 
 ****************************************************************/
extern int Q_LGTLOC_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LGTLOC_string(const char *str, char **endptr);
extern int string_to_Q_LGTLOC(const char *str, void *pValue, char **endptr);
extern int is_Q_LGTLOC_allow_double_conversion();
extern int Q_LGTLOC_to_double(const void *pValue, double *nValue);
extern int get_Q_LGTLOC_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LGTLOC(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LGTLOC_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LGTLOC_Utils;

/****************************************************************
 ** Q_MARQSTREASON 
 ****************************************************************/
extern int Q_MARQSTREASON_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_MARQSTREASON_string(const char *str, char **endptr);
extern int string_to_Q_MARQSTREASON(const char *str, void *pValue, char **endptr);
extern int is_Q_MARQSTREASON_allow_double_conversion();
extern int Q_MARQSTREASON_to_double(const void *pValue, double *nValue);
extern int get_Q_MARQSTREASON_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_MARQSTREASON(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_MARQSTREASON_default_value(void *pValue);
extern SimTypeUtils _Type_Q_MARQSTREASON_Utils;

/****************************************************************
 ** Q_EMERGENCYSTOP 
 ****************************************************************/
extern int Q_EMERGENCYSTOP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_EMERGENCYSTOP_string(const char *str, char **endptr);
extern int string_to_Q_EMERGENCYSTOP(const char *str, void *pValue, char **endptr);
extern int is_Q_EMERGENCYSTOP_allow_double_conversion();
extern int Q_EMERGENCYSTOP_to_double(const void *pValue, double *nValue);
extern int get_Q_EMERGENCYSTOP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_EMERGENCYSTOP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_EMERGENCYSTOP_default_value(void *pValue);
extern SimTypeUtils _Type_Q_EMERGENCYSTOP_Utils;

/****************************************************************
 ** Q_LENGTH 
 ****************************************************************/
extern int Q_LENGTH_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Q_LENGTH_string(const char *str, char **endptr);
extern int string_to_Q_LENGTH(const char *str, void *pValue, char **endptr);
extern int is_Q_LENGTH_allow_double_conversion();
extern int Q_LENGTH_to_double(const void *pValue, double *nValue);
extern int get_Q_LENGTH_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Q_LENGTH(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Q_LENGTH_default_value(void *pValue);
extern SimTypeUtils _Type_Q_LENGTH_Utils;

/****************************************************************
 ** NID_LTRBG 
 ****************************************************************/
extern int NID_LTRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_LTRBG_string(const char *str, char **endptr);
extern int string_to_NID_LTRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_LTRBG_allow_double_conversion();
extern int NID_LTRBG_to_double(const void *pValue, double *nValue);
extern int get_NID_LTRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_LTRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_LTRBG_default_value(void *pValue);
extern SimTypeUtils _Type_NID_LTRBG_Utils;

/****************************************************************
 ** N_AXLE 
 ****************************************************************/
extern int N_AXLE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_N_AXLE_string(const char *str, char **endptr);
extern int string_to_N_AXLE(const char *str, void *pValue, char **endptr);
extern int is_N_AXLE_allow_double_conversion();
extern int N_AXLE_to_double(const void *pValue, double *nValue);
extern int get_N_AXLE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_N_AXLE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_N_AXLE_default_value(void *pValue);
extern SimTypeUtils _Type_N_AXLE_Utils;

/****************************************************************
 ** L_DOUBTOVER 
 ****************************************************************/
extern int L_DOUBTOVER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_DOUBTOVER_string(const char *str, char **endptr);
extern int string_to_L_DOUBTOVER(const char *str, void *pValue, char **endptr);
extern int is_L_DOUBTOVER_allow_double_conversion();
extern int L_DOUBTOVER_to_double(const void *pValue, double *nValue);
extern int get_L_DOUBTOVER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_DOUBTOVER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_DOUBTOVER_default_value(void *pValue);
extern SimTypeUtils _Type_L_DOUBTOVER_Utils;

/****************************************************************
 ** L_TRAININT 
 ****************************************************************/
extern int L_TRAININT_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_TRAININT_string(const char *str, char **endptr);
extern int string_to_L_TRAININT(const char *str, void *pValue, char **endptr);
extern int is_L_TRAININT_allow_double_conversion();
extern int L_TRAININT_to_double(const void *pValue, double *nValue);
extern int get_L_TRAININT_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_TRAININT(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_TRAININT_default_value(void *pValue);
extern SimTypeUtils _Type_L_TRAININT_Utils;

/****************************************************************
 ** L_DOUBTUNDER 
 ****************************************************************/
extern int L_DOUBTUNDER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_DOUBTUNDER_string(const char *str, char **endptr);
extern int string_to_L_DOUBTUNDER(const char *str, void *pValue, char **endptr);
extern int is_L_DOUBTUNDER_allow_double_conversion();
extern int L_DOUBTUNDER_to_double(const void *pValue, double *nValue);
extern int get_L_DOUBTUNDER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_DOUBTUNDER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_DOUBTUNDER_default_value(void *pValue);
extern SimTypeUtils _Type_L_DOUBTUNDER_Utils;

/****************************************************************
 ** NID_XUSER 
 ****************************************************************/
extern int NID_XUSER_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_XUSER_string(const char *str, char **endptr);
extern int string_to_NID_XUSER(const char *str, void *pValue, char **endptr);
extern int is_NID_XUSER_allow_double_conversion();
extern int NID_XUSER_to_double(const void *pValue, double *nValue);
extern int get_NID_XUSER_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_XUSER(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_XUSER_default_value(void *pValue);
extern SimTypeUtils _Type_NID_XUSER_Utils;

/****************************************************************
 ** NID_PRVLRBG 
 ****************************************************************/
extern int NID_PRVLRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_PRVLRBG_string(const char *str, char **endptr);
extern int string_to_NID_PRVLRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_PRVLRBG_allow_double_conversion();
extern int NID_PRVLRBG_to_double(const void *pValue, double *nValue);
extern int get_NID_PRVLRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_PRVLRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_PRVLRBG_default_value(void *pValue);
extern SimTypeUtils _Type_NID_PRVLRBG_Utils;

/****************************************************************
 ** D_LRBG 
 ****************************************************************/
extern int D_LRBG_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_LRBG_string(const char *str, char **endptr);
extern int string_to_D_LRBG(const char *str, void *pValue, char **endptr);
extern int is_D_LRBG_allow_double_conversion();
extern int D_LRBG_to_double(const void *pValue, double *nValue);
extern int get_D_LRBG_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_LRBG(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_LRBG_default_value(void *pValue);
extern SimTypeUtils _Type_D_LRBG_Utils;

/****************************************************************
 ** V_TRAIN 
 ****************************************************************/
extern int V_TRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_TRAIN_string(const char *str, char **endptr);
extern int string_to_V_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_V_TRAIN_allow_double_conversion();
extern int V_TRAIN_to_double(const void *pValue, double *nValue);
extern int get_V_TRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_TRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_V_TRAIN_Utils;

/****************************************************************
 ** L_MESSAGE 
 ****************************************************************/
extern int L_MESSAGE_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_MESSAGE_string(const char *str, char **endptr);
extern int string_to_L_MESSAGE(const char *str, void *pValue, char **endptr);
extern int is_L_MESSAGE_allow_double_conversion();
extern int L_MESSAGE_to_double(const void *pValue, double *nValue);
extern int get_L_MESSAGE_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_MESSAGE(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_MESSAGE_default_value(void *pValue);
extern SimTypeUtils _Type_L_MESSAGE_Utils;

/****************************************************************
 ** V_MAXTRAIN 
 ****************************************************************/
extern int V_MAXTRAIN_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_MAXTRAIN_string(const char *str, char **endptr);
extern int string_to_V_MAXTRAIN(const char *str, void *pValue, char **endptr);
extern int is_V_MAXTRAIN_allow_double_conversion();
extern int V_MAXTRAIN_to_double(const void *pValue, double *nValue);
extern int get_V_MAXTRAIN_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_MAXTRAIN(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_MAXTRAIN_default_value(void *pValue);
extern SimTypeUtils _Type_V_MAXTRAIN_Utils;

/****************************************************************
 ** T_MAR 
 ****************************************************************/
extern int T_MAR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_MAR_string(const char *str, char **endptr);
extern int string_to_T_MAR(const char *str, void *pValue, char **endptr);
extern int is_T_MAR_allow_double_conversion();
extern int T_MAR_to_double(const void *pValue, double *nValue);
extern int get_T_MAR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_MAR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_MAR_default_value(void *pValue);
extern SimTypeUtils _Type_T_MAR_Utils;

/****************************************************************
 ** T_TIMEOUTRQST 
 ****************************************************************/
extern int T_TIMEOUTRQST_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_TIMEOUTRQST_string(const char *str, char **endptr);
extern int string_to_T_TIMEOUTRQST(const char *str, void *pValue, char **endptr);
extern int is_T_TIMEOUTRQST_allow_double_conversion();
extern int T_TIMEOUTRQST_to_double(const void *pValue, double *nValue);
extern int get_T_TIMEOUTRQST_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_TIMEOUTRQST(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_TIMEOUTRQST_default_value(void *pValue);
extern SimTypeUtils _Type_T_TIMEOUTRQST_Utils;

/****************************************************************
 ** T_CYCRQST 
 ****************************************************************/
extern int T_CYCRQST_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_CYCRQST_string(const char *str, char **endptr);
extern int string_to_T_CYCRQST(const char *str, void *pValue, char **endptr);
extern int is_T_CYCRQST_allow_double_conversion();
extern int T_CYCRQST_to_double(const void *pValue, double *nValue);
extern int get_T_CYCRQST_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_CYCRQST(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_CYCRQST_default_value(void *pValue);
extern SimTypeUtils _Type_T_CYCRQST_Utils;

/****************************************************************
 ** D_RBCTR 
 ****************************************************************/
extern int D_RBCTR_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_RBCTR_string(const char *str, char **endptr);
extern int string_to_D_RBCTR(const char *str, void *pValue, char **endptr);
extern int is_D_RBCTR_allow_double_conversion();
extern int D_RBCTR_to_double(const void *pValue, double *nValue);
extern int get_D_RBCTR_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_RBCTR(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_RBCTR_default_value(void *pValue);
extern SimTypeUtils _Type_D_RBCTR_Utils;

/****************************************************************
 ** Clock_T 
 ****************************************************************/
extern int Clock_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Clock_T_string(const char *str, char **endptr);
extern int string_to_Clock_T(const char *str, void *pValue, char **endptr);
extern int is_Clock_T_allow_double_conversion();
extern int Clock_T_to_double(const void *pValue, double *nValue);
extern int get_Clock_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Clock_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Clock_T_default_value(void *pValue);
extern SimTypeUtils _Type_Clock_T_Utils;

/****************************************************************
 ** SessionManagement_T 
 ****************************************************************/
extern int SessionManagement_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SessionManagement_T_string(const char *str, char **endptr);
extern int string_to_SessionManagement_T(const char *str, void *pValue, char **endptr);
extern int is_SessionManagement_T_allow_double_conversion();
extern int SessionManagement_T_to_double(const void *pValue, double *nValue);
extern int get_SessionManagement_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SessionManagement_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SessionManagement_T_default_value(void *pValue);
extern SimTypeUtils _Type_SessionManagement_T_Utils;

/****************************************************************
 ** TrainData_T 
 ****************************************************************/
extern int TrainData_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrainData_T_string(const char *str, char **endptr);
extern int string_to_TrainData_T(const char *str, void *pValue, char **endptr);
extern int is_TrainData_T_allow_double_conversion();
extern int TrainData_T_to_double(const void *pValue, double *nValue);
extern int get_TrainData_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrainData_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrainData_T_default_value(void *pValue);
extern SimTypeUtils _Type_TrainData_T_Utils;

/****************************************************************
 ** PosData_T 
 ****************************************************************/
extern int PosData_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PosData_T_string(const char *str, char **endptr);
extern int string_to_PosData_T(const char *str, void *pValue, char **endptr);
extern int is_PosData_T_allow_double_conversion();
extern int PosData_T_to_double(const void *pValue, double *nValue);
extern int get_PosData_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PosData_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PosData_T_default_value(void *pValue);
extern SimTypeUtils _Type_PosData_T_Utils;

/****************************************************************
 ** DynamicConfig_T 
 ****************************************************************/
extern int DynamicConfig_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DynamicConfig_T_string(const char *str, char **endptr);
extern int string_to_DynamicConfig_T(const char *str, void *pValue, char **endptr);
extern int is_DynamicConfig_T_allow_double_conversion();
extern int DynamicConfig_T_to_double(const void *pValue, double *nValue);
extern int get_DynamicConfig_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DynamicConfig_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DynamicConfig_T_default_value(void *pValue);
extern SimTypeUtils _Type_DynamicConfig_T_Utils;

/****************************************************************
 ** NationalParams_T 
 ****************************************************************/
extern int NationalParams_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NationalParams_T_string(const char *str, char **endptr);
extern int string_to_NationalParams_T(const char *str, void *pValue, char **endptr);
extern int is_NationalParams_T_allow_double_conversion();
extern int NationalParams_T_to_double(const void *pValue, double *nValue);
extern int get_NationalParams_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NationalParams_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NationalParams_T_default_value(void *pValue);
extern SimTypeUtils _Type_NationalParams_T_Utils;

/****************************************************************
 ** MAReqParams_T 
 ****************************************************************/
extern int MAReqParams_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MAReqParams_T_string(const char *str, char **endptr);
extern int string_to_MAReqParams_T(const char *str, void *pValue, char **endptr);
extern int is_MAReqParams_T_allow_double_conversion();
extern int MAReqParams_T_to_double(const void *pValue, double *nValue);
extern int get_MAReqParams_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MAReqParams_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MAReqParams_T_default_value(void *pValue);
extern SimTypeUtils _Type_MAReqParams_T_Utils;

/****************************************************************
 ** PosRepParams_T 
 ****************************************************************/
extern int PosRepParams_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PosRepParams_T_string(const char *str, char **endptr);
extern int string_to_PosRepParams_T(const char *str, void *pValue, char **endptr);
extern int is_PosRepParams_T_allow_double_conversion();
extern int PosRepParams_T_to_double(const void *pValue, double *nValue);
extern int get_PosRepParams_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PosRepParams_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PosRepParams_T_default_value(void *pValue);
extern SimTypeUtils _Type_PosRepParams_T_Utils;

/****************************************************************
 ** RadioTrackTrainMessageQueue_T 
 ****************************************************************/
extern int RadioTrackTrainMessageQueue_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioTrackTrainMessageQueue_T_string(const char *str, char **endptr);
extern int string_to_RadioTrackTrainMessageQueue_T(const char *str, void *pValue, char **endptr);
extern int is_RadioTrackTrainMessageQueue_T_allow_double_conversion();
extern int RadioTrackTrainMessageQueue_T_to_double(const void *pValue, double *nValue);
extern int get_RadioTrackTrainMessageQueue_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioTrackTrainMessageQueue_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioTrackTrainMessageQueue_T_default_value(void *pValue);
extern SimTypeUtils _Type_RadioTrackTrainMessageQueue_T_Utils;

/****************************************************************
 ** RadioTrackTrainMessageQueueEntries_T 
 ****************************************************************/
extern int RadioTrackTrainMessageQueueEntries_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioTrackTrainMessageQueueEntries_T_string(const char *str, char **endptr);
extern int string_to_RadioTrackTrainMessageQueueEntries_T(const char *str, void *pValue, char **endptr);
extern int is_RadioTrackTrainMessageQueueEntries_T_allow_double_conversion();
extern int RadioTrackTrainMessageQueueEntries_T_to_double(const void *pValue, double *nValue);
extern int get_RadioTrackTrainMessageQueueEntries_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioTrackTrainMessageQueueEntries_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioTrackTrainMessageQueueEntries_T_default_value(void *pValue);
extern SimTypeUtils _Type_RadioTrackTrainMessageQueueEntries_T_Utils;

/****************************************************************
 ** RadioTrackTrainMessageQueueEntry_T 
 ****************************************************************/
extern int RadioTrackTrainMessageQueueEntry_T_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioTrackTrainMessageQueueEntry_T_string(const char *str, char **endptr);
extern int string_to_RadioTrackTrainMessageQueueEntry_T(const char *str, void *pValue, char **endptr);
extern int is_RadioTrackTrainMessageQueueEntry_T_allow_double_conversion();
extern int RadioTrackTrainMessageQueueEntry_T_to_double(const void *pValue, double *nValue);
extern int get_RadioTrackTrainMessageQueueEntry_T_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioTrackTrainMessageQueueEntry_T(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioTrackTrainMessageQueueEntry_T_default_value(void *pValue);
extern SimTypeUtils _Type_RadioTrackTrainMessageQueueEntry_T_Utils;

/****************************************************************
 ** M_TrainTrack_Message_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_Message_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrack_Message_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_Message_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_Message_T_TM_radio_messages_allow_double_conversion();
extern int M_TrainTrack_Message_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrack_Message_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrack_Message_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrack_Message_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrack_Message_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrack_MessageHd_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrack_MessageHd_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_MessageHd_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_MessageHd_T_TM_radio_messages_allow_double_conversion();
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrack_MessageHd_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrack_MessageHd_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrack_MessageHd_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrack_MessageHd_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrack_compressed_packets_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrack_compressed_packets_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_compressed_packets_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_compressed_packets_T_TM_radio_messages_allow_double_conversion();
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrack_compressed_packets_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrack_compressed_packets_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrack_compressed_packets_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrack_compressed_packets_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_136_T_TM_radio_messages 
 ****************************************************************/
extern int M_136_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_136_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_136_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_136_T_TM_radio_messages_allow_double_conversion();
extern int M_136_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_136_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_136_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_136_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_136_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_129_T_TM_radio_messages 
 ****************************************************************/
extern int M_129_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_129_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_129_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_129_T_TM_radio_messages_allow_double_conversion();
extern int M_129_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_129_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_129_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_129_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_129_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_146_T_TM_radio_messages 
 ****************************************************************/
extern int M_146_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_146_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_146_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_146_T_TM_radio_messages_allow_double_conversion();
extern int M_146_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_146_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_146_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_146_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_146_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_147_T_TM_radio_messages 
 ****************************************************************/
extern int M_147_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_147_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_147_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_147_T_TM_radio_messages_allow_double_conversion();
extern int M_147_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_147_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_147_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_147_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_147_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_132_T_TM_radio_messages 
 ****************************************************************/
extern int M_132_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_132_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_132_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_132_T_TM_radio_messages_allow_double_conversion();
extern int M_132_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_132_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_132_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_132_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_132_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_154_T_TM_radio_messages 
 ****************************************************************/
extern int M_154_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_154_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_154_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_154_T_TM_radio_messages_allow_double_conversion();
extern int M_154_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_154_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_154_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_154_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_154_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_159_T_TM_radio_messages 
 ****************************************************************/
extern int M_159_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_159_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_159_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_159_T_TM_radio_messages_allow_double_conversion();
extern int M_159_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_159_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_159_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_159_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_159_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_156_T_TM_radio_messages 
 ****************************************************************/
extern int M_156_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_156_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_156_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_156_T_TM_radio_messages_allow_double_conversion();
extern int M_156_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_156_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_156_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_156_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_156_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_155_T_TM_radio_messages 
 ****************************************************************/
extern int M_155_T_TM_radio_messages_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_155_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_155_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_155_T_TM_radio_messages_allow_double_conversion();
extern int M_155_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int get_M_155_T_TM_radio_messages_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_155_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_155_T_TM_radio_messages_default_value(void *pValue);
extern SimTypeUtils _Type_M_155_T_TM_radio_messages_Utils;

/****************************************************************
 ** RadioManagement_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioManagement_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioManagement_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioManagement_T_API_RadioCommunication_Pkg_allow_double_conversion();
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RadioManagement_T_API_RadioCommunication_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioManagement_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioManagement_T_API_RadioCommunication_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RadioManagement_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** cmdRadioUnit_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_cmdRadioUnit_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_cmdRadioUnit_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_cmdRadioUnit_T_API_RadioCommunication_Pkg_allow_double_conversion();
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int get_cmdRadioUnit_T_API_RadioCommunication_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_cmdRadioUnit_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_cmdRadioUnit_T_API_RadioCommunication_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_cmdRadioUnit_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** connectionStatusRadioUnit_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_allow_double_conversion();
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int get_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** EVC_to_DMI_Message_int_T_API_DMI_Pkg 
 ****************************************************************/
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EVC_to_DMI_Message_int_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_EVC_to_DMI_Message_int_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_DMI_Message_int_T_API_DMI_Pkg_allow_double_conversion();
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_EVC_to_DMI_Message_int_T_API_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EVC_to_DMI_Message_int_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EVC_to_DMI_Message_int_T_API_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_EVC_to_DMI_Message_int_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** EVC_to_DMI_Message_T_API_DMI_Pkg 
 ****************************************************************/
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EVC_to_DMI_Message_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_EVC_to_DMI_Message_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_DMI_Message_T_API_DMI_Pkg_allow_double_conversion();
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_EVC_to_DMI_Message_T_API_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EVC_to_DMI_Message_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EVC_to_DMI_Message_T_API_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_EVC_to_DMI_Message_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_to_EVC_Message_T_API_DMI_Pkg 
 ****************************************************************/
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_to_EVC_Message_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_to_EVC_Message_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_to_EVC_Message_T_API_DMI_Pkg_allow_double_conversion();
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_to_EVC_Message_T_API_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_to_EVC_Message_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_to_EVC_Message_T_API_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_to_EVC_Message_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_to_EVC_Message_int_T_API_DMI_Pkg 
 ****************************************************************/
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_to_EVC_Message_int_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_to_EVC_Message_int_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_to_EVC_Message_int_T_API_DMI_Pkg_allow_double_conversion();
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_to_EVC_Message_int_T_API_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_to_EVC_Message_int_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_to_EVC_Message_int_T_API_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_to_EVC_Message_int_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** TIU_Output_msg_API_TIU_Pkg 
 ****************************************************************/
extern int TIU_Output_msg_API_TIU_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TIU_Output_msg_API_TIU_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_Output_msg_API_TIU_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_Output_msg_API_TIU_Pkg_allow_double_conversion();
extern int TIU_Output_msg_API_TIU_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TIU_Output_msg_API_TIU_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TIU_Output_msg_API_TIU_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TIU_Output_msg_API_TIU_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TIU_Output_msg_API_TIU_Pkg_Utils;

/****************************************************************
 ** TIU_Input_msg_API_TIU_Pkg 
 ****************************************************************/
extern int TIU_Input_msg_API_TIU_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TIU_Input_msg_API_TIU_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_Input_msg_API_TIU_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_Input_msg_API_TIU_Pkg_allow_double_conversion();
extern int TIU_Input_msg_API_TIU_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TIU_Input_msg_API_TIU_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TIU_Input_msg_API_TIU_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TIU_Input_msg_API_TIU_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TIU_Input_msg_API_TIU_Pkg_Utils;

/****************************************************************
 ** Message_EVC_to_Train_Interface_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_allow_double_conversion();
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Isolation_Status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Isolation_Status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Isolation_Status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Isolation_Status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Isolation_Status_T_TIU_Types_Pkg_allow_double_conversion();
extern int Isolation_Status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Isolation_Status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Isolation_Status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Isolation_Status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Isolation_Status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_Isolation_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_Isolation_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_Isolation_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_Isolation_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_Isolation_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_Isolation_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_Isolation_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_Isolation_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_Isolation_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_Isolation_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Brake_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int Brake_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Brake_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Brake_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Brake_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Brake_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_signal_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_brake_signal_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_signal_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_signal_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_brake_signal_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_brake_signal_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_brake_signal_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_brake_signal_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_inhibition_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Brake_inhibition_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_inhibition_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_inhibition_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Brake_inhibition_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Brake_inhibition_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Brake_inhibition_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Brake_inhibition_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_inhibit_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_brake_inhibit_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_inhibit_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_inhibit_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_brake_inhibit_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_brake_inhibit_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_brake_inhibit_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_brake_inhibit_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_eddy_current_brake_inhibition_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Type_I_train_commands_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Type_I_train_commands_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Type_I_train_commands_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Type_I_train_commands_T_TIU_Types_Pkg_allow_double_conversion();
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Type_I_train_commands_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Type_I_train_commands_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Type_I_train_commands_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Type_I_train_commands_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_pantograph_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_pantograph_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_pantograph_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_pantograph_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_pantograph_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_pantograph_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_pantograph_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_pantograph_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_pantograph_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_pantograph_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_airtightness_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_airtightness_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_airtightness_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_airtightness_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_airtightness_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_airtightness_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_airtightness_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_airtightness_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_airtightness_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_airtightness_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_mainpowerswitch_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_mainpowerswitch_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_mainpowerswitch_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_mainpowerswitch_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_mainpowerswitch_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_mainpowerswitch_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_mainpowerswitch_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_mainpowerswitch_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_traction_cutoff_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_traction_cutoff_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_traction_cutoff_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_traction_cutoff_command_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_traction_cutoff_command_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_traction_cutoff_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_traction_cutoff_command_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_traction_cutoff_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Change_traction_system_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Change_traction_system_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Change_traction_system_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Change_traction_system_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Change_traction_system_T_TIU_Types_Pkg_allow_double_conversion();
extern int Change_traction_system_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Change_traction_system_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Change_traction_system_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Change_traction_system_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Change_traction_system_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_traction_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_traction_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_traction_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_traction_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_traction_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_traction_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_traction_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_traction_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_traction_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_traction_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_distance_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_distance_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_distance_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_distance_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_distance_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_distance_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_distance_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_distance_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_distance_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_distance_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_voltage_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_voltage_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_voltage_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_voltage_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_voltage_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_voltage_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_voltage_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_voltage_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_voltage_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_voltage_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_voltage_types_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_voltage_types_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_voltage_types_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_voltage_types_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_voltage_types_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_voltage_types_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_voltage_types_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_voltage_types_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_voltage_types_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_voltage_types_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** NID_ctraction_T_TIU_Types_Pkg 
 ****************************************************************/
extern int NID_ctraction_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_ctraction_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_ctraction_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_ctraction_T_TIU_Types_Pkg_allow_double_conversion();
extern int NID_ctraction_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_NID_ctraction_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_ctraction_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_ctraction_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_NID_ctraction_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Passenger_door_control_info_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Passenger_door_control_info_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Passenger_door_control_info_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Passenger_door_control_info_T_TIU_Types_Pkg_allow_double_conversion();
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Passenger_door_control_info_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Passenger_door_control_info_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Passenger_door_control_info_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Passenger_door_control_info_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Change_of_allowed_current_consumption_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_allow_double_conversion();
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_current_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_current_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_current_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_current_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_current_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_current_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_current_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_current_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_current_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_current_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_current_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_current_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_current_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_current_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_current_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_current_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_current_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_current_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_current_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_current_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** TIU_commandStatus_T_TIU_Types_Pkg 
 ****************************************************************/
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TIU_commandStatus_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_commandStatus_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_commandStatus_T_TIU_Types_Pkg_allow_double_conversion();
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TIU_commandStatus_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TIU_commandStatus_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TIU_commandStatus_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TIU_commandStatus_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** TIU_trainStatus_T_TIU_Types_Pkg 
 ****************************************************************/
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TIU_trainStatus_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_trainStatus_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_trainStatus_T_TIU_Types_Pkg_allow_double_conversion();
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TIU_trainStatus_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TIU_trainStatus_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TIU_trainStatus_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TIU_trainStatus_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** cab_ID_T_TIU_Types_Pkg 
 ****************************************************************/
extern int cab_ID_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_cab_ID_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_cab_ID_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_cab_ID_T_TIU_Types_Pkg_allow_double_conversion();
extern int cab_ID_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_cab_ID_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_cab_ID_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_cab_ID_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_cab_ID_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** trainData_T_TIU_Types_Pkg 
 ****************************************************************/
extern int trainData_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainData_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_trainData_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_T_TIU_Types_Pkg_allow_double_conversion();
extern int trainData_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_trainData_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainData_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainData_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainData_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_cab_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_cab_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_cab_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_cab_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_cab_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_cab_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_cab_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_cab_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Message_Train_Interface_to_EVC_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_allow_double_conversion();
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Mode_control_and_train_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Mode_control_and_train_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Mode_control_and_train_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Mode_control_and_train_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Mode_control_and_train_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Mode_control_and_train_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Mode_control_and_train_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Mode_control_and_train_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_sleeping_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_sleeping_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_sleeping_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_sleeping_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_sleeping_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_sleeping_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_sleeping_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_sleeping_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_passiveshunting_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_passiveshunting_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_passiveshunting_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_passiveshunting_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_passiveshunting_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_passiveshunting_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_passiveshunting_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_passiveshunting_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_nonleading_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_nonleading_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_nonleading_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_nonleading_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_nonleading_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_nonleading_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_nonleading_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_nonleading_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_directioncontroller_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_directioncontroller_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_directioncontroller_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_directioncontroller_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_directioncontroller_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_directioncontroller_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_directioncontroller_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_directioncontroller_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_trainintegrity_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_trainintegrity_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_trainintegrity_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_trainintegrity_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_trainintegrity_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_trainintegrity_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_trainintegrity_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_trainintegrity_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_traction_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_traction_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_traction_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_traction_signal_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_traction_signal_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_traction_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_traction_signal_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_traction_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Brake_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int Brake_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Brake_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Brake_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Brake_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Brake_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_brake_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_status_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_brake_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_brake_status_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_brake_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_brake_status_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_brake_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_pressure_value_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Brake_pressure_value_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_pressure_value_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_pressure_value_T_TIU_Types_Pkg_allow_double_conversion();
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Brake_pressure_value_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Brake_pressure_value_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Brake_pressure_value_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Brake_pressure_value_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_train_data_entry_type_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_train_data_entry_type_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_train_data_entry_type_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_train_data_entry_type_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_train_data_entry_type_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_train_data_entry_type_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_train_data_entry_type_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_train_data_entry_type_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_allow_double_conversion();
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** nothing_to_resume_profile_follow_T_TIU_Types_Pkg 
 ****************************************************************/
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_allow_double_conversion();
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_trackcond_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_trackcond_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_trackcond_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** L_test_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int L_test_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_test_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_L_test_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_test_trackcond_T_TIU_Types_Pkg_allow_double_conversion();
extern int L_test_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_L_test_trackcond_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_test_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_test_trackcond_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_L_test_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_trackcond_T_TIU_Types_Pkg_allow_double_conversion();
extern int M_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_trackcond_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_trackcond_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_trackinit_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_trackinit_T_TIU_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_D_test_trackinit_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_trackinit_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_trackinit_T_TIU_Types_Pkg_allow_double_conversion();
extern int D_test_trackinit_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_D_test_trackinit_T_TIU_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_D_test_trackinit_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_D_test_trackinit_T_TIU_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_D_test_trackinit_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Level_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Mode_Level_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Level_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Level_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Mode_Level_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Mode_Level_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Mode_Level_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Mode_Level_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_AcknoledgementRequest_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_AnnouncedLevel_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTransition_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_LevelTransition_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTransition_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTransition_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_LevelTransition_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_LevelTransition_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_LevelTransition_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_LevelTransition_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTansitionInfo_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_TransitionType_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_TransitionType_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_TransitionType_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_TransitionType_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_TransitionType_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_TransitionType_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_TransitionType_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_TransitionType_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Mode_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Mode_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Mode_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Mode_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Mode_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Mode_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_MA_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_MA_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_MA_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_MA_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_MA_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_MA_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_MA_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_MA_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_MA_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_MA_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Profile_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Mode_Profile_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Profile_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Profile_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Mode_Profile_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Mode_Profile_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Mode_Profile_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Mode_Profile_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Reversing_Data_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Reversing_Data_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Reversing_Data_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Reversing_Data_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Reversing_Data_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Reversing_Data_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Reversing_Data_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Reversing_Data_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Profile_Table_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_To_DMI_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_To_DMI_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_To_DMI_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_To_DMI_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_To_DMI_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_To_DMI_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_To_DMI_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_To_DMI_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_To_BG_Management_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Localisation_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_DMI_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_DMI_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_DMI_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_DMI_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_DMI_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_DMI_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_DMI_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_DMI_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_STM_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_STM_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_STM_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_STM_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_STM_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_STM_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_STM_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_STM_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_F2_functions_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_ERTMS_capabilities_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_allow_double_conversion();
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** dmiOutputs_T_manage_DMI_Output_Pkg 
 ****************************************************************/
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_dmiOutputs_T_manage_DMI_Output_Pkg_string(const char *str, char **endptr);
extern int string_to_dmiOutputs_T_manage_DMI_Output_Pkg(const char *str, void *pValue, char **endptr);
extern int is_dmiOutputs_T_manage_DMI_Output_Pkg_allow_double_conversion();
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_double(const void *pValue, double *nValue);
extern int get_dmiOutputs_T_manage_DMI_Output_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_dmiOutputs_T_manage_DMI_Output_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_dmiOutputs_T_manage_DMI_Output_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_dmiOutputs_T_manage_DMI_Output_Pkg_Utils;

/****************************************************************
 ** T_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_T_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** V_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_V_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_V_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_V_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** L_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_L_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_L_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_L_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** LocWithInAcc_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LocWithInAcc_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_LocWithInAcc_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LocWithInAcc_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LocWithInAcc_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LocWithInAcc_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LocWithInAcc_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LocWithInAcc_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** Location_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int Location_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Location_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_Location_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Location_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int Location_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Location_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Location_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Location_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Location_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odometry_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odometry_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_odometry_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odometry_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odometry_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int odometry_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_odometry_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_odometry_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_odometry_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_odometry_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** OdometryLocations_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_OdometryLocations_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_OdometryLocations_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_OdometryLocations_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_OdometryLocations_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_OdometryLocations_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_OdometryLocations_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_OdometryLocations_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** OdometrySpeeds_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_OdometrySpeeds_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_OdometrySpeeds_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_OdometrySpeeds_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_OdometrySpeeds_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_OdometrySpeeds_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_OdometrySpeeds_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_OdometrySpeeds_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** V_odometry_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_odometry_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_V_odometry_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_odometry_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_V_odometry_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_odometry_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_odometry_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_V_odometry_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** A_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_A_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_A_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_A_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_A_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odoMotionState_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_odoMotionState_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odoMotionState_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odoMotionState_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_odoMotionState_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_odoMotionState_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_odoMotionState_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_odoMotionState_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odoMotionDirection_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_odoMotionDirection_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odoMotionDirection_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odoMotionDirection_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_odoMotionDirection_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_odoMotionDirection_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_odoMotionDirection_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_odoMotionDirection_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** G_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_G_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_G_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_G_internal_Type_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_G_internal_Type_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_G_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_G_internal_Type_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_G_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** BCD_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int BCD_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BCD_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_BCD_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCD_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int BCD_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BCD_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BCD_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BCD_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BCD_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** Speed_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int Speed_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Speed_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_Speed_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Speed_T_Obu_BasicTypes_Pkg_allow_double_conversion();
extern int Speed_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Speed_T_Obu_BasicTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Speed_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Speed_T_Obu_BasicTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Speed_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_status_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_status_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_status_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_DMI_Identifier_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_DMI_Identifier_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DMI_Identifier_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DMI_Identifier_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_DMI_Identifier_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_DMI_Identifier_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_DMI_Identifier_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_DMI_Identifier_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Cabin_Identifier_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Cabin_Identifier_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Cabin_Identifier_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Cabin_Identifier_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Cabin_Identifier_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Cabin_Identifier_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Cabin_Identifier_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Cabin_Identifier_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TEXT_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TEXT_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TEXT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TEXT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TEXT_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_TEXT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_TEXT_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TEXT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TEXT_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TEXT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_level_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_level_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_level_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_level_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_level_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_level_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_level_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_level_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_level_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_level_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** NID_STM_DMI_Types_Pkg 
 ****************************************************************/
extern int NID_STM_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_STM_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_STM_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_STM_DMI_Types_Pkg_allow_double_conversion();
extern int NID_STM_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_NID_STM_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_STM_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_STM_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_NID_STM_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_SupervisionDisplay_T_DMI_Types_Pkg 
 ****************************************************************/
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_SupervisionDisplay_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_SupervisionDisplay_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_SupervisionDisplay_T_DMI_Types_Pkg_allow_double_conversion();
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_SupervisionDisplay_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_SupervisionDisplay_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_SupervisionDisplay_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_SupervisionDisplay_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_SUPERVISION_STATUS_DMI_Types_Pkg 
 ****************************************************************/
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_SUPERVISION_STATUS_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_SUPERVISION_STATUS_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_SUPERVISION_STATUS_DMI_Types_Pkg_allow_double_conversion();
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_SUPERVISION_STATUS_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_SUPERVISION_STATUS_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_SUPERVISION_STATUS_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_SUPERVISION_STATUS_DMI_Types_Pkg_Utils;

/****************************************************************
 ** speedSupervisionForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_speedSupervisionForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_speedSupervisionForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_speedSupervisionForDMI_T_DMI_Types_Pkg_allow_double_conversion();
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_speedSupervisionForDMI_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_speedSupervisionForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_speedSupervisionForDMI_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_speedSupervisionForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** nationValuesForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nationValuesForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nationValuesForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nationValuesForDMI_T_DMI_Types_Pkg_allow_double_conversion();
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nationValuesForDMI_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nationValuesForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nationValuesForDMI_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nationValuesForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** movementAuthorityForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_movementAuthorityForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_movementAuthorityForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_movementAuthorityForDMI_T_DMI_Types_Pkg_allow_double_conversion();
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_movementAuthorityForDMI_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_movementAuthorityForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_movementAuthorityForDMI_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_movementAuthorityForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Available_Menu_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Available_Menu_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Available_Menu_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Available_Menu_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Available_Menu_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Available_Menu_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Available_Menu_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Available_Menu_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_List_Entry_Request_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_List_Entry_Request_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_List_Entry_Request_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_List_Entry_Request_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_List_Entry_Request_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_List_Entry_Request_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_List_Entry_Request_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_List_Entry_Request_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_train_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_train_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_train_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_train_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_id_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_train_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_train_id_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_train_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_train_id_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_train_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** BCD_DMI_Types_Pkg 
 ****************************************************************/
extern int BCD_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BCD_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BCD_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCD_DMI_Types_Pkg_allow_double_conversion();
extern int BCD_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BCD_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BCD_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BCD_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BCD_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_train_length_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_train_length_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_train_length_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_train_length_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_length_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_train_length_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_train_length_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_train_length_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_train_length_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_train_length_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_brakeModel_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_brakeModel_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_brakeModel_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_brakeModel_id_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_brakeModel_id_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_brakeModel_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_brakeModel_id_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_brakeModel_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_vMax_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_vMax_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_vMax_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_vMax_id_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_vMax_id_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_vMax_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_vMax_id_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_vMax_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_airtightSystem_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_airtightSystem_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_airtightSystem_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_airtightSystem_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_airtightSystem_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_airtightSystem_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_airtightSystem_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_airtightSystem_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_loadingGauge_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_loadingGauge_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_loadingGauge_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_loadingGauge_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_loadingGauge_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_loadingGauge_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_loadingGauge_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_loadingGauge_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TextMessage_ID_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TextMessage_ID_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TextMessage_ID_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TextMessage_ID_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_TextMessage_ID_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TextMessage_ID_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TextMessage_ID_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TextMessage_ID_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Q_TEXT_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Q_TEXT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Q_TEXT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Q_TEXT_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Q_TEXT_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Q_TEXT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Q_TEXT_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Q_TEXT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_speedProfile_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_speedProfile_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfile_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfile_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_speedProfile_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_speedProfile_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_speedProfile_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_speedProfile_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_SpeedProfileArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_SpeedProfileArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_SpeedProfileArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_SpeedProfileArray_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_SpeedProfileArray_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_SpeedProfileArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_SpeedProfileArray_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_SpeedProfileArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_speedProfileElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_speedProfileElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfileElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfileElement_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_speedProfileElement_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_speedProfileElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_speedProfileElement_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_speedProfileElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfile_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_gradientProfile_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfile_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfile_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_gradientProfile_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_gradientProfile_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_gradientProfile_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_gradientProfile_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfileArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_gradientProfileArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfileArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfileArray_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_gradientProfileArray_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_gradientProfileArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_gradientProfileArray_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_gradientProfileArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfileElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_gradientProfileElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfileElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfileElement_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_gradientProfileElement_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_gradientProfileElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_gradientProfileElement_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_gradientProfileElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackCondition_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_trackCondition_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackCondition_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackCondition_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_trackCondition_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_trackCondition_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_trackCondition_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_trackCondition_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackConditionArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_trackConditionArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackConditionArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackConditionArray_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_trackConditionArray_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_trackConditionArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_trackConditionArray_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_trackConditionArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackConditionElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_trackConditionElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackConditionElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackConditionElement_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_trackConditionElement_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_trackConditionElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_trackConditionElement_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_trackConditionElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_LevelList_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_LevelList_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_LevelList_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_LevelList_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_LevelList_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_LevelList_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_LevelList_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_LevelList_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_LevelList_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_LevelList_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_level_array_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_level_array_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_level_array_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_level_array_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_level_array_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_level_array_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_level_array_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_level_array_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_level_array_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_level_array_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_BRAKEPERCT_DMI_Types_Pkg 
 ****************************************************************/
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_BRAKEPERCT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_BRAKEPERCT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_BRAKEPERCT_DMI_Types_Pkg_allow_double_conversion();
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_M_BRAKEPERCT_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_BRAKEPERCT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_BRAKEPERCT_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_M_BRAKEPERCT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** Icon_control_flag_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Icon_control_flag_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Icon_control_flag_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Icon_control_flag_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Icon_control_flag_T_DMI_Types_Pkg_allow_double_conversion();
extern int Icon_control_flag_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Icon_control_flag_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Icon_control_flag_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Icon_control_flag_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Icon_control_flag_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** Icon_group_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Icon_group_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Icon_group_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Icon_group_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Icon_group_T_DMI_Types_Pkg_allow_double_conversion();
extern int Icon_group_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Icon_group_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Icon_group_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Icon_group_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Icon_group_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** Area_group_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Area_group_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Area_group_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Area_group_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Area_group_T_DMI_Types_Pkg_allow_double_conversion();
extern int Area_group_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Area_group_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Area_group_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Area_group_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Area_group_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TXT_MSGList_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TXT_MSG_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TXT_MSG_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TXT_MSG_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TXT_MSG_status_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_TXT_MSG_status_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TXT_MSG_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TXT_MSG_status_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TXT_MSG_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_context_TXT_MSG_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_context_TXT_MSG_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_context_TXT_MSG_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_context_TXT_MSG_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_context_TXT_MSG_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_context_TXT_MSG_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_context_TXT_MSG_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_context_TXT_MSG_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Request_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Request_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Request_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Request_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Request_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_Request_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Request_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Request_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Request_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Request_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_StatusSet_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_StatusSet_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_StatusSet_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_StatusSet_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_StatusSet_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_StatusSet_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_StatusSet_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_StatusSet_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_To_Modes_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_To_Modes_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_To_Modes_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_To_Modes_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_To_Modes_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_To_Modes_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_To_Modes_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_To_Modes_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_DriverAck_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_DriverAck_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DriverAck_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DriverAck_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_DriverAck_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_DriverAck_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_DriverAck_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_DriverAck_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_DriverRequest_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_DriverRequest_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DriverRequest_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DriverRequest_T_DMI_Types_Pkg_allow_double_conversion();
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_DriverRequest_T_DMI_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_DriverRequest_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_DriverRequest_T_DMI_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_DriverRequest_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_allow_double_conversion();
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_allow_double_conversion();
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** mobileConnectionStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileConnectionStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionStatus_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileConnectionStatus_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileConnectionStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileConnectionStatus_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileConnectionStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationContext_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileRegistrationContext_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationContext_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationContext_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileRegistrationContext_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileRegistrationContext_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileRegistrationContext_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileRegistrationContext_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileHealthStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileHealthStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileHealthStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileHealthStatus_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileHealthStatus_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileHealthStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileHealthStatus_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileHealthStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileRegistrationStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationStatus_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileRegistrationStatus_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileRegistrationStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileRegistrationStatus_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileRegistrationStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnectionContext_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileConnectionContext_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionContext_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionContext_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileConnectionContext_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileConnectionContext_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileConnectionContext_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileConnectionContext_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnetionAction_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileConnetionAction_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnetionAction_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnetionAction_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileConnetionAction_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileConnetionAction_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileConnetionAction_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileConnetionAction_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnectionCmd_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileConnectionCmd_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionCmd_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionCmd_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileConnectionCmd_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileConnectionCmd_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileConnectionCmd_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileConnectionCmd_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationCmd_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileRegistrationCmd_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationCmd_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationCmd_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileRegistrationCmd_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileRegistrationCmd_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileRegistrationCmd_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileRegistrationCmd_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationAction_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileRegistrationAction_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationAction_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationAction_T_RCM_Types_Pkg_allow_double_conversion();
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_mobileRegistrationAction_T_RCM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileRegistrationAction_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileRegistrationAction_T_RCM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_mobileRegistrationAction_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** morcStatus_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int morcStatus_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_morcStatus_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_morcStatus_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_morcStatus_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int morcStatus_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_morcStatus_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_morcStatus_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_morcStatus_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_morcStatus_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sessionStatus_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sessionStatus_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionStatus_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionStatus_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sessionStatus_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sessionStatus_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sessionStatus_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sessionStatus_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sessionPhase_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sessionPhase_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionPhase_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionPhase_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sessionPhase_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sessionPhase_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sessionPhase_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sessionPhase_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sessionCmd_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sessionCmd_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionCmd_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionCmd_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sessionCmd_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sessionCmd_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sessionCmd_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sessionCmd_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** obuEventsAndPhases_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_obuEventsAndPhases_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_obuEventsAndPhases_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_obuEventsAndPhases_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_obuEventsAndPhases_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_obuEventsAndPhases_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_obuEventsAndPhases_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_obuEventsAndPhases_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** safeRadioConnectionIndication_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** morc_configData_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int morc_configData_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_morc_configData_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_morc_configData_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_morc_configData_T_RCM_Session_Types_Pkg_allow_double_conversion();
extern int morc_configData_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_morc_configData_T_RCM_Session_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_morc_configData_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_morc_configData_T_RCM_Session_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_morc_configData_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** trainPosition_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainPosition_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainPosition_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainPosition_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainPosition_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int trainPosition_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_trainPosition_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainPosition_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainPosition_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_trainPosition_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionedBG_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionedBG_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_positionedBG_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionedBG_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionedBG_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int positionedBG_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_positionedBG_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_positionedBG_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_positionedBG_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_positionedBG_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** infoFromLinking_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_infoFromLinking_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_infoFromLinking_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_infoFromLinking_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_infoFromLinking_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_infoFromLinking_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_infoFromLinking_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_infoFromLinking_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** trainProperties_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainProperties_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainProperties_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainProperties_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainProperties_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int trainProperties_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_trainProperties_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainProperties_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainProperties_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_trainProperties_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionedBGs_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionedBGs_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_positionedBGs_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionedBGs_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionedBGs_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int positionedBGs_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_positionedBGs_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_positionedBGs_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_positionedBGs_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_positionedBGs_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionErrors_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionErrors_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_positionErrors_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionErrors_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionErrors_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int positionErrors_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_positionErrors_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_positionErrors_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_positionErrors_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_positionErrors_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** trainPositionInfo_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainPositionInfo_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainPositionInfo_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainPositionInfo_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_trainPositionInfo_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainPositionInfo_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainPositionInfo_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_trainPositionInfo_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_allow_double_conversion();
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int get_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** LinkedBG_T_BG_Types_Pkg 
 ****************************************************************/
extern int LinkedBG_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LinkedBG_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_LinkedBG_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LinkedBG_T_BG_Types_Pkg_allow_double_conversion();
extern int LinkedBG_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LinkedBG_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LinkedBG_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LinkedBG_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LinkedBG_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** passedBG_T_BG_Types_Pkg 
 ****************************************************************/
extern int passedBG_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_passedBG_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_passedBG_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_passedBG_T_BG_Types_Pkg_allow_double_conversion();
extern int passedBG_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_passedBG_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_passedBG_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_passedBG_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_passedBG_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** BG_Header_T_BG_Types_Pkg 
 ****************************************************************/
extern int BG_Header_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_Header_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Header_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Header_T_BG_Types_Pkg_allow_double_conversion();
extern int BG_Header_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_Header_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_Header_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_Header_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_Header_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** LinkedBGs_T_BG_Types_Pkg 
 ****************************************************************/
extern int LinkedBGs_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LinkedBGs_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_LinkedBGs_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LinkedBGs_T_BG_Types_Pkg_allow_double_conversion();
extern int LinkedBGs_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LinkedBGs_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LinkedBGs_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LinkedBGs_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LinkedBGs_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** centerOfBalisePosition_T_BG_Types_Pkg 
 ****************************************************************/
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_centerOfBalisePosition_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_centerOfBalisePosition_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_centerOfBalisePosition_T_BG_Types_Pkg_allow_double_conversion();
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_centerOfBalisePosition_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_centerOfBalisePosition_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_centerOfBalisePosition_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_centerOfBalisePosition_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramArray_T_BG_Types_Pkg 
 ****************************************************************/
extern int TelegramArray_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TelegramArray_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramArray_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramArray_T_BG_Types_Pkg_allow_double_conversion();
extern int TelegramArray_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TelegramArray_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TelegramArray_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TelegramArray_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TelegramArray_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** Telegram_T_BG_Types_Pkg 
 ****************************************************************/
extern int Telegram_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Telegram_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Telegram_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Telegram_T_BG_Types_Pkg_allow_double_conversion();
extern int Telegram_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Telegram_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Telegram_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Telegram_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Telegram_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramHeader_T_BG_Types_Pkg 
 ****************************************************************/
extern int TelegramHeader_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TelegramHeader_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramHeader_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramHeader_T_BG_Types_Pkg_allow_double_conversion();
extern int TelegramHeader_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TelegramHeader_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TelegramHeader_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TelegramHeader_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TelegramHeader_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** BG_Message_T_BG_Types_Pkg 
 ****************************************************************/
extern int BG_Message_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_Message_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Message_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Message_T_BG_Types_Pkg_allow_double_conversion();
extern int BG_Message_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_Message_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_Message_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_Message_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_Message_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** NID_ERRORBG_BG_Types_Pkg 
 ****************************************************************/
extern int NID_ERRORBG_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_ERRORBG_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_ERRORBG_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_ERRORBG_BG_Types_Pkg_allow_double_conversion();
extern int NID_ERRORBG_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_NID_ERRORBG_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_ERRORBG_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_ERRORBG_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_NID_ERRORBG_BG_Types_Pkg_Utils;

/****************************************************************
 ** TrainToTrackStatus_T_BG_Types_Pkg 
 ****************************************************************/
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrainToTrackStatus_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrainToTrackStatus_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrainToTrackStatus_T_BG_Types_Pkg_allow_double_conversion();
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TrainToTrackStatus_T_BG_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrainToTrackStatus_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrainToTrackStatus_T_BG_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TrainToTrackStatus_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** driverIdentifier_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_driverIdentifier_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_driverIdentifier_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_driverIdentifier_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_driverIdentifier_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_driverIdentifier_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_driverIdentifier_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_driverIdentifier_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_Level_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_allow_double_conversion();
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** aNID_NTC_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_aNID_NTC_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aNID_NTC_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aNID_NTC_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_aNID_NTC_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_aNID_NTC_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_aNID_NTC_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_aNID_NTC_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** aTractionIdentity_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_aTractionIdentity_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aTractionIdentity_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aTractionIdentity_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_aTractionIdentity_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_aTractionIdentity_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_aTractionIdentity_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_aTractionIdentity_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** sTractionIdentity_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sTractionIdentity_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_sTractionIdentity_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sTractionIdentity_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sTractionIdentity_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sTractionIdentity_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sTractionIdentity_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sTractionIdentity_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT4_ErrorReporting_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT5_TrainRunningNumber_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT0_PositionReport_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT0_PositionReport_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT0_PositionReport_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT0_PositionReport_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT0_PositionReport_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT0_PositionReport_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT0_PositionReport_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT0_PositionReport_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** aNID_RADIO_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_aNID_RADIO_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aNID_RADIO_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aNID_RADIO_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_aNID_RADIO_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_aNID_RADIO_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_aNID_RADIO_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_aNID_RADIO_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** sNID_RADIO_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_sNID_RADIO_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_sNID_RADIO_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sNID_RADIO_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_sNID_RADIO_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_sNID_RADIO_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_sNID_RADIO_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_sNID_RADIO_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** telephoneNumber_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_telephoneNumber_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_telephoneNumber_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_telephoneNumber_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_telephoneNumber_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_telephoneNumber_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_telephoneNumber_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_telephoneNumber_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_allow_double_conversion();
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** MRSP_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int MRSP_section_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MRSP_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MRSP_section_t_TrackAtlasTypes_allow_double_conversion();
extern int MRSP_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MRSP_section_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_section_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_for_DMI_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_for_DMI_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_for_DMI_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_for_DMI_section_t_TrackAtlasTypes_allow_double_conversion();
extern int GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_for_DMI_section_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_for_DMI_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_for_DMI_section_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_for_DMI_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForDMI_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForDMI_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DataForDMI_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForDMI_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForDMI_t_TrackAtlasTypes_allow_double_conversion();
extern int DataForDMI_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_DataForDMI_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DataForDMI_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DataForDMI_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_DataForDMI_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_for_DMI_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_for_DMI_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_for_DMI_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_for_DMI_t_TrackAtlasTypes_allow_double_conversion();
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_for_DMI_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_for_DMI_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_for_DMI_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_for_DMI_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MRSP_Profile_t_TrackAtlasTypes 
 ****************************************************************/
extern int MRSP_Profile_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_Profile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MRSP_Profile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MRSP_Profile_t_TrackAtlasTypes_allow_double_conversion();
extern int MRSP_Profile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MRSP_Profile_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_Profile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_Profile_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_Profile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MA_Level_t_TrackAtlasTypes 
 ****************************************************************/
extern int MA_Level_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MA_Level_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MA_Level_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MA_Level_t_TrackAtlasTypes_allow_double_conversion();
extern int MA_Level_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MA_Level_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MA_Level_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MA_Level_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MA_Level_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MovementAuthoritySection_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthoritySection_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MovementAuthoritySection_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthoritySection_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthoritySection_t_TrackAtlasTypes_allow_double_conversion();
extern int MovementAuthoritySection_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MovementAuthoritySection_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MovementAuthoritySection_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MovementAuthoritySection_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MovementAuthoritySection_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MovementAuthority_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthority_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MovementAuthority_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthority_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthority_t_TrackAtlasTypes_allow_double_conversion();
extern int MovementAuthority_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MovementAuthority_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MovementAuthority_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MovementAuthority_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MovementAuthority_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MovementAuthoritySectionlist_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MovementAuthoritySectionlist_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthoritySectionlist_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthoritySectionlist_t_TrackAtlasTypes_allow_double_conversion();
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_MovementAuthoritySectionlist_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MovementAuthoritySectionlist_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MovementAuthoritySectionlist_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_MovementAuthoritySectionlist_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DP_or_OL_t_TrackAtlasTypes 
 ****************************************************************/
extern int DP_or_OL_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DP_or_OL_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DP_or_OL_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DP_or_OL_t_TrackAtlasTypes_allow_double_conversion();
extern int DP_or_OL_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_DP_or_OL_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DP_or_OL_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DP_or_OL_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_DP_or_OL_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** Endtimer_t_TrackAtlasTypes 
 ****************************************************************/
extern int Endtimer_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Endtimer_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_Endtimer_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_Endtimer_t_TrackAtlasTypes_allow_double_conversion();
extern int Endtimer_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_Endtimer_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Endtimer_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Endtimer_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_Endtimer_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForSupervision_nextGen_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DataForSupervision_nextGen_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForSupervision_nextGen_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForSupervision_nextGen_t_TrackAtlasTypes_allow_double_conversion();
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_DataForSupervision_nextGen_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DataForSupervision_nextGen_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DataForSupervision_nextGen_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_DataForSupervision_nextGen_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_t_TrackAtlasTypes_allow_double_conversion();
extern int GradientProfile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** Gradient_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int Gradient_section_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Gradient_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_Gradient_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_Gradient_section_t_TrackAtlasTypes_allow_double_conversion();
extern int Gradient_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_Gradient_section_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Gradient_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Gradient_section_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_Gradient_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** StaticSpeedProfile_t_TrackAtlasTypes 
 ****************************************************************/
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_StaticSpeedProfile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_StaticSpeedProfile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_StaticSpeedProfile_t_TrackAtlasTypes_allow_double_conversion();
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_StaticSpeedProfile_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_StaticSpeedProfile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_StaticSpeedProfile_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_StaticSpeedProfile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** StaticSpeedSection_t_TrackAtlasTypes 
 ****************************************************************/
extern int StaticSpeedSection_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_StaticSpeedSection_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_StaticSpeedSection_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_StaticSpeedSection_t_TrackAtlasTypes_allow_double_conversion();
extern int StaticSpeedSection_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_StaticSpeedSection_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_StaticSpeedSection_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_StaticSpeedSection_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_StaticSpeedSection_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** FromTIU_t_TrackAtlasTypes 
 ****************************************************************/
extern int FromTIU_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_FromTIU_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_FromTIU_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_FromTIU_t_TrackAtlasTypes_allow_double_conversion();
extern int FromTIU_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_FromTIU_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_FromTIU_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_FromTIU_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_FromTIU_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForModeAndLevel_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DataForModeAndLevel_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForModeAndLevel_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForModeAndLevel_t_TrackAtlasTypes_allow_double_conversion();
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int get_DataForModeAndLevel_t_TrackAtlasTypes_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DataForModeAndLevel_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DataForModeAndLevel_t_TrackAtlasTypes_default_value(void *pValue);
extern SimTypeUtils _Type_DataForModeAndLevel_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** M_SupervisionDisplay_INT_T_DATA 
 ****************************************************************/
extern int M_SupervisionDisplay_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_SupervisionDisplay_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_M_SupervisionDisplay_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_M_SupervisionDisplay_INT_T_DATA_allow_double_conversion();
extern int M_SupervisionDisplay_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_M_SupervisionDisplay_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_SupervisionDisplay_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_SupervisionDisplay_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_M_SupervisionDisplay_INT_T_DATA_Utils;

/****************************************************************
 ** M_SUPERVISION_STATUS_INT_T_DATA 
 ****************************************************************/
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_SUPERVISION_STATUS_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_M_SUPERVISION_STATUS_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_M_SUPERVISION_STATUS_INT_T_DATA_allow_double_conversion();
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_M_SUPERVISION_STATUS_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_SUPERVISION_STATUS_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_SUPERVISION_STATUS_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_M_SUPERVISION_STATUS_INT_T_DATA_Utils;

/****************************************************************
 ** connectionStatusRadioUnit_INT_T_DATA 
 ****************************************************************/
extern int connectionStatusRadioUnit_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_connectionStatusRadioUnit_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_connectionStatusRadioUnit_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_connectionStatusRadioUnit_INT_T_DATA_allow_double_conversion();
extern int connectionStatusRadioUnit_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_connectionStatusRadioUnit_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_connectionStatusRadioUnit_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_connectionStatusRadioUnit_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_connectionStatusRadioUnit_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Dynamic_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Dynamic_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Dynamic_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Dynamic_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Dynamic_int_array_T_DATA_allow_double_conversion();
extern int DMI_Dynamic_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Dynamic_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Dynamic_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Dynamic_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Dynamic_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Available_Menu_INT_T_DATA 
 ****************************************************************/
extern int DMI_Available_Menu_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Available_Menu_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Available_Menu_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Available_Menu_INT_T_DATA_allow_double_conversion();
extern int DMI_Available_Menu_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Available_Menu_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Available_Menu_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Available_Menu_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Available_Menu_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Menu_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Menu_Request_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Menu_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Menu_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Menu_Request_int_array_T_DATA_allow_double_conversion();
extern int DMI_Menu_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Menu_Request_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Menu_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Menu_Request_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Menu_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_List_Entry_Request_INT_T_DATA 
 ****************************************************************/
extern int DMI_List_Entry_Request_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_List_Entry_Request_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_List_Entry_Request_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_List_Entry_Request_INT_T_DATA_allow_double_conversion();
extern int DMI_List_Entry_Request_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_List_Entry_Request_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_List_Entry_Request_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_List_Entry_Request_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_List_Entry_Request_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Entry_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Entry_Request_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Entry_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Entry_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Entry_Request_int_array_T_DATA_allow_double_conversion();
extern int DMI_Entry_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Entry_Request_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Entry_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Entry_Request_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Entry_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_train_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_train_id_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_train_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_train_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_id_INT_T_DATA_allow_double_conversion();
extern int DMI_train_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_train_id_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_train_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_train_id_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_train_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_train_length_INT_T_DATA 
 ****************************************************************/
extern int DMI_train_length_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_train_length_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_train_length_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_length_INT_T_DATA_allow_double_conversion();
extern int DMI_train_length_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_train_length_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_train_length_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_train_length_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_train_length_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_brakeModel_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_brakeModel_id_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_brakeModel_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_brakeModel_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_brakeModel_id_INT_T_DATA_allow_double_conversion();
extern int DMI_brakeModel_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_brakeModel_id_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_brakeModel_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_brakeModel_id_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_brakeModel_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_vMax_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_vMax_id_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_vMax_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_vMax_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_vMax_id_INT_T_DATA_allow_double_conversion();
extern int DMI_vMax_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_vMax_id_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_vMax_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_vMax_id_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_vMax_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_airtightSystem_INT_T_DATA 
 ****************************************************************/
extern int DMI_airtightSystem_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_airtightSystem_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_airtightSystem_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_airtightSystem_INT_T_DATA_allow_double_conversion();
extern int DMI_airtightSystem_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_airtightSystem_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_airtightSystem_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_airtightSystem_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_airtightSystem_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_loadingGauge_INT_T_DATA 
 ****************************************************************/
extern int DMI_loadingGauge_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_loadingGauge_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_loadingGauge_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_loadingGauge_INT_T_DATA_allow_double_conversion();
extern int DMI_loadingGauge_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_loadingGauge_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_loadingGauge_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_loadingGauge_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_loadingGauge_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Coded_Train_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Coded_Train_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Coded_Train_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Coded_Train_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Coded_Train_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Coded_Train_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Coded_Train_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Coded_Train_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_TEXT_INT_Array_T_DATA 
 ****************************************************************/
extern int DMI_TEXT_INT_Array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_TEXT_INT_Array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_TEXT_INT_Array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_TEXT_INT_Array_T_DATA_allow_double_conversion();
extern int DMI_TEXT_INT_Array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_TEXT_INT_Array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_TEXT_INT_Array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_TEXT_INT_Array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_TEXT_INT_Array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Text_Message_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Text_Message_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_int_array_T_DATA_allow_double_conversion();
extern int DMI_Text_Message_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Text_Message_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Text_Message_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Text_Message_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Text_Message_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_speedProfile_int_array_T_DATA 
 ****************************************************************/
extern int DMI_speedProfile_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_speedProfile_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfile_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfile_int_array_T_DATA_allow_double_conversion();
extern int DMI_speedProfile_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_speedProfile_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_speedProfile_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_speedProfile_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_speedProfile_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Identifier_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Identifier_Request_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Identifier_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_Request_int_array_T_DATA_allow_double_conversion();
extern int DMI_Identifier_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Identifier_Request_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Identifier_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Identifier_Request_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Identifier_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_System_Version_int_array_T_DATA 
 ****************************************************************/
extern int DMI_System_Version_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_System_Version_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_System_Version_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_System_Version_int_array_T_DATA_allow_double_conversion();
extern int DMI_System_Version_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_System_Version_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_System_Version_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_System_Version_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_System_Version_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Display_Control_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Display_Control_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Display_Control_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Display_Control_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Display_Control_int_array_T_DATA_allow_double_conversion();
extern int DMI_Display_Control_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Display_Control_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Display_Control_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Display_Control_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Display_Control_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_LevelList_int_array_T_DATA 
 ****************************************************************/
extern int DMI_LevelList_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_LevelList_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_LevelList_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_LevelList_int_array_T_DATA_allow_double_conversion();
extern int DMI_LevelList_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_LevelList_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_LevelList_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_LevelList_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_LevelList_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Level_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Level_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Level_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Level_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Level_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Level_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Level_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Level_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Radio_Net_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_EVC_Radio_Net_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Radio_Net_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Radio_Net_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_EVC_Radio_Net_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_EVC_Radio_Net_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_EVC_Radio_Net_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_EVC_Radio_Net_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Running_Number_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Running_Number_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Running_Number_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Running_Number_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Running_Number_int_array_T_DATA_allow_double_conversion();
extern int DMI_Train_Running_Number_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Running_Number_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Running_Number_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Running_Number_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Running_Number_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_Train_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Adhesion_Factor_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Adhesion_Factor_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Adhesion_Factor_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Adhesion_Factor_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Adhesion_Factor_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_Adhesion_Factor_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Adhesion_Factor_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Adhesion_Factor_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Adhesion_Factor_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Adhesion_Factor_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** Icon_control_flag_INT_T_DATA 
 ****************************************************************/
extern int Icon_control_flag_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Icon_control_flag_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Icon_control_flag_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Icon_control_flag_INT_T_DATA_allow_double_conversion();
extern int Icon_control_flag_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_Icon_control_flag_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Icon_control_flag_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Icon_control_flag_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_Icon_control_flag_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_m_icon_flashing_freq_INT_T_DATA 
 ****************************************************************/
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_m_icon_flashing_freq_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_m_icon_flashing_freq_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_m_icon_flashing_freq_INT_T_DATA_allow_double_conversion();
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_m_icon_flashing_freq_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_m_icon_flashing_freq_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_m_icon_flashing_freq_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_m_icon_flashing_freq_INT_T_DATA_Utils;

/****************************************************************
 ** Icon_group_INT_T_DATA 
 ****************************************************************/
extern int Icon_group_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Icon_group_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Icon_group_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Icon_group_INT_T_DATA_allow_double_conversion();
extern int Icon_group_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_Icon_group_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Icon_group_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Icon_group_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_Icon_group_INT_T_DATA_Utils;

/****************************************************************
 ** Area_group_INT_T_DATA 
 ****************************************************************/
extern int Area_group_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Area_group_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Area_group_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Area_group_INT_T_DATA_allow_double_conversion();
extern int Area_group_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_Area_group_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Area_group_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Area_group_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_Area_group_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Icons_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Icons_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Icons_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Icons_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icons_int_array_T_DATA_allow_double_conversion();
extern int DMI_Icons_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Icons_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Icons_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Icons_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Icons_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Driver_Identifier_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Driver_Identifier_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Driver_Identifier_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Identifier_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Identifier_int_array_T_DATA_allow_double_conversion();
extern int DMI_Driver_Identifier_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Driver_Identifier_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Driver_Identifier_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Driver_Identifier_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Driver_Identifier_int_array_T_DATA_Utils;

/****************************************************************
 ** DriverIdentifier_INT_T_DATA 
 ****************************************************************/
extern int DriverIdentifier_INT_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DriverIdentifier_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DriverIdentifier_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DriverIdentifier_INT_T_DATA_allow_double_conversion();
extern int DriverIdentifier_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DriverIdentifier_INT_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DriverIdentifier_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DriverIdentifier_INT_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DriverIdentifier_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Status_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Status_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Status_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Status_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Status_int_array_T_DATA_allow_double_conversion();
extern int DMI_Status_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Status_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Status_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Status_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Status_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Identifier_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Identifier_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Identifier_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_int_array_T_DATA_allow_double_conversion();
extern int DMI_Identifier_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Identifier_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Identifier_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Identifier_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Identifier_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Driver_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Driver_Request_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Driver_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Request_int_array_T_DATA_allow_double_conversion();
extern int DMI_Driver_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Driver_Request_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Driver_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Driver_Request_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Driver_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Radio_Net_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Radio_Net_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Radio_Net_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Radio_Net_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Radio_Net_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Radio_Net_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Radio_Net_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Radio_Net_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Text_Message_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_Ack_int_array_T_DATA_allow_double_conversion();
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Text_Message_Ack_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Text_Message_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Text_Message_Ack_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Text_Message_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Data_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Train_Data_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_Ack_int_array_T_DATA_allow_double_conversion();
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Train_Data_Ack_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Train_Data_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Train_Data_Ack_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Train_Data_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Icon_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Icon_Ack_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Icon_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Icon_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icon_Ack_int_array_T_DATA_allow_double_conversion();
extern int DMI_Icon_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Icon_Ack_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Icon_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Icon_Ack_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Icon_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Level_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Level_Data_int_array_T_DATA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DMI_Level_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Level_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Level_Data_int_array_T_DATA_allow_double_conversion();
extern int DMI_Level_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int get_DMI_Level_Data_int_array_T_DATA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DMI_Level_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DMI_Level_Data_int_array_T_DATA_default_value(void *pValue);
extern SimTypeUtils _Type_DMI_Level_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** radioManagementMessage_T_Common_Types_Pkg 
 ****************************************************************/
extern int radioManagementMessage_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_radioManagementMessage_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_radioManagementMessage_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_radioManagementMessage_T_Common_Types_Pkg_allow_double_conversion();
extern int radioManagementMessage_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_radioManagementMessage_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_radioManagementMessage_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_radioManagementMessage_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_radioManagementMessage_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MsgSource_T_Common_Types_Pkg 
 ****************************************************************/
extern int MsgSource_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MsgSource_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MsgSource_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MsgSource_T_Common_Types_Pkg_allow_double_conversion();
extern int MsgSource_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_MsgSource_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MsgSource_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MsgSource_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_MsgSource_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** RBC_Id_T_Common_Types_Pkg 
 ****************************************************************/
extern int RBC_Id_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RBC_Id_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Id_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Id_T_Common_Types_Pkg_allow_double_conversion();
extern int RBC_Id_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RBC_Id_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RBC_Id_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RBC_Id_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RBC_Id_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** CompressedPackets_T_Common_Types_Pkg 
 ****************************************************************/
extern int CompressedPackets_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CompressedPackets_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_CompressedPackets_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_CompressedPackets_T_Common_Types_Pkg_allow_double_conversion();
extern int CompressedPackets_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_CompressedPackets_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CompressedPackets_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CompressedPackets_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_CompressedPackets_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** Metadata_T_Common_Types_Pkg 
 ****************************************************************/
extern int Metadata_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Metadata_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Metadata_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Metadata_T_Common_Types_Pkg_allow_double_conversion();
extern int Metadata_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Metadata_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Metadata_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Metadata_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Metadata_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MetadataElement_T_Common_Types_Pkg 
 ****************************************************************/
extern int MetadataElement_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MetadataElement_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MetadataElement_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MetadataElement_T_Common_Types_Pkg_allow_double_conversion();
extern int MetadataElement_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_MetadataElement_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MetadataElement_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MetadataElement_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_MetadataElement_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** CompressedPacketData_T_Common_Types_Pkg 
 ****************************************************************/
extern int CompressedPacketData_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CompressedPacketData_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_CompressedPacketData_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_CompressedPacketData_T_Common_Types_Pkg_allow_double_conversion();
extern int CompressedPacketData_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_CompressedPacketData_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CompressedPacketData_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CompressedPacketData_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_CompressedPacketData_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** TrackSide_ForCheck_T_Common_Types_Pkg 
 ****************************************************************/
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrackSide_ForCheck_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrackSide_ForCheck_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrackSide_ForCheck_T_Common_Types_Pkg_allow_double_conversion();
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TrackSide_ForCheck_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrackSide_ForCheck_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrackSide_ForCheck_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TrackSide_ForCheck_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** RadioMetadata_T_Common_Types_Pkg 
 ****************************************************************/
extern int RadioMetadata_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioMetadata_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioMetadata_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioMetadata_T_Common_Types_Pkg_allow_double_conversion();
extern int RadioMetadata_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RadioMetadata_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioMetadata_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioMetadata_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RadioMetadata_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** ReceivedMessage_T_Common_Types_Pkg 
 ****************************************************************/
extern int ReceivedMessage_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ReceivedMessage_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_ReceivedMessage_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReceivedMessage_T_Common_Types_Pkg_allow_double_conversion();
extern int ReceivedMessage_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ReceivedMessage_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ReceivedMessage_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ReceivedMessage_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ReceivedMessage_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** filterRelatedEvents_T_Common_Types_Pkg 
 ****************************************************************/
extern int filterRelatedEvents_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_filterRelatedEvents_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_filterRelatedEvents_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_filterRelatedEvents_T_Common_Types_Pkg_allow_double_conversion();
extern int filterRelatedEvents_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_filterRelatedEvents_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_filterRelatedEvents_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_filterRelatedEvents_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_filterRelatedEvents_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MSG_Errors_T_Common_Types_Pkg 
 ****************************************************************/
extern int MSG_Errors_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MSG_Errors_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MSG_Errors_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MSG_Errors_T_Common_Types_Pkg_allow_double_conversion();
extern int MSG_Errors_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_MSG_Errors_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MSG_Errors_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MSG_Errors_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_MSG_Errors_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** outPackets_T_Common_Types_Pkg 
 ****************************************************************/
extern int outPackets_T_Common_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_outPackets_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_outPackets_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_outPackets_T_Common_Types_Pkg_allow_double_conversion();
extern int outPackets_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_outPackets_T_Common_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_outPackets_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_outPackets_T_Common_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_outPackets_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrackTrain_Header_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_Radio_Types_Pkg_allow_double_conversion();
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrackTrain_Header_T_Radio_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrackTrain_Header_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrackTrain_Header_T_Radio_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** RadioMessage_T_Radio_Types_Pkg 
 ****************************************************************/
extern int RadioMessage_T_Radio_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RadioMessage_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioMessage_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioMessage_T_Radio_Types_Pkg_allow_double_conversion();
extern int RadioMessage_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RadioMessage_T_Radio_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RadioMessage_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RadioMessage_T_Radio_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RadioMessage_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrainTrack_Header_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrainTrack_Header_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Header_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Header_T_Radio_Types_Pkg_allow_double_conversion();
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrainTrack_Header_T_Radio_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrainTrack_Header_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrainTrack_Header_T_Radio_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Header_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrainTrack_Message_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrainTrack_Message_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Message_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Message_T_Radio_Types_Pkg_allow_double_conversion();
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrainTrack_Message_T_Radio_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrainTrack_Message_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrainTrack_Message_T_Radio_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Message_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** P42_SessionManagement_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P42_SessionManagement_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P42_SessionManagement_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P42_SessionManagement_T_Packet_Types_Pkg_allow_double_conversion();
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P42_SessionManagement_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P42_SessionManagement_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P42_SessionManagement_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P42_SessionManagement_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P45_RadioNetworkRegistration_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_allow_double_conversion();
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P3_NationalValues_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P3_NationalValues_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P3_NationalValues_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P3_NationalValues_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P3_NationalValues_T_Packet_Types_Pkg_allow_double_conversion();
extern int P3_NationalValues_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P3_NationalValues_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P3_NationalValues_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P3_NationalValues_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P3_NationalValues_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nidCArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nidCArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nidCArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nidCArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nidCArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int nidCArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nidCArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nidCArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nidCArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nidCArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nidC_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nidC_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nidC_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nidC_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nidC_T_Packet_Types_Pkg_allow_double_conversion();
extern int nidC_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nidC_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nidC_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nidC_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nidC_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintsetArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkvintsetArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintsetArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintsetArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkvintsetArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkvintsetArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkvintsetArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkvintsetArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintset_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintset_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkvintset_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintset_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintset_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkvintset_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkvintset_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkvintset_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkvintset_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkvintset_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkvintArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkvintArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkvintArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkvintArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkvintArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkvintArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvint_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvint_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkvint_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvint_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvint_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkvint_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkvint_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkvint_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkvint_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkvint_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkrintArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkrintArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkrintArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkrintArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkrintArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkrintArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkrintArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkrintArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkrintArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkrintArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkrint_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkrint_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nvkrint_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkrint_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkrint_T_Packet_Types_Pkg_allow_double_conversion();
extern int nvkrint_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_nvkrint_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nvkrint_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nvkrint_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_nvkrint_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P41_LevelTransistionOrders_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P41_LevelTransistionOrders_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P41_LevelTransistionOrders_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P41_LevelTransistionOrders_T_Packet_Types_Pkg_allow_double_conversion();
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P41_LevelTransistionOrders_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P41_LevelTransistionOrders_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P41_LevelTransistionOrders_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P41_LevelTransistionOrders_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P41_LevelTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P41_LevelTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P41_LevelTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P41_LevelTransitionOrder_T_Packet_Types_Pkg_allow_double_conversion();
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P41_LevelTransitionOrder_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P41_LevelTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P41_LevelTransitionOrder_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P41_LevelTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_allow_double_conversion();
extern int P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_allow_double_conversion();
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_allow_double_conversion();
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** DiffArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int DiffArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiffArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DiffArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiffArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int DiffArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiffArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiffArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiffArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiffArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** Diff_T_Packet_Types_Pkg 
 ****************************************************************/
extern int Diff_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Diff_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Diff_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Diff_T_Packet_Types_Pkg_allow_double_conversion();
extern int Diff_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Diff_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Diff_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Diff_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Diff_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** SSPArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int SSPArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSPArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SSPArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SSPArray_T_Packet_Types_Pkg_allow_double_conversion();
extern int SSPArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SSPArray_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSPArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSPArray_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SSPArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** SSP_T_Packet_Types_Pkg 
 ****************************************************************/
extern int SSP_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SSP_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SSP_T_Packet_Types_Pkg_allow_double_conversion();
extern int SSP_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SSP_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P80_ModeProfiles_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P80_ModeProfiles_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P80_ModeProfiles_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P80_ModeProfiles_T_Packet_Types_Pkg_allow_double_conversion();
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P80_ModeProfiles_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P80_ModeProfiles_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P80_ModeProfiles_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P80_ModeProfiles_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P80_ModeProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P80_ModeProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P80_ModeProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P80_ModeProfile_T_Packet_Types_Pkg_allow_double_conversion();
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P80_ModeProfile_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P80_ModeProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P80_ModeProfile_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P80_ModeProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_allow_double_conversion();
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P12_Level1MovementAuthorities_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_allow_double_conversion();
extern int P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P12_Level1MovementAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P12_Level1MovementAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P12_Level1MovementAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P12_Level1MovementAuthority_T_Packet_Types_Pkg_allow_double_conversion();
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P12_Level1MovementAuthority_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P12_Level1MovementAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P12_Level1MovementAuthority_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P12_Level1MovementAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P137_StopIfInStaffResponsible_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_allow_double_conversion();
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P138_ReversingAreaInformation_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P138_ReversingAreaInformation_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P138_ReversingAreaInformation_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P138_ReversingAreaInformation_T_Packet_Types_Pkg_allow_double_conversion();
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P138_ReversingAreaInformation_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P138_ReversingAreaInformation_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P138_ReversingAreaInformation_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P138_ReversingAreaInformation_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P139_ReversingSupervisionInformation_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_allow_double_conversion();
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P15_Level23MovementAuthorities_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_allow_double_conversion();
extern int P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P15_Level23MovementAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P15_Level23MovementAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P15_Level23MovementAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P15_Level23MovementAuthority_T_Packet_Types_Pkg_allow_double_conversion();
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P15_Level23MovementAuthority_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P15_Level23MovementAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P15_Level23MovementAuthority_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P15_Level23MovementAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P21_GradientProfiles_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P21_GradientProfiles_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P21_GradientProfiles_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P21_GradientProfiles_T_Packet_Types_Pkg_allow_double_conversion();
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P21_GradientProfiles_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P21_GradientProfiles_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P21_GradientProfiles_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P21_GradientProfiles_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P21_GradientProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P21_GradientProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P21_GradientProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P21_GradientProfile_T_Packet_Types_Pkg_allow_double_conversion();
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P21_GradientProfile_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P21_GradientProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P21_GradientProfile_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P21_GradientProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_allow_double_conversion();
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P63_BaliseInSRAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_allow_double_conversion();
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P58_PositionReportParameters_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P58_PositionReportParameters_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P58_PositionReportParameters_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P58_PositionReportParameters_T_Packet_Types_Pkg_allow_double_conversion();
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P58_PositionReportParameters_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P58_PositionReportParameters_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P58_PositionReportParameters_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P58_PositionReportParameters_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** IterPacket58List_T_Packet_Types_Pkg 
 ****************************************************************/
extern int IterPacket58List_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_IterPacket58List_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_IterPacket58List_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_IterPacket58List_T_Packet_Types_Pkg_allow_double_conversion();
extern int IterPacket58List_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_IterPacket58List_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_IterPacket58List_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_IterPacket58List_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_IterPacket58List_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** IterPacket58_T_Packet_Types_Pkg 
 ****************************************************************/
extern int IterPacket58_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_IterPacket58_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_IterPacket58_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_IterPacket58_T_Packet_Types_Pkg_allow_double_conversion();
extern int IterPacket58_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_IterPacket58_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_IterPacket58_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_IterPacket58_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_IterPacket58_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_allow_double_conversion();
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P131_RBCTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P131_RBCTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P131_RBCTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P131_RBCTransitionOrder_T_Packet_Types_Pkg_allow_double_conversion();
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_P131_RBCTransitionOrder_T_Packet_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P131_RBCTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P131_RBCTransitionOrder_T_Packet_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_P131_RBCTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** TSM_revokeCond_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TSM_revokeCond_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_TSM_revokeCond_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TSM_revokeCond_T_SDM_Commands_Pkg_allow_double_conversion();
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TSM_revokeCond_T_SDM_Commands_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TSM_revokeCond_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TSM_revokeCond_T_SDM_Commands_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TSM_revokeCond_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** TSM_triggerCond_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TSM_triggerCond_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_TSM_triggerCond_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TSM_triggerCond_T_SDM_Commands_Pkg_allow_double_conversion();
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TSM_triggerCond_T_SDM_Commands_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TSM_triggerCond_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TSM_triggerCond_T_SDM_Commands_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TSM_triggerCond_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** MyArray_SDM_Commands_Pkg 
 ****************************************************************/
extern int MyArray_SDM_Commands_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MyArray_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_MyArray_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MyArray_SDM_Commands_Pkg_allow_double_conversion();
extern int MyArray_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int get_MyArray_SDM_Commands_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MyArray_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MyArray_SDM_Commands_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_MyArray_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** EB_command_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int EB_command_T_SDM_Commands_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EB_command_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_EB_command_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EB_command_T_SDM_Commands_Pkg_allow_double_conversion();
extern int EB_command_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int get_EB_command_T_SDM_Commands_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EB_command_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EB_command_T_SDM_Commands_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_EB_command_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** SupervisionStatus_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SupervisionStatus_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SupervisionStatus_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SupervisionStatus_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SupervisionStatus_T_SDM_Types_Pkg_allow_double_conversion();
extern int SupervisionStatus_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SupervisionStatus_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SupervisionStatus_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SupervisionStatus_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SupervisionStatus_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Types_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Types_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SDM_Types_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Types_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Types_T_SDM_Types_Pkg_allow_double_conversion();
extern int SDM_Types_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SDM_Types_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SDM_Types_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SDM_Types_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SDM_Types_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** Speeds_T_SDM_Types_Pkg 
 ****************************************************************/
extern int Speeds_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Speeds_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Speeds_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Speeds_T_SDM_Types_Pkg_allow_double_conversion();
extern int Speeds_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Speeds_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Speeds_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Speeds_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Speeds_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Locations_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Locations_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SDM_Locations_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Locations_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Locations_T_SDM_Types_Pkg_allow_double_conversion();
extern int SDM_Locations_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SDM_Locations_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SDM_Locations_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SDM_Locations_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SDM_Locations_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** trainData_internal_t_SDM_Types_Pkg 
 ****************************************************************/
extern int trainData_internal_t_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainData_internal_t_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_trainData_internal_t_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_internal_t_SDM_Types_Pkg_allow_double_conversion();
extern int trainData_internal_t_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_trainData_internal_t_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainData_internal_t_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainData_internal_t_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainData_internal_t_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Commands_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Commands_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SDM_Commands_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Commands_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Commands_T_SDM_Types_Pkg_allow_double_conversion();
extern int SDM_Commands_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SDM_Commands_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SDM_Commands_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SDM_Commands_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SDM_Commands_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** L_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int L_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_L_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_L_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_internal_real_Type_SDM_Types_Pkg_allow_double_conversion();
extern int L_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_L_internal_real_Type_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_L_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_L_internal_real_Type_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_L_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** V_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int V_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_V_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_V_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_internal_real_Type_SDM_Types_Pkg_allow_double_conversion();
extern int V_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_V_internal_real_Type_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_V_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_V_internal_real_Type_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_V_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** TrainLocations_real_T_SDM_Types_Pkg 
 ****************************************************************/
extern int TrainLocations_real_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TrainLocations_real_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrainLocations_real_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrainLocations_real_T_SDM_Types_Pkg_allow_double_conversion();
extern int TrainLocations_real_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TrainLocations_real_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TrainLocations_real_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TrainLocations_real_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TrainLocations_real_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** A_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int A_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_A_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_A_internal_real_Type_SDM_Types_Pkg_allow_double_conversion();
extern int A_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_A_internal_real_Type_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_internal_real_Type_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_A_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** T_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int T_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_internal_real_Type_SDM_Types_Pkg_allow_double_conversion();
extern int T_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_internal_real_Type_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_internal_real_Type_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** Percentage_T_SDM_Types_Pkg 
 ****************************************************************/
extern int Percentage_T_SDM_Types_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Percentage_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Percentage_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Percentage_T_SDM_Types_Pkg_allow_double_conversion();
extern int Percentage_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int get_Percentage_T_SDM_Types_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Percentage_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Percentage_T_SDM_Types_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_Percentage_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** TargetType_T_TargetManagement_types 
 ****************************************************************/
extern int TargetType_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TargetType_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_TargetType_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_TargetType_T_TargetManagement_types_allow_double_conversion();
extern int TargetType_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_TargetType_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TargetType_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TargetType_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_TargetType_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_T_TargetManagement_types 
 ****************************************************************/
extern int Target_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Target_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_T_TargetManagement_types_allow_double_conversion();
extern int Target_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_Target_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Target_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Target_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_Target_T_TargetManagement_types_Utils;

/****************************************************************
 ** TargetCollection_T_TargetManagement_types 
 ****************************************************************/
extern int TargetCollection_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TargetCollection_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_TargetCollection_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_TargetCollection_T_TargetManagement_types_allow_double_conversion();
extern int TargetCollection_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_TargetCollection_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TargetCollection_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TargetCollection_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_TargetCollection_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_list_MRSP_real_T_TargetManagement_types 
 ****************************************************************/
extern int Target_list_MRSP_real_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Target_list_MRSP_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_list_MRSP_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_list_MRSP_real_T_TargetManagement_types_allow_double_conversion();
extern int Target_list_MRSP_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_Target_list_MRSP_real_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Target_list_MRSP_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Target_list_MRSP_real_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_Target_list_MRSP_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_real_T_TargetManagement_types 
 ****************************************************************/
extern int Target_real_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Target_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_real_T_TargetManagement_types_allow_double_conversion();
extern int Target_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_Target_real_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Target_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Target_real_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_Target_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** MRSP_internal_section_T_TargetManagement_types 
 ****************************************************************/
extern int MRSP_internal_section_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_internal_section_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MRSP_internal_section_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MRSP_internal_section_T_TargetManagement_types_allow_double_conversion();
extern int MRSP_internal_section_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_MRSP_internal_section_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_internal_section_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_internal_section_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_internal_section_T_TargetManagement_types_Utils;

/****************************************************************
 ** EOA_real_T_TargetManagement_types 
 ****************************************************************/
extern int EOA_real_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EOA_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_EOA_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_EOA_real_T_TargetManagement_types_allow_double_conversion();
extern int EOA_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_EOA_real_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EOA_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EOA_real_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_EOA_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** MA_section_real_T_TargetManagement_types 
 ****************************************************************/
extern int MA_section_real_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MA_section_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MA_section_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MA_section_real_T_TargetManagement_types_allow_double_conversion();
extern int MA_section_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_MA_section_real_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MA_section_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MA_section_real_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_MA_section_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** MRSP_internal_T_TargetManagement_types 
 ****************************************************************/
extern int MRSP_internal_T_TargetManagement_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_internal_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MRSP_internal_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MRSP_internal_T_TargetManagement_types_allow_double_conversion();
extern int MRSP_internal_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int get_MRSP_internal_T_TargetManagement_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_internal_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_internal_T_TargetManagement_types_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_internal_T_TargetManagement_types_Utils;

/****************************************************************
 ** Gradient_section_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Gradient_section_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_Gradient_section_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_Gradient_section_real_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_Gradient_section_real_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Gradient_section_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Gradient_section_real_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_Gradient_section_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** Gradient_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Gradient_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_Gradient_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_Gradient_real_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_Gradient_real_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Gradient_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Gradient_real_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_Gradient_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** GradientProfile_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_GradientProfile_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_real_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_real_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_real_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** GradientProfile_real_compensated_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** A_gradient_element_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_gradient_element_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_A_gradient_element_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_A_gradient_element_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_A_gradient_element_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_gradient_element_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_gradient_element_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_A_gradient_element_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** A_gradient_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int A_gradient_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_A_gradient_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_A_gradient_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_A_gradient_t_SDM_GradientAcceleration_types_allow_double_conversion();
extern int A_gradient_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int get_A_gradient_t_SDM_GradientAcceleration_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_A_gradient_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_A_gradient_t_SDM_GradientAcceleration_types_default_value(void *pValue);
extern SimTypeUtils _Type_A_gradient_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** BCAccumulator_type_CalcBrakingCurves_Pkg 
 ****************************************************************/
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BCAccumulator_type_CalcBrakingCurves_Pkg_string(const char *str, char **endptr);
extern int string_to_BCAccumulator_type_CalcBrakingCurves_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCAccumulator_type_CalcBrakingCurves_Pkg_allow_double_conversion();
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BCAccumulator_type_CalcBrakingCurves_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BCAccumulator_type_CalcBrakingCurves_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BCAccumulator_type_CalcBrakingCurves_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BCAccumulator_type_CalcBrakingCurves_Pkg_Utils;

/****************************************************************
 ** ASafe_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafe_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafe_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafe_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafe_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafe_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafe_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafe_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafe_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafe_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeDistanceDefinition_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafeDistanceDefinition_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeDistanceDefinition_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeDistanceDefinition_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafeDistanceDefinition_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafeDistanceDefinition_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafeDistanceDefinition_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafeDistanceDefinition_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeSpeedDefinition_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafeSpeedDefinition_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeSpeedDefinition_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeSpeedDefinition_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafeSpeedDefinition_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafeSpeedDefinition_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafeSpeedDefinition_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafeSpeedDefinition_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafe_Data_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafe_Data_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafe_Data_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafe_Data_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafe_Data_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafe_Data_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafe_Data_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafe_Data_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafe_Data_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafe_Data_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeRow_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeRow_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ASafeRow_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeRow_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeRow_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ASafeRow_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ASafeRow_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ASafeRow_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ASafeRow_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ASafeRow_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaArc_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaArc_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaArc_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaArc_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaArc_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaArc_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaArc_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaArc_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaArc_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaArc_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurve_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurve_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurve_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurve_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurve_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurve_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurve_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurve_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveDistances_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurveDistances_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveDistances_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveDistances_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurveDistances_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurveDistances_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurveDistances_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurveDistances_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveSpeeds_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveAccelerations_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveValid_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurveValid_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveValid_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveValid_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurveValid_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurveValid_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurveValid_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurveValid_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** CurveCollection_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int CurveCollection_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CurveCollection_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_CurveCollection_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_CurveCollection_T_CalcBrakingCurves_types_allow_double_conversion();
extern int CurveCollection_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_CurveCollection_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CurveCollection_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CurveCollection_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_CurveCollection_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_allow_double_conversion();
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int get_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_default_value(void *pValue);
extern SimTypeUtils _Type_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** extractTargetsMRSPACC_TargetManagement_pkg 
 ****************************************************************/
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_extractTargetsMRSPACC_TargetManagement_pkg_string(const char *str, char **endptr);
extern int string_to_extractTargetsMRSPACC_TargetManagement_pkg(const char *str, void *pValue, char **endptr);
extern int is_extractTargetsMRSPACC_TargetManagement_pkg_allow_double_conversion();
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_double(const void *pValue, double *nValue);
extern int get_extractTargetsMRSPACC_TargetManagement_pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_extractTargetsMRSPACC_TargetManagement_pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_extractTargetsMRSPACC_TargetManagement_pkg_default_value(void *pValue);
extern SimTypeUtils _Type_extractTargetsMRSPACC_TargetManagement_pkg_Utils;

/****************************************************************
 ** T_trac_t_TargetLimits_Pkg 
 ****************************************************************/
extern int T_trac_t_TargetLimits_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_T_trac_t_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_T_trac_t_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_trac_t_TargetLimits_Pkg_allow_double_conversion();
extern int T_trac_t_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int get_T_trac_t_TargetLimits_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_T_trac_t_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_T_trac_t_TargetLimits_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_T_trac_t_TargetLimits_Pkg_Utils;

/****************************************************************
 ** bec_t_TargetLimits_Pkg 
 ****************************************************************/
extern int bec_t_TargetLimits_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_bec_t_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_bec_t_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_bec_t_TargetLimits_Pkg_allow_double_conversion();
extern int bec_t_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int get_bec_t_TargetLimits_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_bec_t_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_bec_t_TargetLimits_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_bec_t_TargetLimits_Pkg_Utils;

/****************************************************************
 ** TargetIteratorAkku_TargetLimits_Pkg 
 ****************************************************************/
extern int TargetIteratorAkku_TargetLimits_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TargetIteratorAkku_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_TargetIteratorAkku_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TargetIteratorAkku_TargetLimits_Pkg_allow_double_conversion();
extern int TargetIteratorAkku_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TargetIteratorAkku_TargetLimits_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TargetIteratorAkku_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TargetIteratorAkku_TargetLimits_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TargetIteratorAkku_TargetLimits_Pkg_Utils;

/****************************************************************
 ** TractionDeltaTriple_TargetLimits_Pkg 
 ****************************************************************/
extern int TractionDeltaTriple_TargetLimits_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TractionDeltaTriple_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_TractionDeltaTriple_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TractionDeltaTriple_TargetLimits_Pkg_allow_double_conversion();
extern int TractionDeltaTriple_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TractionDeltaTriple_TargetLimits_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TractionDeltaTriple_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TractionDeltaTriple_TargetLimits_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TractionDeltaTriple_TargetLimits_Pkg_Utils;

/****************************************************************
 ** t_Brake_t_SDMModelPkg 
 ****************************************************************/
extern int t_Brake_t_SDMModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_t_Brake_t_SDMModelPkg_string(const char *str, char **endptr);
extern int string_to_t_Brake_t_SDMModelPkg(const char *str, void *pValue, char **endptr);
extern int is_t_Brake_t_SDMModelPkg_allow_double_conversion();
extern int t_Brake_t_SDMModelPkg_to_double(const void *pValue, double *nValue);
extern int get_t_Brake_t_SDMModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_t_Brake_t_SDMModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_t_Brake_t_SDMModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_t_Brake_t_SDMModelPkg_Utils;

/****************************************************************
 ** t_BrakeVt_t_SDMModelPkg 
 ****************************************************************/
extern int t_BrakeVt_t_SDMModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_t_BrakeVt_t_SDMModelPkg_string(const char *str, char **endptr);
extern int string_to_t_BrakeVt_t_SDMModelPkg(const char *str, void *pValue, char **endptr);
extern int is_t_BrakeVt_t_SDMModelPkg_allow_double_conversion();
extern int t_BrakeVt_t_SDMModelPkg_to_double(const void *pValue, double *nValue);
extern int get_t_BrakeVt_t_SDMModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_t_BrakeVt_t_SDMModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_t_BrakeVt_t_SDMModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_t_BrakeVt_t_SDMModelPkg_Utils;

/****************************************************************
 ** coeff_BrakeBasic_t_SDMConversionModelPkg 
 ****************************************************************/
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_coeff_BrakeBasic_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_coeff_BrakeBasic_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_coeff_BrakeBasic_t_SDMConversionModelPkg_allow_double_conversion();
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_coeff_BrakeBasic_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_coeff_BrakeBasic_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_coeff_BrakeBasic_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_coeff_BrakeBasic_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** LKrIntLookUp_t_SDMConversionModelPkg 
 ****************************************************************/
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LKrIntLookUp_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_LKrIntLookUp_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_LKrIntLookUp_t_SDMConversionModelPkg_allow_double_conversion();
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_LKrIntLookUp_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LKrIntLookUp_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LKrIntLookUp_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_LKrIntLookUp_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** mv_Map_t_SDMConversionModelPkg 
 ****************************************************************/
extern int mv_Map_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mv_Map_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_mv_Map_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_mv_Map_t_SDMConversionModelPkg_allow_double_conversion();
extern int mv_Map_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_mv_Map_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mv_Map_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mv_Map_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_mv_Map_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** m_KvSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int m_KvSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_m_KvSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_m_KvSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_m_KvSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int m_KvSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_m_KvSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_m_KvSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_m_KvSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_m_KvSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** v_KvSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_KvSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_v_KvSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_KvSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_KvSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int v_KvSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_v_KvSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_v_KvSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_v_KvSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_v_KvSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** av_Map_t_SDMConversionModelPkg 
 ****************************************************************/
extern int av_Map_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_av_Map_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_av_Map_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_av_Map_t_SDMConversionModelPkg_allow_double_conversion();
extern int av_Map_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_av_Map_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_av_Map_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_av_Map_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_av_Map_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** a_BrakeSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_a_BrakeSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_BrakeSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_BrakeSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_a_BrakeSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_a_BrakeSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_a_BrakeSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_a_BrakeSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** v_BrakeSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_v_BrakeSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_BrakeSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_BrakeSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_v_BrakeSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_v_BrakeSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_v_BrakeSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_v_BrakeSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** av_MergedMap_t_SDMConversionModelPkg 
 ****************************************************************/
extern int av_MergedMap_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_av_MergedMap_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_av_MergedMap_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_av_MergedMap_t_SDMConversionModelPkg_allow_double_conversion();
extern int av_MergedMap_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_av_MergedMap_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_av_MergedMap_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_av_MergedMap_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_av_MergedMap_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** a_MergedSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_MergedSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_a_MergedSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_MergedSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_MergedSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int a_MergedSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_a_MergedSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_a_MergedSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_a_MergedSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_a_MergedSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** v_MergedSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_MergedSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_v_MergedSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_MergedSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_MergedSteps_t_SDMConversionModelPkg_allow_double_conversion();
extern int v_MergedSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_v_MergedSteps_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_v_MergedSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_v_MergedSteps_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_v_MergedSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** a_Brake_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_Brake_t_SDMConversionModelPkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_a_Brake_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_Brake_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_Brake_t_SDMConversionModelPkg_allow_double_conversion();
extern int a_Brake_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int get_a_Brake_t_SDMConversionModelPkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_a_Brake_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_a_Brake_t_SDMConversionModelPkg_default_value(void *pValue);
extern SimTypeUtils _Type_a_Brake_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** ACC_SDM_GradientAcceleration_Pkg 
 ****************************************************************/
extern int ACC_SDM_GradientAcceleration_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ACC_SDM_GradientAcceleration_Pkg_string(const char *str, char **endptr);
extern int string_to_ACC_SDM_GradientAcceleration_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ACC_SDM_GradientAcceleration_Pkg_allow_double_conversion();
extern int ACC_SDM_GradientAcceleration_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ACC_SDM_GradientAcceleration_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ACC_SDM_GradientAcceleration_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ACC_SDM_GradientAcceleration_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ACC_SDM_GradientAcceleration_Pkg_Utils;

/****************************************************************
 ** EVC_to_GUI_EnvSim 
 ****************************************************************/
extern int EVC_to_GUI_EnvSim_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_EVC_to_GUI_EnvSim_string(const char *str, char **endptr);
extern int string_to_EVC_to_GUI_EnvSim(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_GUI_EnvSim_allow_double_conversion();
extern int EVC_to_GUI_EnvSim_to_double(const void *pValue, double *nValue);
extern int get_EVC_to_GUI_EnvSim_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_EVC_to_GUI_EnvSim(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_EVC_to_GUI_EnvSim_default_value(void *pValue);
extern SimTypeUtils _Type_EVC_to_GUI_EnvSim_Utils;

/****************************************************************
 ** GUI_to_EVC_EnvSim 
 ****************************************************************/
extern int GUI_to_EVC_EnvSim_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_GUI_to_EVC_EnvSim_string(const char *str, char **endptr);
extern int string_to_GUI_to_EVC_EnvSim(const char *str, void *pValue, char **endptr);
extern int is_GUI_to_EVC_EnvSim_allow_double_conversion();
extern int GUI_to_EVC_EnvSim_to_double(const void *pValue, double *nValue);
extern int get_GUI_to_EVC_EnvSim_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_GUI_to_EVC_EnvSim(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_GUI_to_EVC_EnvSim_default_value(void *pValue);
extern SimTypeUtils _Type_GUI_to_EVC_EnvSim_Utils;

/****************************************************************
 ** Driver2MAR_T_MA_Request 
 ****************************************************************/
extern int Driver2MAR_T_MA_Request_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Driver2MAR_T_MA_Request_string(const char *str, char **endptr);
extern int string_to_Driver2MAR_T_MA_Request(const char *str, void *pValue, char **endptr);
extern int is_Driver2MAR_T_MA_Request_allow_double_conversion();
extern int Driver2MAR_T_MA_Request_to_double(const void *pValue, double *nValue);
extern int get_Driver2MAR_T_MA_Request_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Driver2MAR_T_MA_Request(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Driver2MAR_T_MA_Request_default_value(void *pValue);
extern SimTypeUtils _Type_Driver2MAR_T_MA_Request_Utils;

/****************************************************************
 ** BGCollector_T_Receive_TrackSide_Msg_Pkg 
 ****************************************************************/
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BGCollector_T_Receive_TrackSide_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_BGCollector_T_Receive_TrackSide_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BGCollector_T_Receive_TrackSide_Msg_Pkg_allow_double_conversion();
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BGCollector_T_Receive_TrackSide_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BGCollector_T_Receive_TrackSide_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BGCollector_T_Receive_TrackSide_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BGCollector_T_Receive_TrackSide_Msg_Pkg_Utils;

/****************************************************************
 ** TelegramStore_T_Receive_TrackSide_Msg_Pkg 
 ****************************************************************/
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TelegramStore_T_Receive_TrackSide_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramStore_T_Receive_TrackSide_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramStore_T_Receive_TrackSide_Msg_Pkg_allow_double_conversion();
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TelegramStore_T_Receive_TrackSide_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TelegramStore_T_Receive_TrackSide_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TelegramStore_T_Receive_TrackSide_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TelegramStore_T_Receive_TrackSide_Msg_Pkg_Utils;

/****************************************************************
 ** API_TrackSideInput_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_TrackSideInput_T_API_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_API_TrackSideInput_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_TrackSideInput_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_TrackSideInput_T_API_Msg_Pkg_allow_double_conversion();
extern int API_TrackSideInput_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_API_TrackSideInput_T_API_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_API_TrackSideInput_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_API_TrackSideInput_T_API_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_API_TrackSideInput_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** API_TelegramHeader_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_TelegramHeader_T_API_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_API_TelegramHeader_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_TelegramHeader_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_TelegramHeader_T_API_Msg_Pkg_allow_double_conversion();
extern int API_TelegramHeader_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_API_TelegramHeader_T_API_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_API_TelegramHeader_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_API_TelegramHeader_T_API_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_API_TelegramHeader_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** API_RadioMsgHeader_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_API_RadioMsgHeader_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_RadioMsgHeader_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_RadioMsgHeader_T_API_Msg_Pkg_allow_double_conversion();
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int get_API_RadioMsgHeader_T_API_Msg_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_API_RadioMsgHeader_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_API_RadioMsgHeader_T_API_Msg_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_API_RadioMsgHeader_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** Array06_TM 
 ****************************************************************/
extern int Array06_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array06_TM_string(const char *str, char **endptr);
extern int string_to_Array06_TM(const char *str, void *pValue, char **endptr);
extern int is_Array06_TM_allow_double_conversion();
extern int Array06_TM_to_double(const void *pValue, double *nValue);
extern int get_Array06_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array06_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array06_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array06_TM_Utils;

/****************************************************************
 ** P015_section_enum_T_TM 
 ****************************************************************/
extern int P015_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_enum_T_TM_allow_double_conversion();
extern int P015_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_section_enum_T_TM_Utils;

/****************************************************************
 ** P015_sections_array_flat_T_TM 
 ****************************************************************/
extern int P015_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_sections_array_flat_T_TM_allow_double_conversion();
extern int P015_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P015_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** Array15_TM 
 ****************************************************************/
extern int Array15_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array15_TM_string(const char *str, char **endptr);
extern int string_to_Array15_TM(const char *str, void *pValue, char **endptr);
extern int is_Array15_TM_allow_double_conversion();
extern int Array15_TM_to_double(const void *pValue, double *nValue);
extern int get_Array15_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array15_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array15_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array15_TM_Utils;

/****************************************************************
 ** P015_OBU_T_TM 
 ****************************************************************/
extern int P015_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_T_TM_allow_double_conversion();
extern int P015_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_OBU_T_TM_Utils;

/****************************************************************
 ** P046_section_enum_T_TM 
 ****************************************************************/
extern int P046_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_section_enum_T_TM_allow_double_conversion();
extern int P046_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_section_enum_T_TM_Utils;

/****************************************************************
 ** P046_sections_array_flat_T_TM 
 ****************************************************************/
extern int P046_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_sections_array_flat_T_TM_allow_double_conversion();
extern int P046_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P046_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P046_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P046_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P046_OBU_T_TM 
 ****************************************************************/
extern int P046_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P046_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_T_TM_allow_double_conversion();
extern int P046_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P046_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P046_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P046_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P046_OBU_T_TM_Utils;

/****************************************************************
 ** Array04_TM 
 ****************************************************************/
extern int Array04_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array04_TM_string(const char *str, char **endptr);
extern int string_to_Array04_TM(const char *str, void *pValue, char **endptr);
extern int is_Array04_TM_allow_double_conversion();
extern int Array04_TM_to_double(const void *pValue, double *nValue);
extern int get_Array04_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array04_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array04_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array04_TM_Utils;

/****************************************************************
 ** P041_section_enum_T_TM 
 ****************************************************************/
extern int P041_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_section_enum_T_TM_allow_double_conversion();
extern int P041_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_section_enum_T_TM_Utils;

/****************************************************************
 ** P041_sections_array_flat_T_TM 
 ****************************************************************/
extern int P041_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_sections_array_flat_T_TM_allow_double_conversion();
extern int P041_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P041_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P041_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P041_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P041_OBU_T_TM 
 ****************************************************************/
extern int P041_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P041_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_T_TM_allow_double_conversion();
extern int P041_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P041_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P041_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P041_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P041_OBU_T_TM_Utils;

/****************************************************************
 ** P021_section_enum_T_TM 
 ****************************************************************/
extern int P021_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_enum_T_TM_allow_double_conversion();
extern int P021_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_section_enum_T_TM_Utils;

/****************************************************************
 ** P021_sections_array_flat_T_TM 
 ****************************************************************/
extern int P021_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_sections_array_flat_T_TM_allow_double_conversion();
extern int P021_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P021_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P021_OBU_T_TM 
 ****************************************************************/
extern int P021_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_T_TM_allow_double_conversion();
extern int P021_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_OBU_T_TM_Utils;

/****************************************************************
 ** Array05_TM 
 ****************************************************************/
extern int Array05_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array05_TM_string(const char *str, char **endptr);
extern int string_to_Array05_TM(const char *str, void *pValue, char **endptr);
extern int is_Array05_TM_allow_double_conversion();
extern int Array05_TM_to_double(const void *pValue, double *nValue);
extern int get_Array05_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array05_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array05_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array05_TM_Utils;

/****************************************************************
 ** Array03_TM 
 ****************************************************************/
extern int Array03_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array03_TM_string(const char *str, char **endptr);
extern int string_to_Array03_TM(const char *str, void *pValue, char **endptr);
extern int is_Array03_TM_allow_double_conversion();
extern int Array03_TM_to_double(const void *pValue, double *nValue);
extern int get_Array03_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array03_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array03_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array03_TM_Utils;

/****************************************************************
 ** Array07_TM 
 ****************************************************************/
extern int Array07_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array07_TM_string(const char *str, char **endptr);
extern int string_to_Array07_TM(const char *str, void *pValue, char **endptr);
extern int is_Array07_TM_allow_double_conversion();
extern int Array07_TM_to_double(const void *pValue, double *nValue);
extern int get_Array07_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array07_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array07_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array07_TM_Utils;

/****************************************************************
 ** P012_section_enum_T_TM 
 ****************************************************************/
extern int P012_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P012_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_section_enum_T_TM_allow_double_conversion();
extern int P012_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P012_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P012_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P012_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P012_section_enum_T_TM_Utils;

/****************************************************************
 ** P012_sections_array_flat_T_TM 
 ****************************************************************/
extern int P012_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P012_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_sections_array_flat_T_TM_allow_double_conversion();
extern int P012_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P012_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P012_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P012_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P012_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P012_OBU_T_TM 
 ****************************************************************/
extern int P012_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P012_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_OBU_T_TM_allow_double_conversion();
extern int P012_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P012_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P012_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P012_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P012_OBU_T_TM_Utils;

/****************************************************************
 ** P139_OBU_T_TM 
 ****************************************************************/
extern int P139_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P139_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P139_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P139_OBU_T_TM_allow_double_conversion();
extern int P139_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P139_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P139_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P139_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P139_OBU_T_TM_Utils;

/****************************************************************
 ** P135_OBU_T_TM 
 ****************************************************************/
extern int P135_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P135_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P135_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P135_OBU_T_TM_allow_double_conversion();
extern int P135_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P135_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P135_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P135_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P135_OBU_T_TM_Utils;

/****************************************************************
 ** P138_OBU_T_TM 
 ****************************************************************/
extern int P138_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P138_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P138_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P138_OBU_T_TM_allow_double_conversion();
extern int P138_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P138_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P138_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P138_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P138_OBU_T_TM_Utils;

/****************************************************************
 ** P058_section_enum_T_TM 
 ****************************************************************/
extern int P058_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_enum_T_TM_allow_double_conversion();
extern int P058_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_section_enum_T_TM_Utils;

/****************************************************************
 ** P058_sections_array_flat_T_TM 
 ****************************************************************/
extern int P058_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_sections_array_flat_T_TM_allow_double_conversion();
extern int P058_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P058_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P058_OBU_T_TM 
 ****************************************************************/
extern int P058_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_T_TM_allow_double_conversion();
extern int P058_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_OBU_T_TM_Utils;

/****************************************************************
 ** Array08_TM 
 ****************************************************************/
extern int Array08_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array08_TM_string(const char *str, char **endptr);
extern int string_to_Array08_TM(const char *str, void *pValue, char **endptr);
extern int is_Array08_TM_allow_double_conversion();
extern int Array08_TM_to_double(const void *pValue, double *nValue);
extern int get_Array08_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array08_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array08_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array08_TM_Utils;

/****************************************************************
 ** Array24_TM 
 ****************************************************************/
extern int Array24_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array24_TM_string(const char *str, char **endptr);
extern int string_to_Array24_TM(const char *str, void *pValue, char **endptr);
extern int is_Array24_TM_allow_double_conversion();
extern int Array24_TM_to_double(const void *pValue, double *nValue);
extern int get_Array24_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array24_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array24_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array24_TM_Utils;

/****************************************************************
 ** P003_OBU_T_TM 
 ****************************************************************/
extern int P003_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_T_TM_allow_double_conversion();
extern int P003_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_T_TM_Utils;

/****************************************************************
 ** P003_OBU_nid_c_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_nid_c_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_nid_c_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_nid_c_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_nid_c_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_nid_c_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_nid_c_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_nid_c_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_nid_c_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_nid_c_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_nid_c_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_nid_c_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_nid_c_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_nid_c_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_nid_c_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_nid_c_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_nid_c_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_nid_c_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_nid_c_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_nid_c_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_n_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_n_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_n_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_n_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_n_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_n_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_n_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_n_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_n_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_n_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_n_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_n_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_n_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_n_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_n_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_n_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_n_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_n_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_n_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_n_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_k_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_k_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_k_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_k_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_k_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_k_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_k_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_k_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_k_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_k_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_k_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_k_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_m_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_k_m_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_m_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_m_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_k_m_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_k_m_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_k_m_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_k_m_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_m_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_m_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_k_m_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_m_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_m_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_k_m_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_k_m_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_k_m_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_k_m_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_k_m_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_l_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_l_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_l_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_l_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_l_sectionlist_enum_T_TM_allow_double_conversion();
extern int P003_OBU_l_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_l_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_l_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_l_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_l_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_l_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_l_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_OBU_l_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_l_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_l_section_enum_T_TM_allow_double_conversion();
extern int P003_OBU_l_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P003_OBU_l_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_OBU_l_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_OBU_l_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P003_OBU_l_section_enum_T_TM_Utils;

/****************************************************************
 ** P005_section_enum_T_TM 
 ****************************************************************/
extern int P005_section_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_enum_T_TM_allow_double_conversion();
extern int P005_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_section_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_section_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_section_enum_T_TM_Utils;

/****************************************************************
 ** P005_sections_array_flat_T_TM 
 ****************************************************************/
extern int P005_sections_array_flat_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_sections_array_flat_T_TM_allow_double_conversion();
extern int P005_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_sections_array_flat_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_sections_array_flat_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_enum_T_TM_allow_double_conversion();
extern int P005_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_OBU_sectionlist_enum_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_OBU_sectionlist_enum_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P005_OBU_T_TM 
 ****************************************************************/
extern int P005_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_T_TM_allow_double_conversion();
extern int P005_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_OBU_T_TM_Utils;

/****************************************************************
 ** P131_OBU_T_TM 
 ****************************************************************/
extern int P131_OBU_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P131_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P131_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P131_OBU_T_TM_allow_double_conversion();
extern int P131_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P131_OBU_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P131_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P131_OBU_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P131_OBU_T_TM_Utils;

/****************************************************************
 ** Array09_TM 
 ****************************************************************/
extern int Array09_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array09_TM_string(const char *str, char **endptr);
extern int string_to_Array09_TM(const char *str, void *pValue, char **endptr);
extern int is_Array09_TM_allow_double_conversion();
extern int Array09_TM_to_double(const void *pValue, double *nValue);
extern int get_Array09_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array09_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array09_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Array09_TM_Utils;

/****************************************************************
 ** P042_trackside_int_T_TM 
 ****************************************************************/
extern int P042_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P042_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P042_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P042_trackside_int_T_TM_allow_double_conversion();
extern int P042_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P042_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P042_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P042_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P042_trackside_int_T_TM_Utils;

/****************************************************************
 ** nid_packet_meta_TM 
 ****************************************************************/
extern int nid_packet_meta_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_nid_packet_meta_TM_string(const char *str, char **endptr);
extern int string_to_nid_packet_meta_TM(const char *str, void *pValue, char **endptr);
extern int is_nid_packet_meta_TM_allow_double_conversion();
extern int nid_packet_meta_TM_to_double(const void *pValue, double *nValue);
extern int get_nid_packet_meta_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_nid_packet_meta_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_nid_packet_meta_TM_default_value(void *pValue);
extern SimTypeUtils _Type_nid_packet_meta_TM_Utils;

/****************************************************************
 ** CompressedRadioMessage_TM 
 ****************************************************************/
extern int CompressedRadioMessage_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CompressedRadioMessage_TM_string(const char *str, char **endptr);
extern int string_to_CompressedRadioMessage_TM(const char *str, void *pValue, char **endptr);
extern int is_CompressedRadioMessage_TM_allow_double_conversion();
extern int CompressedRadioMessage_TM_to_double(const void *pValue, double *nValue);
extern int get_CompressedRadioMessage_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CompressedRadioMessage_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CompressedRadioMessage_TM_default_value(void *pValue);
extern SimTypeUtils _Type_CompressedRadioMessage_TM_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_TM 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrackTrain_Header_T_TM_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_TM(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_TM_allow_double_conversion();
extern int Radio_TrackTrain_Header_T_TM_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrackTrain_Header_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrackTrain_Header_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrackTrain_Header_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_TM_Utils;

/****************************************************************
 ** P057_trackside_int_T_TM 
 ****************************************************************/
extern int P057_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P057_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P057_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P057_trackside_int_T_TM_allow_double_conversion();
extern int P057_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P057_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P057_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P057_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P057_trackside_int_T_TM_Utils;

/****************************************************************
 ** P058_trackside_int_T_TM 
 ****************************************************************/
extern int P058_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_trackside_int_T_TM_allow_double_conversion();
extern int P058_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_trackside_int_T_TM_Utils;

/****************************************************************
 ** P058_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P058_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P058_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P058_section_int_T_TM 
 ****************************************************************/
extern int P058_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_int_T_TM_allow_double_conversion();
extern int P058_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_section_int_T_TM_Utils;

/****************************************************************
 ** P021_trackside_int_T_TM 
 ****************************************************************/
extern int P021_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_trackside_int_T_TM_allow_double_conversion();
extern int P021_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_trackside_int_T_TM_Utils;

/****************************************************************
 ** P021_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P021_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P021_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P021_section_int_T_TM 
 ****************************************************************/
extern int P021_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_int_T_TM_allow_double_conversion();
extern int P021_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_section_int_T_TM_Utils;

/****************************************************************
 ** P005_trackside_int_T_TM 
 ****************************************************************/
extern int P005_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_trackside_int_T_TM_allow_double_conversion();
extern int P005_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_trackside_int_T_TM_Utils;

/****************************************************************
 ** P005_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P005_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P005_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P005_section_int_T_TM 
 ****************************************************************/
extern int P005_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_int_T_TM_allow_double_conversion();
extern int P005_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_section_int_T_TM_Utils;

/****************************************************************
 ** P015_trackside_int_T_TM 
 ****************************************************************/
extern int P015_trackside_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_trackside_int_T_TM_allow_double_conversion();
extern int P015_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_trackside_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_trackside_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_trackside_int_T_TM_Utils;

/****************************************************************
 ** P015_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P015_trackide_sectionlist_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_trackide_sectionlist_T_TM_allow_double_conversion();
extern int P015_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_trackide_sectionlist_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_trackide_sectionlist_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P015_section_int_T_TM 
 ****************************************************************/
extern int P015_section_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_int_T_TM_allow_double_conversion();
extern int P015_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_section_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_section_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_section_int_T_TM_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P005_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P005_section_array_T_TM 
 ****************************************************************/
extern int P005_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_array_T_TM_allow_double_conversion();
extern int P005_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_section_array_T_TM_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P005_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P005_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P015_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P015_section_array_T_TM 
 ****************************************************************/
extern int P015_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_array_T_TM_allow_double_conversion();
extern int P015_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_section_array_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P015_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P015_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P015_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P015_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P015_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P021_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P021_section_array_T_TM 
 ****************************************************************/
extern int P021_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_array_T_TM_allow_double_conversion();
extern int P021_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_section_array_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P021_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P021_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P021_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P021_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P021_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_array_T_TM_allow_double_conversion();
extern int P058_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_OBU_sectionlist_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_OBU_sectionlist_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P058_section_array_T_TM 
 ****************************************************************/
extern int P058_section_array_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_array_T_TM_allow_double_conversion();
extern int P058_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_section_array_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_section_array_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_section_array_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P058_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_int_T_TM_allow_double_conversion();
extern int P058_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_P058_OBU_sectionlist_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P058_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P058_OBU_sectionlist_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** CompressedBaliseMessage_TM 
 ****************************************************************/
extern int CompressedBaliseMessage_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_CompressedBaliseMessage_TM_string(const char *str, char **endptr);
extern int string_to_CompressedBaliseMessage_TM(const char *str, void *pValue, char **endptr);
extern int is_CompressedBaliseMessage_TM_allow_double_conversion();
extern int CompressedBaliseMessage_TM_to_double(const void *pValue, double *nValue);
extern int get_CompressedBaliseMessage_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_CompressedBaliseMessage_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_CompressedBaliseMessage_TM_default_value(void *pValue);
extern SimTypeUtils _Type_CompressedBaliseMessage_TM_Utils;

/****************************************************************
 ** BaliseTelegramHeader_int_T_TM 
 ****************************************************************/
extern int BaliseTelegramHeader_int_T_TM_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BaliseTelegramHeader_int_T_TM_string(const char *str, char **endptr);
extern int string_to_BaliseTelegramHeader_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_BaliseTelegramHeader_int_T_TM_allow_double_conversion();
extern int BaliseTelegramHeader_int_T_TM_to_double(const void *pValue, double *nValue);
extern int get_BaliseTelegramHeader_int_T_TM_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BaliseTelegramHeader_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BaliseTelegramHeader_int_T_TM_default_value(void *pValue);
extern SimTypeUtils _Type_BaliseTelegramHeader_int_T_TM_Utils;

/****************************************************************
 ** MetadataTruthtable_T1_CheckEuroradioMessage 
 ****************************************************************/
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MetadataTruthtable_T1_CheckEuroradioMessage_string(const char *str, char **endptr);
extern int string_to_MetadataTruthtable_T1_CheckEuroradioMessage(const char *str, void *pValue, char **endptr);
extern int is_MetadataTruthtable_T1_CheckEuroradioMessage_allow_double_conversion();
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_double(const void *pValue, double *nValue);
extern int get_MetadataTruthtable_T1_CheckEuroradioMessage_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MetadataTruthtable_T1_CheckEuroradioMessage(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MetadataTruthtable_T1_CheckEuroradioMessage_default_value(void *pValue);
extern SimTypeUtils _Type_MetadataTruthtable_T1_CheckEuroradioMessage_Utils;

/****************************************************************
 ** M_TrainTrackMessage_buffer_t_TM_lib_internal 
 ****************************************************************/
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrackMessage_buffer_t_TM_lib_internal_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackMessage_buffer_t_TM_lib_internal(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackMessage_buffer_t_TM_lib_internal_allow_double_conversion();
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrackMessage_buffer_t_TM_lib_internal_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrackMessage_buffer_t_TM_lib_internal(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrackMessage_buffer_t_TM_lib_internal_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrackMessage_buffer_t_TM_lib_internal_Utils;

/****************************************************************
 ** M_TrainTrackRadioOutputBuffer_t_TM_lib_internal 
 ****************************************************************/
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_allow_double_conversion();
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_Utils;

/****************************************************************
 ** TransitionBuffer_T_InformationFilter_Pkg 
 ****************************************************************/
extern int TransitionBuffer_T_InformationFilter_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_TransitionBuffer_T_InformationFilter_Pkg_string(const char *str, char **endptr);
extern int string_to_TransitionBuffer_T_InformationFilter_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TransitionBuffer_T_InformationFilter_Pkg_allow_double_conversion();
extern int TransitionBuffer_T_InformationFilter_Pkg_to_double(const void *pValue, double *nValue);
extern int get_TransitionBuffer_T_InformationFilter_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_TransitionBuffer_T_InformationFilter_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_TransitionBuffer_T_InformationFilter_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_TransitionBuffer_T_InformationFilter_Pkg_Utils;

/****************************************************************
 ** LevelDecisionTableActionKind_DataDictionary_Pkg 
 ****************************************************************/
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LevelDecisionTableActionKind_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_LevelDecisionTableActionKind_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LevelDecisionTableActionKind_DataDictionary_Pkg_allow_double_conversion();
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LevelDecisionTableActionKind_DataDictionary_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LevelDecisionTableActionKind_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LevelDecisionTableActionKind_DataDictionary_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LevelDecisionTableActionKind_DataDictionary_Pkg_Utils;

/****************************************************************
 ** LevelDecisionTableType_DataDictionary_Pkg 
 ****************************************************************/
extern int LevelDecisionTableType_DataDictionary_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LevelDecisionTableType_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_LevelDecisionTableType_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LevelDecisionTableType_DataDictionary_Pkg_allow_double_conversion();
extern int LevelDecisionTableType_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LevelDecisionTableType_DataDictionary_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LevelDecisionTableType_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LevelDecisionTableType_DataDictionary_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LevelDecisionTableType_DataDictionary_Pkg_Utils;

/****************************************************************
 ** ModeDecisionTableType_DataDictionary_Pkg 
 ****************************************************************/
extern int ModeDecisionTableType_DataDictionary_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ModeDecisionTableType_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeDecisionTableType_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeDecisionTableType_DataDictionary_Pkg_allow_double_conversion();
extern int ModeDecisionTableType_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ModeDecisionTableType_DataDictionary_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ModeDecisionTableType_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ModeDecisionTableType_DataDictionary_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ModeDecisionTableType_DataDictionary_Pkg_Utils;

/****************************************************************
 ** ModeDecisionTableActionKind_DataDictionary_Pkg 
 ****************************************************************/
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ModeDecisionTableActionKind_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeDecisionTableActionKind_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeDecisionTableActionKind_DataDictionary_Pkg_allow_double_conversion();
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ModeDecisionTableActionKind_DataDictionary_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ModeDecisionTableActionKind_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ModeDecisionTableActionKind_DataDictionary_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ModeDecisionTableActionKind_DataDictionary_Pkg_Utils;

/****************************************************************
 ** dataCollectionForLevelTransition_T_xdebugSupport_Pkg 
 ****************************************************************/
extern int dataCollectionForLevelTransition_T_xdebugSupport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_string(const char *str, char **endptr);
extern int string_to_dataCollectionForLevelTransition_T_xdebugSupport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_allow_double_conversion();
extern int dataCollectionForLevelTransition_T_xdebugSupport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_dataCollectionForLevelTransition_T_xdebugSupport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_dataCollectionForLevelTransition_T_xdebugSupport_Pkg_Utils;

/****************************************************************
 ** probesBalises_T_xdebugSupport_Pkg 
 ****************************************************************/
extern int probesBalises_T_xdebugSupport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_probesBalises_T_xdebugSupport_Pkg_string(const char *str, char **endptr);
extern int string_to_probesBalises_T_xdebugSupport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_probesBalises_T_xdebugSupport_Pkg_allow_double_conversion();
extern int probesBalises_T_xdebugSupport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_probesBalises_T_xdebugSupport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_probesBalises_T_xdebugSupport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_probesBalises_T_xdebugSupport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_probesBalises_T_xdebugSupport_Pkg_Utils;

/****************************************************************
 ** P027V1_OBU_body_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_body_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_body_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_body_enum_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_body_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_body_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_body_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_body_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_enum_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_enum_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_enum_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_enum_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_enum_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_enum_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_enum_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_enum_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_sections_array_flat_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_sections_array_flat_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_sections_array_flat_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_sections_array_flat_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_sections_array_flat_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_sections_array_flat_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_sections_array_flat_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_sections_array_flat_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_OBU_T_TM_baseline2_allow_double_conversion();
extern int P003V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_OBU_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_OBU_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P003V1_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_OBU_sectionlist_int_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_OBU_sectionlist_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_OBU_sectionlist_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_OBU_sectionlist_int_T_TM_baseline2_allow_double_conversion();
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_OBU_sectionlist_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_OBU_sectionlist_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_OBU_sectionlist_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_OBU_sectionlist_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P003_permanent_data_T_TM_baseline2 
 ****************************************************************/
extern int P003_permanent_data_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_permanent_data_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003_permanent_data_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003_permanent_data_T_TM_baseline2_allow_double_conversion();
extern int P003_permanent_data_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003_permanent_data_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_permanent_data_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_permanent_data_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003_permanent_data_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_n_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_n_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_n_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_n_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_n_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_n_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_n_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_n_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_n_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_k_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_k_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_k_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_k_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_k_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_m_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_k_m_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_m_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_m_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_k_m_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_k_m_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_k_m_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_k_m_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_l_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_l_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P203V1_OBU_l_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_l_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_l_section_enum_T_TM_baseline2_allow_double_conversion();
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P203V1_OBU_l_section_enum_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P203V1_OBU_l_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P203V1_OBU_l_section_enum_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P203V1_OBU_l_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_trackside_int_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_trackside_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_trackside_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_trackside_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_trackside_int_T_TM_baseline2_allow_double_conversion();
extern int P027V1_trackside_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_trackside_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_trackside_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_trackside_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_trackside_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_trackside_qdifflist_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_trackside_qdifflist_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_trackside_qdifflist_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_trackside_qdifflist_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_trackside_qdifflist_T_TM_baseline2_allow_double_conversion();
extern int P027V1_trackside_qdifflist_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_trackside_qdifflist_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_trackside_qdifflist_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_trackside_qdifflist_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_trackside_qdifflist_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_int_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_int_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_int_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_int_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_int_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_int_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_int_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_int_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_int_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_int_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_trackside_sectionlist_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_trackside_sectionlist_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_trackside_sectionlist_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_trackside_sectionlist_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_trackside_sectionlist_T_TM_baseline2_allow_double_conversion();
extern int P027V1_trackside_sectionlist_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_trackside_sectionlist_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_trackside_sectionlist_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_trackside_sectionlist_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_trackside_sectionlist_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_int_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_int_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_trackside_int_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_trackside_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_trackside_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_trackside_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_trackside_int_T_TM_baseline2_allow_double_conversion();
extern int P003V1_trackside_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_trackside_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_trackside_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_trackside_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_trackside_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_trackide_sectionlist_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_trackide_sectionlist_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003V1_trackide_sectionlist_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_trackide_sectionlist_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_trackide_sectionlist_T_TM_baseline2_allow_double_conversion();
extern int P003V1_trackide_sectionlist_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P003V1_trackide_sectionlist_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003V1_trackide_sectionlist_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003V1_trackide_sectionlist_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P003V1_trackide_sectionlist_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_int_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_int_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_int_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_int_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_int_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_array_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_array_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_section_array_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_array_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_array_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_section_array_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_section_array_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_section_array_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_section_array_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_section_array_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_allow_double_conversion();
extern int P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int get_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_default_value(void *pValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** connection_ids_T_Handover_Pkg 
 ****************************************************************/
extern int connection_ids_T_Handover_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_connection_ids_T_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_connection_ids_T_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_connection_ids_T_Handover_Pkg_allow_double_conversion();
extern int connection_ids_T_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int get_connection_ids_T_Handover_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_connection_ids_T_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_connection_ids_T_Handover_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_connection_ids_T_Handover_Pkg_Utils;

/****************************************************************
 ** abilityToHandleCommunicationSessions_Handover_Pkg 
 ****************************************************************/
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_abilityToHandleCommunicationSessions_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_abilityToHandleCommunicationSessions_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_abilityToHandleCommunicationSessions_Handover_Pkg_allow_double_conversion();
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int get_abilityToHandleCommunicationSessions_Handover_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_abilityToHandleCommunicationSessions_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_abilityToHandleCommunicationSessions_Handover_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_abilityToHandleCommunicationSessions_Handover_Pkg_Utils;

/****************************************************************
 ** p131_q_rbcTransitionOrder_T_Handover_Pkg 
 ****************************************************************/
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_p131_q_rbcTransitionOrder_T_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_p131_q_rbcTransitionOrder_T_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p131_q_rbcTransitionOrder_T_Handover_Pkg_allow_double_conversion();
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int get_p131_q_rbcTransitionOrder_T_Handover_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_p131_q_rbcTransitionOrder_T_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_p131_q_rbcTransitionOrder_T_Handover_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_p131_q_rbcTransitionOrder_T_Handover_Pkg_Utils;

/****************************************************************
 ** ErrorMessage_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ErrorMessage_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ErrorMessage_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ErrorMessage_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ErrorMessage_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ErrorMessage_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ErrorMessage_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ErrorMessage_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** ReportedBG_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ReportedBG_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ReportedBG_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReportedBG_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ReportedBG_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ReportedBG_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ReportedBG_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ReportedBG_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** ReportedBGList_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ReportedBGList_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ReportedBGList_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReportedBGList_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ReportedBGList_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ReportedBGList_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ReportedBGList_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ReportedBGList_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** SystemTime_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int SystemTime_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SystemTime_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_SystemTime_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SystemTime_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int SystemTime_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_SystemTime_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SystemTime_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SystemTime_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_SystemTime_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** ModeLevel2PositionReport_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** LocationBasedEvents_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_LocationBasedEvents_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_LocationBasedEvents_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LocationBasedEvents_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_LocationBasedEvents_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_LocationBasedEvents_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_LocationBasedEvents_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_LocationBasedEvents_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** RBC_Communication_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RBC_Communication_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Communication_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Communication_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RBC_Communication_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RBC_Communication_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RBC_Communication_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RBC_Communication_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** BG_Orientation_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_Orientation_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Orientation_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Orientation_T_ProvidePositionReport_Pkg_allow_double_conversion();
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_Orientation_T_ProvidePositionReport_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_Orientation_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_Orientation_T_ProvidePositionReport_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_Orientation_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** Position_Report_TrainToTrack 
 ****************************************************************/
extern int Position_Report_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Position_Report_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Position_Report_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Position_Report_TrainToTrack_allow_double_conversion();
extern int Position_Report_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_Position_Report_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Position_Report_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Position_Report_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_Position_Report_TrainToTrack_Utils;

/****************************************************************
 ** Position_Report_based_on_two_balise_groups_TrainToTrack 
 ****************************************************************/
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Position_Report_based_on_two_balise_groups_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Position_Report_based_on_two_balise_groups_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Position_Report_based_on_two_balise_groups_TrainToTrack_allow_double_conversion();
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_Position_Report_based_on_two_balise_groups_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Position_Report_based_on_two_balise_groups_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Position_Report_based_on_two_balise_groups_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_Position_Report_based_on_two_balise_groups_TrainToTrack_Utils;

/****************************************************************
 ** M_TrainTrackMessageBus_t_TM_TrainTrack_Bus 
 ****************************************************************/
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_allow_double_conversion();
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_double(const void *pValue, double *nValue);
extern int get_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_default_value(void *pValue);
extern SimTypeUtils _Type_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_Utils;

/****************************************************************
 ** P004_TM_TrainToTrack 
 ****************************************************************/
extern int P004_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P004_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P004_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P004_TM_TrainToTrack_allow_double_conversion();
extern int P004_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P004_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P004_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P004_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P004_TM_TrainToTrack_Utils;

/****************************************************************
 ** P004_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P004_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P004_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P004_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P004_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P004_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P004_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P004_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P004_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P004_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P005_TM_TrainToTrack 
 ****************************************************************/
extern int P005_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P005_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P005_TM_TrainToTrack_allow_double_conversion();
extern int P005_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P005_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P005_TM_TrainToTrack_Utils;

/****************************************************************
 ** P005_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P005_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P005_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P005_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P005_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P005_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P005_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P005_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P005_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P005_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P044_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P044_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P044_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P044_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P044_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P044_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P044_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_TM_TrainToTrack 
 ****************************************************************/
extern int P044_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P044_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_TM_TrainToTrack_allow_double_conversion();
extern int P044_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P044_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P044_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P044_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P044_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_other_data_TM_TrainToTrack 
 ****************************************************************/
extern int P044_other_data_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P044_other_data_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_other_data_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_other_data_TM_TrainToTrack_allow_double_conversion();
extern int P044_other_data_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P044_other_data_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P044_other_data_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P044_other_data_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P044_other_data_TM_TrainToTrack_Utils;

/****************************************************************
 ** P001_TM_TrainToTrack 
 ****************************************************************/
extern int P001_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P001_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P001_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P001_TM_TrainToTrack_allow_double_conversion();
extern int P001_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P001_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P001_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P001_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P001_TM_TrainToTrack_Utils;

/****************************************************************
 ** P001_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P001_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P001_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P001_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P001_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P001_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P001_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P001_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P001_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P001_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P000_TM_TrainToTrack 
 ****************************************************************/
extern int P000_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P000_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P000_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P000_TM_TrainToTrack_allow_double_conversion();
extern int P000_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P000_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P000_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P000_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P000_TM_TrainToTrack_Utils;

/****************************************************************
 ** P000_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P000_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P000_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P000_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P000_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P000_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P000_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P000_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P000_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P000_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_TM_TrainToTrack 
 ****************************************************************/
extern int P011_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_TM_TrainToTrack_allow_double_conversion();
extern int P011_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_list_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_list_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_list_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_list_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_list_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_list_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_list_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_list_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_list_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_list_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_ntc_list_TM_TrainToTrack 
 ****************************************************************/
extern int P011_ntc_list_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_ntc_list_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_ntc_list_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_ntc_list_TM_TrainToTrack_allow_double_conversion();
extern int P011_ntc_list_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_ntc_list_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_ntc_list_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_ntc_list_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_ntc_list_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_sections_array_flat_t_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_sections_array_flat_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_sections_array_flat_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_sections_array_flat_t_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_sections_array_flat_t_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_sections_array_flat_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_sections_array_flat_t_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_sections_array_flat_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_sectionlist_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_sectionlist_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_sectionlist_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_sectionlist_array_T_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_sectionlist_array_T_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_sectionlist_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_sectionlist_array_T_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_sectionlist_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_section_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_voltage_section_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_section_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_section_array_T_TM_TrainToTrack_allow_double_conversion();
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_voltage_section_array_T_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_voltage_section_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_voltage_section_array_T_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_voltage_section_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_ntc_list_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_ntc_list_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_ntc_list_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_ntc_list_array_T_TM_TrainToTrack_allow_double_conversion();
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_ntc_list_array_T_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_ntc_list_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_ntc_list_array_T_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_ntc_list_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P011_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P011_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P011_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P011_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P011_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P011_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P011_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P009_TM_TrainToTrack 
 ****************************************************************/
extern int P009_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P009_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P009_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P009_TM_TrainToTrack_allow_double_conversion();
extern int P009_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P009_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P009_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P009_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P009_TM_TrainToTrack_Utils;

/****************************************************************
 ** P009_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P009_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P009_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P009_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P009_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P009_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P009_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P009_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P009_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P009_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_TM_TrainToTrack 
 ****************************************************************/
extern int P003_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_TM_TrainToTrack_allow_double_conversion();
extern int P003_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P003_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P003_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_nid_radio_list_t_TM_TrainToTrack 
 ****************************************************************/
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_nid_radio_list_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_nid_radio_list_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_nid_radio_list_t_TM_TrainToTrack_allow_double_conversion();
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P003_nid_radio_list_t_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_nid_radio_list_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_nid_radio_list_t_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P003_nid_radio_list_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_nid_radio_list_int_t_TM_TrainToTrack 
 ****************************************************************/
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_nid_radio_list_int_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_nid_radio_list_int_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_nid_radio_list_int_t_TM_TrainToTrack_allow_double_conversion();
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P003_nid_radio_list_int_t_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_nid_radio_list_int_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_nid_radio_list_int_t_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P003_nid_radio_list_int_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P003_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_P003_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_TrainTrack_int_TM_TrainToTrack_allow_double_conversion();
extern int P003_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_P003_TrainTrack_int_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_P003_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_P003_TrainTrack_int_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_P003_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** Array11_TM_TrainToTrack 
 ****************************************************************/
extern int Array11_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array11_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Array11_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Array11_TM_TrainToTrack_allow_double_conversion();
extern int Array11_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_Array11_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array11_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array11_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_Array11_TM_TrainToTrack_Utils;

/****************************************************************
 ** Array03_TM_TrainToTrack 
 ****************************************************************/
extern int Array03_TM_TrainToTrack_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Array03_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Array03_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Array03_TM_TrainToTrack_allow_double_conversion();
extern int Array03_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int get_Array03_TM_TrainToTrack_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Array03_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Array03_TM_TrainToTrack_default_value(void *pValue);
extern SimTypeUtils _Type_Array03_TM_TrainToTrack_Utils;

/****************************************************************
 ** trainDataStatus_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainDataStatus_T_trainData_Types_pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainDataStatus_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainDataStatus_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainDataStatus_T_trainData_Types_pkg_allow_double_conversion();
extern int trainDataStatus_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int get_trainDataStatus_T_trainData_Types_pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainDataStatus_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainDataStatus_T_trainData_Types_pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainDataStatus_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** trainData_Trigger_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainData_Trigger_T_trainData_Types_pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainData_Trigger_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainData_Trigger_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_Trigger_T_trainData_Types_pkg_allow_double_conversion();
extern int trainData_Trigger_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int get_trainData_Trigger_T_trainData_Types_pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainData_Trigger_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainData_Trigger_T_trainData_Types_pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainData_Trigger_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** trainData_Events_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainData_Events_T_trainData_Types_pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_trainData_Events_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainData_Events_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_Events_T_trainData_Types_pkg_allow_double_conversion();
extern int trainData_Events_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int get_trainData_Events_T_trainData_Types_pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_trainData_Events_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_trainData_Events_T_trainData_Types_pkg_default_value(void *pValue);
extern SimTypeUtils _Type_trainData_Events_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg 
 ****************************************************************/
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_string(const char *str, char **endptr);
extern int string_to_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_allow_double_conversion();
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_double(const void *pValue, double *nValue);
extern int get_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_Utils;

/****************************************************************
 ** AccuDistanceProfileMA_TA_MA 
 ****************************************************************/
extern int AccuDistanceProfileMA_TA_MA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_AccuDistanceProfileMA_TA_MA_string(const char *str, char **endptr);
extern int string_to_AccuDistanceProfileMA_TA_MA(const char *str, void *pValue, char **endptr);
extern int is_AccuDistanceProfileMA_TA_MA_allow_double_conversion();
extern int AccuDistanceProfileMA_TA_MA_to_double(const void *pValue, double *nValue);
extern int get_AccuDistanceProfileMA_TA_MA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_AccuDistanceProfileMA_TA_MA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_AccuDistanceProfileMA_TA_MA_default_value(void *pValue);
extern SimTypeUtils _Type_AccuDistanceProfileMA_TA_MA_Utils;

/****************************************************************
 ** ActionType_TA_MA 
 ****************************************************************/
extern int ActionType_TA_MA_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_ActionType_TA_MA_string(const char *str, char **endptr);
extern int string_to_ActionType_TA_MA(const char *str, void *pValue, char **endptr);
extern int is_ActionType_TA_MA_allow_double_conversion();
extern int ActionType_TA_MA_to_double(const void *pValue, double *nValue);
extern int get_ActionType_TA_MA_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_ActionType_TA_MA(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_ActionType_TA_MA_default_value(void *pValue);
extern SimTypeUtils _Type_ActionType_TA_MA_Utils;

/****************************************************************
 ** SSP_matrix_t_TA_MRSP 
 ****************************************************************/
extern int SSP_matrix_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_matrix_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_matrix_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_matrix_t_TA_MRSP_allow_double_conversion();
extern int SSP_matrix_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_matrix_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_matrix_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_matrix_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_matrix_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_section_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_section_t_TA_MRSP_allow_double_conversion();
extern int SSP_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_section_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_section_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_t_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_t_section_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_t_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_t_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_t_section_t_TA_MRSP_allow_double_conversion();
extern int SSP_t_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_t_section_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_t_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_t_section_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_t_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_s_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_s_section_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_s_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_s_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_s_section_t_TA_MRSP_allow_double_conversion();
extern int SSP_s_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_s_section_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_s_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_s_section_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_s_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_cat_t_TA_MRSP 
 ****************************************************************/
extern int SSP_cat_t_TA_MRSP_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_SSP_cat_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_cat_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_cat_t_TA_MRSP_allow_double_conversion();
extern int SSP_cat_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int get_SSP_cat_t_TA_MRSP_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_SSP_cat_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_SSP_cat_t_TA_MRSP_default_value(void *pValue);
extern SimTypeUtils _Type_SSP_cat_t_TA_MRSP_Utils;

/****************************************************************
 ** MRSP_reduction_acc_TA_Export 
 ****************************************************************/
extern int MRSP_reduction_acc_TA_Export_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_MRSP_reduction_acc_TA_Export_string(const char *str, char **endptr);
extern int string_to_MRSP_reduction_acc_TA_Export(const char *str, void *pValue, char **endptr);
extern int is_MRSP_reduction_acc_TA_Export_allow_double_conversion();
extern int MRSP_reduction_acc_TA_Export_to_double(const void *pValue, double *nValue);
extern int get_MRSP_reduction_acc_TA_Export_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_MRSP_reduction_acc_TA_Export(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_MRSP_reduction_acc_TA_Export_default_value(void *pValue);
extern SimTypeUtils _Type_MRSP_reduction_acc_TA_Export_Utils;

/****************************************************************
 ** NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_allow_double_conversion();
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int get_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_default_value(void *pValue);
extern SimTypeUtils _Type_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_allow_double_conversion();
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int get_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_default_value(void *pValue);
extern SimTypeUtils _Type_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_allow_double_conversion();
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int get_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_default_value(void *pValue);
extern SimTypeUtils _Type_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** Radio_TrainTrack_Message_T_TM_transitional 
 ****************************************************************/
extern int Radio_TrainTrack_Message_T_TM_transitional_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrainTrack_Message_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Message_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Message_T_TM_transitional_allow_double_conversion();
extern int Radio_TrainTrack_Message_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrainTrack_Message_T_TM_transitional_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrainTrack_Message_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrainTrack_Message_T_TM_transitional_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Message_T_TM_transitional_Utils;

/****************************************************************
 ** Radio_TrainTrack_Header_T_TM_transitional 
 ****************************************************************/
extern int Radio_TrainTrack_Header_T_TM_transitional_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrainTrack_Header_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Header_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Header_T_TM_transitional_allow_double_conversion();
extern int Radio_TrainTrack_Header_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrainTrack_Header_T_TM_transitional_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrainTrack_Header_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrainTrack_Header_T_TM_transitional_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Header_T_TM_transitional_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_TM_transitional 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_TM_transitional_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Radio_TrackTrain_Header_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_TM_transitional_allow_double_conversion();
extern int Radio_TrackTrain_Header_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int get_Radio_TrackTrain_Header_T_TM_transitional_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Radio_TrackTrain_Header_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Radio_TrackTrain_Header_T_TM_transitional_default_value(void *pValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_TM_transitional_Utils;

/****************************************************************
 ** Driver2MAR_T_TA_MA_Request 
 ****************************************************************/
extern int Driver2MAR_T_TA_MA_Request_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_Driver2MAR_T_TA_MA_Request_string(const char *str, char **endptr);
extern int string_to_Driver2MAR_T_TA_MA_Request(const char *str, void *pValue, char **endptr);
extern int is_Driver2MAR_T_TA_MA_Request_allow_double_conversion();
extern int Driver2MAR_T_TA_MA_Request_to_double(const void *pValue, double *nValue);
extern int get_Driver2MAR_T_TA_MA_Request_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_Driver2MAR_T_TA_MA_Request(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_Driver2MAR_T_TA_MA_Request_default_value(void *pValue);
extern SimTypeUtils _Type_Driver2MAR_T_TA_MA_Request_Utils;

/****************************************************************
 ** positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg 
 ****************************************************************/
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_string(const char *str, char **endptr);
extern int string_to_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(const char *str, void *pValue, char **endptr);
extern int is_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_allow_double_conversion();
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_double(const void *pValue, double *nValue);
extern int get_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_Utils;

/****************************************************************
 ** BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg 
 ****************************************************************/
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_allow_double_conversion();
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_Utils;

/****************************************************************
 ** BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg 
 ****************************************************************/
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_allow_double_conversion();
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_double(const void *pValue, double *nValue);
extern int get_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_Utils;

/****************************************************************
 ** refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_allow_double_conversion();
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int get_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_allow_double_conversion();
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int get_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_allow_double_conversion();
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int get_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** radioNetWorkIDs_T_MoRC_Pck 
 ****************************************************************/
extern int radioNetWorkIDs_T_MoRC_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_radioNetWorkIDs_T_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_radioNetWorkIDs_T_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_radioNetWorkIDs_T_MoRC_Pck_allow_double_conversion();
extern int radioNetWorkIDs_T_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int get_radioNetWorkIDs_T_MoRC_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_radioNetWorkIDs_T_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_radioNetWorkIDs_T_MoRC_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_radioNetWorkIDs_T_MoRC_Pck_Utils;

/****************************************************************
 ** time_Type_MoRC_Pck 
 ****************************************************************/
extern int time_Type_MoRC_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_time_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_time_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_time_Type_MoRC_Pck_allow_double_conversion();
extern int time_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int get_time_Type_MoRC_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_time_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_time_Type_MoRC_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_time_Type_MoRC_Pck_Utils;

/****************************************************************
 ** mobileHWConnectionStatus_Type_MoRC_Pck 
 ****************************************************************/
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileHWConnectionStatus_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_mobileHWConnectionStatus_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_mobileHWConnectionStatus_Type_MoRC_Pck_allow_double_conversion();
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int get_mobileHWConnectionStatus_Type_MoRC_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileHWConnectionStatus_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileHWConnectionStatus_Type_MoRC_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_mobileHWConnectionStatus_Type_MoRC_Pck_Utils;

/****************************************************************
 ** mobileHWStatus_Type_MoRC_Pck 
 ****************************************************************/
extern int mobileHWStatus_Type_MoRC_Pck_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_mobileHWStatus_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_mobileHWStatus_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_mobileHWStatus_Type_MoRC_Pck_allow_double_conversion();
extern int mobileHWStatus_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int get_mobileHWStatus_Type_MoRC_Pck_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_mobileHWStatus_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_mobileHWStatus_Type_MoRC_Pck_default_value(void *pValue);
extern SimTypeUtils _Type_mobileHWStatus_Type_MoRC_Pck_Utils;

/****************************************************************
 ** p42_sessionManagement_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_p42_sessionManagement_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_p42_sessionManagement_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p42_sessionManagement_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_p42_sessionManagement_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_p42_sessionManagement_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_p42_sessionManagement_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_p42_sessionManagement_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** msgFromTrack_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_msgFromTrack_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgFromTrack_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgFromTrack_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_msgFromTrack_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_msgFromTrack_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_msgFromTrack_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_msgFromTrack_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** msgToTrackTriggers_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** msgToTrack_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_msgToTrack_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgToTrack_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgToTrack_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_msgToTrack_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_msgToTrack_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_msgToTrack_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_msgToTrack_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_allow_double_conversion();
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int get_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** odometryFactors_T_Toolbox 
 ****************************************************************/
extern int odometryFactors_T_Toolbox_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_odometryFactors_T_Toolbox_string(const char *str, char **endptr);
extern int string_to_odometryFactors_T_Toolbox(const char *str, void *pValue, char **endptr);
extern int is_odometryFactors_T_Toolbox_allow_double_conversion();
extern int odometryFactors_T_Toolbox_to_double(const void *pValue, double *nValue);
extern int get_odometryFactors_T_Toolbox_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_odometryFactors_T_Toolbox(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_odometryFactors_T_Toolbox_default_value(void *pValue);
extern SimTypeUtils _Type_odometryFactors_T_Toolbox_Utils;

/****************************************************************
 ** OdometrySpeed_T_Toolbox 
 ****************************************************************/
extern int OdometrySpeed_T_Toolbox_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_OdometrySpeed_T_Toolbox_string(const char *str, char **endptr);
extern int string_to_OdometrySpeed_T_Toolbox(const char *str, void *pValue, char **endptr);
extern int is_OdometrySpeed_T_Toolbox_allow_double_conversion();
extern int OdometrySpeed_T_Toolbox_to_double(const void *pValue, double *nValue);
extern int get_OdometrySpeed_T_Toolbox_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_OdometrySpeed_T_Toolbox(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_OdometrySpeed_T_Toolbox_default_value(void *pValue);
extern SimTypeUtils _Type_OdometrySpeed_T_Toolbox_Utils;

/****************************************************************
 ** RBC_Data_T_RBC_DataBus_Pkg 
 ****************************************************************/
extern int RBC_Data_T_RBC_DataBus_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_RBC_Data_T_RBC_DataBus_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Data_T_RBC_DataBus_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Data_T_RBC_DataBus_Pkg_allow_double_conversion();
extern int RBC_Data_T_RBC_DataBus_Pkg_to_double(const void *pValue, double *nValue);
extern int get_RBC_Data_T_RBC_DataBus_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_RBC_Data_T_RBC_DataBus_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_RBC_Data_T_RBC_DataBus_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_RBC_Data_T_RBC_DataBus_Pkg_Utils;

/****************************************************************
 ** DiagMsg_T_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsg_T_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiagMsg_T_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsg_T_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsg_T_RBC_Diagnostic_Pkg_allow_double_conversion();
extern int DiagMsg_T_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiagMsg_T_RBC_Diagnostic_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiagMsg_T_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiagMsg_T_RBC_Diagnostic_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiagMsg_T_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** DiagMsgType_E_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsgType_E_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiagMsgType_E_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsgType_E_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsgType_E_RBC_Diagnostic_Pkg_allow_double_conversion();
extern int DiagMsgType_E_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiagMsgType_E_RBC_Diagnostic_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiagMsgType_E_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiagMsgType_E_RBC_Diagnostic_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiagMsgType_E_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** DiagMsgSrc_E_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsgSrc_E_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiagMsgSrc_E_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsgSrc_E_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsgSrc_E_RBC_Diagnostic_Pkg_allow_double_conversion();
extern int DiagMsgSrc_E_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiagMsgSrc_E_RBC_Diagnostic_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiagMsgSrc_E_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiagMsgSrc_E_RBC_Diagnostic_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiagMsgSrc_E_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** DiagMsgText_E_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsgText_E_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFNSTRAPPEND pfnStrAppend, void *pData);
extern int check_DiagMsgText_E_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsgText_E_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsgText_E_RBC_Diagnostic_Pkg_allow_double_conversion();
extern int DiagMsgText_E_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int get_DiagMsgText_E_RBC_Diagnostic_Pkg_signature(int (*pfnStrAppend)(const char *str, void *pData), void *pData);
extern void compare_DiagMsgText_E_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, void *pData, const char *pszPath, PFNSTRAPPEND pfnStrListAppend, void *pListErrPaths);
extern int set_DiagMsgText_E_RBC_Diagnostic_Pkg_default_value(void *pValue);
extern SimTypeUtils _Type_DiagMsgText_E_RBC_Diagnostic_Pkg_Utils;


#endif /*TESTBENCH_INTEGRATION_TYPES_CONVERSION */
